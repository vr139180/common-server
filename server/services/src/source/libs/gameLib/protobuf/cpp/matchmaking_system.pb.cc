// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: matchmaking_system.proto

#include "matchmaking_system.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace PRO {
constexpr MMS_MatchMaking_req::MMS_MatchMaking_req(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : utoken_(nullptr)
  , battles_(nullptr){}
struct MMS_MatchMaking_reqDefaultTypeInternal {
  constexpr MMS_MatchMaking_reqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MMS_MatchMaking_reqDefaultTypeInternal() {}
  union {
    MMS_MatchMaking_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MMS_MatchMaking_reqDefaultTypeInternal _MMS_MatchMaking_req_default_instance_;
constexpr MMS_MatchMaking_ack::MMS_MatchMaking_ack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : utoken_(nullptr){}
struct MMS_MatchMaking_ackDefaultTypeInternal {
  constexpr MMS_MatchMaking_ackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MMS_MatchMaking_ackDefaultTypeInternal() {}
  union {
    MMS_MatchMaking_ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MMS_MatchMaking_ackDefaultTypeInternal _MMS_MatchMaking_ack_default_instance_;
}  // namespace PRO
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_matchmaking_5fsystem_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_matchmaking_5fsystem_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_matchmaking_5fsystem_2eproto = nullptr;

const uint32_t TableStruct_matchmaking_5fsystem_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::PRO::MMS_MatchMaking_req, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PRO::MMS_MatchMaking_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::MMS_MatchMaking_req, utoken_),
  PROTOBUF_FIELD_OFFSET(::PRO::MMS_MatchMaking_req, battles_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::PRO::MMS_MatchMaking_ack, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PRO::MMS_MatchMaking_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::MMS_MatchMaking_ack, utoken_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::PRO::MMS_MatchMaking_req)},
  { 10, 17, -1, sizeof(::PRO::MMS_MatchMaking_ack)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_MMS_MatchMaking_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_MMS_MatchMaking_ack_default_instance_),
};

const char descriptor_table_protodef_matchmaking_5fsystem_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030matchmaking_system.proto\022\003PRO\032\025global_"
  "internal.proto\032\021db_internal.proto\"j\n\023MMS"
  "_MatchMaking_req\022#\n\006utoken\030\001 \001(\0132\016.PRO.U"
  "serTokenH\000\210\001\001\022#\n\007battles\030\002 \001(\0132\022.PRO.DBU"
  "serBattlesB\t\n\007_utoken\"E\n\023MMS_MatchMaking"
  "_ack\022#\n\006utoken\030\001 \001(\0132\016.PRO.UserTokenH\000\210\001"
  "\001B\t\n\007_utokenBT\n\033com.cms.client.network.g"
  "proP\001Z\025gamelib/protobuf/gpro\252\002\033com.cms.c"
  "lient.network.gprob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_matchmaking_5fsystem_2eproto_deps[2] = {
  &::descriptor_table_db_5finternal_2eproto,
  &::descriptor_table_global_5finternal_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_matchmaking_5fsystem_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_matchmaking_5fsystem_2eproto = {
  false, false, 346, descriptor_table_protodef_matchmaking_5fsystem_2eproto, "matchmaking_system.proto", 
  &descriptor_table_matchmaking_5fsystem_2eproto_once, descriptor_table_matchmaking_5fsystem_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_matchmaking_5fsystem_2eproto::offsets,
  file_level_metadata_matchmaking_5fsystem_2eproto, file_level_enum_descriptors_matchmaking_5fsystem_2eproto, file_level_service_descriptors_matchmaking_5fsystem_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_matchmaking_5fsystem_2eproto_getter() {
  return &descriptor_table_matchmaking_5fsystem_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_matchmaking_5fsystem_2eproto(&descriptor_table_matchmaking_5fsystem_2eproto);
namespace PRO {

// ===================================================================

class MMS_MatchMaking_req::_Internal {
 public:
  using HasBits = decltype(std::declval<MMS_MatchMaking_req>()._has_bits_);
  static const ::PRO::UserToken& utoken(const MMS_MatchMaking_req* msg);
  static void set_has_utoken(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PRO::DBUserBattles& battles(const MMS_MatchMaking_req* msg);
};

const ::PRO::UserToken&
MMS_MatchMaking_req::_Internal::utoken(const MMS_MatchMaking_req* msg) {
  return *msg->utoken_;
}
const ::PRO::DBUserBattles&
MMS_MatchMaking_req::_Internal::battles(const MMS_MatchMaking_req* msg) {
  return *msg->battles_;
}
void MMS_MatchMaking_req::clear_utoken() {
  if (utoken_ != nullptr) utoken_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void MMS_MatchMaking_req::clear_battles() {
  if (GetArenaForAllocation() == nullptr && battles_ != nullptr) {
    delete battles_;
  }
  battles_ = nullptr;
}
MMS_MatchMaking_req::MMS_MatchMaking_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.MMS_MatchMaking_req)
}
MMS_MatchMaking_req::MMS_MatchMaking_req(const MMS_MatchMaking_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_utoken()) {
    utoken_ = new ::PRO::UserToken(*from.utoken_);
  } else {
    utoken_ = nullptr;
  }
  if (from._internal_has_battles()) {
    battles_ = new ::PRO::DBUserBattles(*from.battles_);
  } else {
    battles_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PRO.MMS_MatchMaking_req)
}

inline void MMS_MatchMaking_req::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&utoken_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&battles_) -
    reinterpret_cast<char*>(&utoken_)) + sizeof(battles_));
}

MMS_MatchMaking_req::~MMS_MatchMaking_req() {
  // @@protoc_insertion_point(destructor:PRO.MMS_MatchMaking_req)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MMS_MatchMaking_req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete utoken_;
  if (this != internal_default_instance()) delete battles_;
}

void MMS_MatchMaking_req::ArenaDtor(void* object) {
  MMS_MatchMaking_req* _this = reinterpret_cast< MMS_MatchMaking_req* >(object);
  (void)_this;
}
void MMS_MatchMaking_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MMS_MatchMaking_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MMS_MatchMaking_req::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.MMS_MatchMaking_req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(utoken_ != nullptr);
    utoken_->Clear();
  }
  if (GetArenaForAllocation() == nullptr && battles_ != nullptr) {
    delete battles_;
  }
  battles_ = nullptr;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MMS_MatchMaking_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .PRO.UserToken utoken = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_utoken(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PRO.DBUserBattles battles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_battles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MMS_MatchMaking_req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.MMS_MatchMaking_req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .PRO.UserToken utoken = 1;
  if (_internal_has_utoken()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::utoken(this), target, stream);
  }

  // .PRO.DBUserBattles battles = 2;
  if (this->_internal_has_battles()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::battles(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.MMS_MatchMaking_req)
  return target;
}

size_t MMS_MatchMaking_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.MMS_MatchMaking_req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PRO.UserToken utoken = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *utoken_);
  }

  // .PRO.DBUserBattles battles = 2;
  if (this->_internal_has_battles()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *battles_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MMS_MatchMaking_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MMS_MatchMaking_req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MMS_MatchMaking_req::GetClassData() const { return &_class_data_; }

void MMS_MatchMaking_req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MMS_MatchMaking_req *>(to)->MergeFrom(
      static_cast<const MMS_MatchMaking_req &>(from));
}


void MMS_MatchMaking_req::MergeFrom(const MMS_MatchMaking_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.MMS_MatchMaking_req)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_utoken()) {
    _internal_mutable_utoken()->::PRO::UserToken::MergeFrom(from._internal_utoken());
  }
  if (from._internal_has_battles()) {
    _internal_mutable_battles()->::PRO::DBUserBattles::MergeFrom(from._internal_battles());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MMS_MatchMaking_req::CopyFrom(const MMS_MatchMaking_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.MMS_MatchMaking_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MMS_MatchMaking_req::IsInitialized() const {
  return true;
}

void MMS_MatchMaking_req::InternalSwap(MMS_MatchMaking_req* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MMS_MatchMaking_req, battles_)
      + sizeof(MMS_MatchMaking_req::battles_)
      - PROTOBUF_FIELD_OFFSET(MMS_MatchMaking_req, utoken_)>(
          reinterpret_cast<char*>(&utoken_),
          reinterpret_cast<char*>(&other->utoken_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MMS_MatchMaking_req::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_matchmaking_5fsystem_2eproto_getter, &descriptor_table_matchmaking_5fsystem_2eproto_once,
      file_level_metadata_matchmaking_5fsystem_2eproto[0]);
}

// ===================================================================

class MMS_MatchMaking_ack::_Internal {
 public:
  using HasBits = decltype(std::declval<MMS_MatchMaking_ack>()._has_bits_);
  static const ::PRO::UserToken& utoken(const MMS_MatchMaking_ack* msg);
  static void set_has_utoken(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PRO::UserToken&
MMS_MatchMaking_ack::_Internal::utoken(const MMS_MatchMaking_ack* msg) {
  return *msg->utoken_;
}
void MMS_MatchMaking_ack::clear_utoken() {
  if (utoken_ != nullptr) utoken_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
MMS_MatchMaking_ack::MMS_MatchMaking_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.MMS_MatchMaking_ack)
}
MMS_MatchMaking_ack::MMS_MatchMaking_ack(const MMS_MatchMaking_ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_utoken()) {
    utoken_ = new ::PRO::UserToken(*from.utoken_);
  } else {
    utoken_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PRO.MMS_MatchMaking_ack)
}

inline void MMS_MatchMaking_ack::SharedCtor() {
utoken_ = nullptr;
}

MMS_MatchMaking_ack::~MMS_MatchMaking_ack() {
  // @@protoc_insertion_point(destructor:PRO.MMS_MatchMaking_ack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MMS_MatchMaking_ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete utoken_;
}

void MMS_MatchMaking_ack::ArenaDtor(void* object) {
  MMS_MatchMaking_ack* _this = reinterpret_cast< MMS_MatchMaking_ack* >(object);
  (void)_this;
}
void MMS_MatchMaking_ack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MMS_MatchMaking_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MMS_MatchMaking_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.MMS_MatchMaking_ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(utoken_ != nullptr);
    utoken_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MMS_MatchMaking_ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .PRO.UserToken utoken = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_utoken(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MMS_MatchMaking_ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.MMS_MatchMaking_ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .PRO.UserToken utoken = 1;
  if (_internal_has_utoken()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::utoken(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.MMS_MatchMaking_ack)
  return target;
}

size_t MMS_MatchMaking_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.MMS_MatchMaking_ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PRO.UserToken utoken = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *utoken_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MMS_MatchMaking_ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MMS_MatchMaking_ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MMS_MatchMaking_ack::GetClassData() const { return &_class_data_; }

void MMS_MatchMaking_ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MMS_MatchMaking_ack *>(to)->MergeFrom(
      static_cast<const MMS_MatchMaking_ack &>(from));
}


void MMS_MatchMaking_ack::MergeFrom(const MMS_MatchMaking_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.MMS_MatchMaking_ack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_utoken()) {
    _internal_mutable_utoken()->::PRO::UserToken::MergeFrom(from._internal_utoken());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MMS_MatchMaking_ack::CopyFrom(const MMS_MatchMaking_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.MMS_MatchMaking_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MMS_MatchMaking_ack::IsInitialized() const {
  return true;
}

void MMS_MatchMaking_ack::InternalSwap(MMS_MatchMaking_ack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(utoken_, other->utoken_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MMS_MatchMaking_ack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_matchmaking_5fsystem_2eproto_getter, &descriptor_table_matchmaking_5fsystem_2eproto_once,
      file_level_metadata_matchmaking_5fsystem_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace PRO
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PRO::MMS_MatchMaking_req* Arena::CreateMaybeMessage< ::PRO::MMS_MatchMaking_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::MMS_MatchMaking_req >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::MMS_MatchMaking_ack* Arena::CreateMaybeMessage< ::PRO::MMS_MatchMaking_ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::MMS_MatchMaking_ack >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

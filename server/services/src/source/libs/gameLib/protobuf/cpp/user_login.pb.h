// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_login.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_user_5flogin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_user_5flogin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "db_internal.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_user_5flogin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_user_5flogin_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_user_5flogin_2eproto;
namespace PRO {
class User_Active_ntf;
struct User_Active_ntfDefaultTypeInternal;
extern User_Active_ntfDefaultTypeInternal _User_Active_ntf_default_instance_;
class User_GateLost_ntf;
struct User_GateLost_ntfDefaultTypeInternal;
extern User_GateLost_ntfDefaultTypeInternal _User_GateLost_ntf_default_instance_;
class User_Login_ack;
struct User_Login_ackDefaultTypeInternal;
extern User_Login_ackDefaultTypeInternal _User_Login_ack_default_instance_;
class User_Login_req;
struct User_Login_reqDefaultTypeInternal;
extern User_Login_reqDefaultTypeInternal _User_Login_req_default_instance_;
class User_Logout_ntf;
struct User_Logout_ntfDefaultTypeInternal;
extern User_Logout_ntfDefaultTypeInternal _User_Logout_ntf_default_instance_;
class User_ReLogin_ack;
struct User_ReLogin_ackDefaultTypeInternal;
extern User_ReLogin_ackDefaultTypeInternal _User_ReLogin_ack_default_instance_;
class User_ReLogin_req;
struct User_ReLogin_reqDefaultTypeInternal;
extern User_ReLogin_reqDefaultTypeInternal _User_ReLogin_req_default_instance_;
class User_RoleCreate_ack;
struct User_RoleCreate_ackDefaultTypeInternal;
extern User_RoleCreate_ackDefaultTypeInternal _User_RoleCreate_ack_default_instance_;
class User_RoleCreate_req;
struct User_RoleCreate_reqDefaultTypeInternal;
extern User_RoleCreate_reqDefaultTypeInternal _User_RoleCreate_req_default_instance_;
class User_RoleDetailA_ntf;
struct User_RoleDetailA_ntfDefaultTypeInternal;
extern User_RoleDetailA_ntfDefaultTypeInternal _User_RoleDetailA_ntf_default_instance_;
class User_RoleDetailB_ntf;
struct User_RoleDetailB_ntfDefaultTypeInternal;
extern User_RoleDetailB_ntfDefaultTypeInternal _User_RoleDetailB_ntf_default_instance_;
class User_RoleDetailEnd_ntf;
struct User_RoleDetailEnd_ntfDefaultTypeInternal;
extern User_RoleDetailEnd_ntfDefaultTypeInternal _User_RoleDetailEnd_ntf_default_instance_;
class User_RoleList_ack;
struct User_RoleList_ackDefaultTypeInternal;
extern User_RoleList_ackDefaultTypeInternal _User_RoleList_ack_default_instance_;
class User_RoleList_req;
struct User_RoleList_reqDefaultTypeInternal;
extern User_RoleList_reqDefaultTypeInternal _User_RoleList_req_default_instance_;
class User_RoleSelect_ack;
struct User_RoleSelect_ackDefaultTypeInternal;
extern User_RoleSelect_ackDefaultTypeInternal _User_RoleSelect_ack_default_instance_;
class User_RoleSelect_req;
struct User_RoleSelect_reqDefaultTypeInternal;
extern User_RoleSelect_reqDefaultTypeInternal _User_RoleSelect_req_default_instance_;
}  // namespace PRO
PROTOBUF_NAMESPACE_OPEN
template<> ::PRO::User_Active_ntf* Arena::CreateMaybeMessage<::PRO::User_Active_ntf>(Arena*);
template<> ::PRO::User_GateLost_ntf* Arena::CreateMaybeMessage<::PRO::User_GateLost_ntf>(Arena*);
template<> ::PRO::User_Login_ack* Arena::CreateMaybeMessage<::PRO::User_Login_ack>(Arena*);
template<> ::PRO::User_Login_req* Arena::CreateMaybeMessage<::PRO::User_Login_req>(Arena*);
template<> ::PRO::User_Logout_ntf* Arena::CreateMaybeMessage<::PRO::User_Logout_ntf>(Arena*);
template<> ::PRO::User_ReLogin_ack* Arena::CreateMaybeMessage<::PRO::User_ReLogin_ack>(Arena*);
template<> ::PRO::User_ReLogin_req* Arena::CreateMaybeMessage<::PRO::User_ReLogin_req>(Arena*);
template<> ::PRO::User_RoleCreate_ack* Arena::CreateMaybeMessage<::PRO::User_RoleCreate_ack>(Arena*);
template<> ::PRO::User_RoleCreate_req* Arena::CreateMaybeMessage<::PRO::User_RoleCreate_req>(Arena*);
template<> ::PRO::User_RoleDetailA_ntf* Arena::CreateMaybeMessage<::PRO::User_RoleDetailA_ntf>(Arena*);
template<> ::PRO::User_RoleDetailB_ntf* Arena::CreateMaybeMessage<::PRO::User_RoleDetailB_ntf>(Arena*);
template<> ::PRO::User_RoleDetailEnd_ntf* Arena::CreateMaybeMessage<::PRO::User_RoleDetailEnd_ntf>(Arena*);
template<> ::PRO::User_RoleList_ack* Arena::CreateMaybeMessage<::PRO::User_RoleList_ack>(Arena*);
template<> ::PRO::User_RoleList_req* Arena::CreateMaybeMessage<::PRO::User_RoleList_req>(Arena*);
template<> ::PRO::User_RoleSelect_ack* Arena::CreateMaybeMessage<::PRO::User_RoleSelect_ack>(Arena*);
template<> ::PRO::User_RoleSelect_req* Arena::CreateMaybeMessage<::PRO::User_RoleSelect_req>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PRO {

// ===================================================================

class User_Login_req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.User_Login_req) */ {
 public:
  inline User_Login_req() : User_Login_req(nullptr) {}
  ~User_Login_req() override;
  explicit constexpr User_Login_req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User_Login_req(const User_Login_req& from);
  User_Login_req(User_Login_req&& from) noexcept
    : User_Login_req() {
    *this = ::std::move(from);
  }

  inline User_Login_req& operator=(const User_Login_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_Login_req& operator=(User_Login_req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_Login_req& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_Login_req* internal_default_instance() {
    return reinterpret_cast<const User_Login_req*>(
               &_User_Login_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(User_Login_req& a, User_Login_req& b) {
    a.Swap(&b);
  }
  inline void Swap(User_Login_req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_Login_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_Login_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_Login_req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const User_Login_req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const User_Login_req& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User_Login_req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.User_Login_req";
  }
  protected:
  explicit User_Login_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 2,
    kPwdFieldNumber = 3,
    kTokenFieldNumber = 4,
    kUseridFieldNumber = 5,
    kTypeFieldNumber = 1,
  };
  // optional string account = 2;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // optional string pwd = 3;
  bool has_pwd() const;
  private:
  bool _internal_has_pwd() const;
  public:
  void clear_pwd();
  const std::string& pwd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pwd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pwd();
  PROTOBUF_NODISCARD std::string* release_pwd();
  void set_allocated_pwd(std::string* pwd);
  private:
  const std::string& _internal_pwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pwd(const std::string& value);
  std::string* _internal_mutable_pwd();
  public:

  // optional string token = 4;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // optional int64 userid = 5;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  int64_t userid() const;
  void set_userid(int64_t value);
  private:
  int64_t _internal_userid() const;
  void _internal_set_userid(int64_t value);
  public:

  // int32 type = 1;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.User_Login_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  int64_t userid_;
  int32_t type_;
  friend struct ::TableStruct_user_5flogin_2eproto;
};
// -------------------------------------------------------------------

class User_Login_ack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.User_Login_ack) */ {
 public:
  inline User_Login_ack() : User_Login_ack(nullptr) {}
  ~User_Login_ack() override;
  explicit constexpr User_Login_ack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User_Login_ack(const User_Login_ack& from);
  User_Login_ack(User_Login_ack&& from) noexcept
    : User_Login_ack() {
    *this = ::std::move(from);
  }

  inline User_Login_ack& operator=(const User_Login_ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_Login_ack& operator=(User_Login_ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_Login_ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_Login_ack* internal_default_instance() {
    return reinterpret_cast<const User_Login_ack*>(
               &_User_Login_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(User_Login_ack& a, User_Login_ack& b) {
    a.Swap(&b);
  }
  inline void Swap(User_Login_ack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_Login_ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_Login_ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_Login_ack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const User_Login_ack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const User_Login_ack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User_Login_ack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.User_Login_ack";
  }
  protected:
  explicit User_Login_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogintokenFieldNumber = 4,
    kTypeFieldNumber = 1,
    kResultFieldNumber = 2,
    kUserIidFieldNumber = 3,
  };
  // optional string logintoken = 4;
  bool has_logintoken() const;
  private:
  bool _internal_has_logintoken() const;
  public:
  void clear_logintoken();
  const std::string& logintoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_logintoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_logintoken();
  PROTOBUF_NODISCARD std::string* release_logintoken();
  void set_allocated_logintoken(std::string* logintoken);
  private:
  const std::string& _internal_logintoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logintoken(const std::string& value);
  std::string* _internal_mutable_logintoken();
  public:

  // int32 type = 1;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // int32 result = 2;
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // optional int64 user_iid = 3;
  bool has_user_iid() const;
  private:
  bool _internal_has_user_iid() const;
  public:
  void clear_user_iid();
  int64_t user_iid() const;
  void set_user_iid(int64_t value);
  private:
  int64_t _internal_user_iid() const;
  void _internal_set_user_iid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.User_Login_ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logintoken_;
  int32_t type_;
  int32_t result_;
  int64_t user_iid_;
  friend struct ::TableStruct_user_5flogin_2eproto;
};
// -------------------------------------------------------------------

class User_ReLogin_req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.User_ReLogin_req) */ {
 public:
  inline User_ReLogin_req() : User_ReLogin_req(nullptr) {}
  ~User_ReLogin_req() override;
  explicit constexpr User_ReLogin_req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User_ReLogin_req(const User_ReLogin_req& from);
  User_ReLogin_req(User_ReLogin_req&& from) noexcept
    : User_ReLogin_req() {
    *this = ::std::move(from);
  }

  inline User_ReLogin_req& operator=(const User_ReLogin_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_ReLogin_req& operator=(User_ReLogin_req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_ReLogin_req& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_ReLogin_req* internal_default_instance() {
    return reinterpret_cast<const User_ReLogin_req*>(
               &_User_ReLogin_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(User_ReLogin_req& a, User_ReLogin_req& b) {
    a.Swap(&b);
  }
  inline void Swap(User_ReLogin_req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_ReLogin_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_ReLogin_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_ReLogin_req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const User_ReLogin_req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const User_ReLogin_req& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User_ReLogin_req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.User_ReLogin_req";
  }
  protected:
  explicit User_ReLogin_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIidFieldNumber = 1,
    kLogintokenFieldNumber = 2,
  };
  // int64 user_iid = 1;
  void clear_user_iid();
  int64_t user_iid() const;
  void set_user_iid(int64_t value);
  private:
  int64_t _internal_user_iid() const;
  void _internal_set_user_iid(int64_t value);
  public:

  // int64 logintoken = 2;
  void clear_logintoken();
  int64_t logintoken() const;
  void set_logintoken(int64_t value);
  private:
  int64_t _internal_logintoken() const;
  void _internal_set_logintoken(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.User_ReLogin_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t user_iid_;
  int64_t logintoken_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5flogin_2eproto;
};
// -------------------------------------------------------------------

class User_ReLogin_ack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.User_ReLogin_ack) */ {
 public:
  inline User_ReLogin_ack() : User_ReLogin_ack(nullptr) {}
  ~User_ReLogin_ack() override;
  explicit constexpr User_ReLogin_ack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User_ReLogin_ack(const User_ReLogin_ack& from);
  User_ReLogin_ack(User_ReLogin_ack&& from) noexcept
    : User_ReLogin_ack() {
    *this = ::std::move(from);
  }

  inline User_ReLogin_ack& operator=(const User_ReLogin_ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_ReLogin_ack& operator=(User_ReLogin_ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_ReLogin_ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_ReLogin_ack* internal_default_instance() {
    return reinterpret_cast<const User_ReLogin_ack*>(
               &_User_ReLogin_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(User_ReLogin_ack& a, User_ReLogin_ack& b) {
    a.Swap(&b);
  }
  inline void Swap(User_ReLogin_ack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_ReLogin_ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_ReLogin_ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_ReLogin_ack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const User_ReLogin_ack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const User_ReLogin_ack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User_ReLogin_ack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.User_ReLogin_ack";
  }
  protected:
  explicit User_ReLogin_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIidFieldNumber = 2,
    kLogintokenFieldNumber = 3,
    kResultFieldNumber = 1,
  };
  // optional int64 user_iid = 2;
  bool has_user_iid() const;
  private:
  bool _internal_has_user_iid() const;
  public:
  void clear_user_iid();
  int64_t user_iid() const;
  void set_user_iid(int64_t value);
  private:
  int64_t _internal_user_iid() const;
  void _internal_set_user_iid(int64_t value);
  public:

  // optional int64 logintoken = 3;
  bool has_logintoken() const;
  private:
  bool _internal_has_logintoken() const;
  public:
  void clear_logintoken();
  int64_t logintoken() const;
  void set_logintoken(int64_t value);
  private:
  int64_t _internal_logintoken() const;
  void _internal_set_logintoken(int64_t value);
  public:

  // int32 result = 1;
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.User_ReLogin_ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t user_iid_;
  int64_t logintoken_;
  int32_t result_;
  friend struct ::TableStruct_user_5flogin_2eproto;
};
// -------------------------------------------------------------------

class User_Logout_ntf final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:PRO.User_Logout_ntf) */ {
 public:
  inline User_Logout_ntf() : User_Logout_ntf(nullptr) {}
  explicit constexpr User_Logout_ntf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User_Logout_ntf(const User_Logout_ntf& from);
  User_Logout_ntf(User_Logout_ntf&& from) noexcept
    : User_Logout_ntf() {
    *this = ::std::move(from);
  }

  inline User_Logout_ntf& operator=(const User_Logout_ntf& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_Logout_ntf& operator=(User_Logout_ntf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_Logout_ntf& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_Logout_ntf* internal_default_instance() {
    return reinterpret_cast<const User_Logout_ntf*>(
               &_User_Logout_ntf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(User_Logout_ntf& a, User_Logout_ntf& b) {
    a.Swap(&b);
  }
  inline void Swap(User_Logout_ntf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_Logout_ntf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_Logout_ntf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_Logout_ntf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const User_Logout_ntf& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const User_Logout_ntf& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.User_Logout_ntf";
  }
  protected:
  explicit User_Logout_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PRO.User_Logout_ntf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5flogin_2eproto;
};
// -------------------------------------------------------------------

class User_GateLost_ntf final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:PRO.User_GateLost_ntf) */ {
 public:
  inline User_GateLost_ntf() : User_GateLost_ntf(nullptr) {}
  explicit constexpr User_GateLost_ntf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User_GateLost_ntf(const User_GateLost_ntf& from);
  User_GateLost_ntf(User_GateLost_ntf&& from) noexcept
    : User_GateLost_ntf() {
    *this = ::std::move(from);
  }

  inline User_GateLost_ntf& operator=(const User_GateLost_ntf& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_GateLost_ntf& operator=(User_GateLost_ntf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_GateLost_ntf& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_GateLost_ntf* internal_default_instance() {
    return reinterpret_cast<const User_GateLost_ntf*>(
               &_User_GateLost_ntf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(User_GateLost_ntf& a, User_GateLost_ntf& b) {
    a.Swap(&b);
  }
  inline void Swap(User_GateLost_ntf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_GateLost_ntf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_GateLost_ntf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_GateLost_ntf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const User_GateLost_ntf& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const User_GateLost_ntf& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.User_GateLost_ntf";
  }
  protected:
  explicit User_GateLost_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PRO.User_GateLost_ntf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5flogin_2eproto;
};
// -------------------------------------------------------------------

class User_Active_ntf final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:PRO.User_Active_ntf) */ {
 public:
  inline User_Active_ntf() : User_Active_ntf(nullptr) {}
  explicit constexpr User_Active_ntf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User_Active_ntf(const User_Active_ntf& from);
  User_Active_ntf(User_Active_ntf&& from) noexcept
    : User_Active_ntf() {
    *this = ::std::move(from);
  }

  inline User_Active_ntf& operator=(const User_Active_ntf& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_Active_ntf& operator=(User_Active_ntf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_Active_ntf& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_Active_ntf* internal_default_instance() {
    return reinterpret_cast<const User_Active_ntf*>(
               &_User_Active_ntf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(User_Active_ntf& a, User_Active_ntf& b) {
    a.Swap(&b);
  }
  inline void Swap(User_Active_ntf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_Active_ntf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_Active_ntf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_Active_ntf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const User_Active_ntf& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const User_Active_ntf& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.User_Active_ntf";
  }
  protected:
  explicit User_Active_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PRO.User_Active_ntf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5flogin_2eproto;
};
// -------------------------------------------------------------------

class User_RoleList_req final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:PRO.User_RoleList_req) */ {
 public:
  inline User_RoleList_req() : User_RoleList_req(nullptr) {}
  explicit constexpr User_RoleList_req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User_RoleList_req(const User_RoleList_req& from);
  User_RoleList_req(User_RoleList_req&& from) noexcept
    : User_RoleList_req() {
    *this = ::std::move(from);
  }

  inline User_RoleList_req& operator=(const User_RoleList_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_RoleList_req& operator=(User_RoleList_req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_RoleList_req& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_RoleList_req* internal_default_instance() {
    return reinterpret_cast<const User_RoleList_req*>(
               &_User_RoleList_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(User_RoleList_req& a, User_RoleList_req& b) {
    a.Swap(&b);
  }
  inline void Swap(User_RoleList_req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_RoleList_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_RoleList_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_RoleList_req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const User_RoleList_req& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const User_RoleList_req& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.User_RoleList_req";
  }
  protected:
  explicit User_RoleList_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PRO.User_RoleList_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5flogin_2eproto;
};
// -------------------------------------------------------------------

class User_RoleList_ack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.User_RoleList_ack) */ {
 public:
  inline User_RoleList_ack() : User_RoleList_ack(nullptr) {}
  ~User_RoleList_ack() override;
  explicit constexpr User_RoleList_ack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User_RoleList_ack(const User_RoleList_ack& from);
  User_RoleList_ack(User_RoleList_ack&& from) noexcept
    : User_RoleList_ack() {
    *this = ::std::move(from);
  }

  inline User_RoleList_ack& operator=(const User_RoleList_ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_RoleList_ack& operator=(User_RoleList_ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_RoleList_ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_RoleList_ack* internal_default_instance() {
    return reinterpret_cast<const User_RoleList_ack*>(
               &_User_RoleList_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(User_RoleList_ack& a, User_RoleList_ack& b) {
    a.Swap(&b);
  }
  inline void Swap(User_RoleList_ack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_RoleList_ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_RoleList_ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_RoleList_ack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const User_RoleList_ack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const User_RoleList_ack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User_RoleList_ack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.User_RoleList_ack";
  }
  protected:
  explicit User_RoleList_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolesFieldNumber = 1,
  };
  // .PRO.DBUserRoles roles = 1;
  bool has_roles() const;
  private:
  bool _internal_has_roles() const;
  public:
  void clear_roles();
  const ::PRO::DBUserRoles& roles() const;
  PROTOBUF_NODISCARD ::PRO::DBUserRoles* release_roles();
  ::PRO::DBUserRoles* mutable_roles();
  void set_allocated_roles(::PRO::DBUserRoles* roles);
  private:
  const ::PRO::DBUserRoles& _internal_roles() const;
  ::PRO::DBUserRoles* _internal_mutable_roles();
  public:
  void unsafe_arena_set_allocated_roles(
      ::PRO::DBUserRoles* roles);
  ::PRO::DBUserRoles* unsafe_arena_release_roles();

  // @@protoc_insertion_point(class_scope:PRO.User_RoleList_ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PRO::DBUserRoles* roles_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5flogin_2eproto;
};
// -------------------------------------------------------------------

class User_RoleCreate_req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.User_RoleCreate_req) */ {
 public:
  inline User_RoleCreate_req() : User_RoleCreate_req(nullptr) {}
  ~User_RoleCreate_req() override;
  explicit constexpr User_RoleCreate_req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User_RoleCreate_req(const User_RoleCreate_req& from);
  User_RoleCreate_req(User_RoleCreate_req&& from) noexcept
    : User_RoleCreate_req() {
    *this = ::std::move(from);
  }

  inline User_RoleCreate_req& operator=(const User_RoleCreate_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_RoleCreate_req& operator=(User_RoleCreate_req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_RoleCreate_req& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_RoleCreate_req* internal_default_instance() {
    return reinterpret_cast<const User_RoleCreate_req*>(
               &_User_RoleCreate_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(User_RoleCreate_req& a, User_RoleCreate_req& b) {
    a.Swap(&b);
  }
  inline void Swap(User_RoleCreate_req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_RoleCreate_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_RoleCreate_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_RoleCreate_req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const User_RoleCreate_req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const User_RoleCreate_req& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User_RoleCreate_req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.User_RoleCreate_req";
  }
  protected:
  explicit User_RoleCreate_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 1,
  };
  // string nickname = 1;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // @@protoc_insertion_point(class_scope:PRO.User_RoleCreate_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5flogin_2eproto;
};
// -------------------------------------------------------------------

class User_RoleCreate_ack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.User_RoleCreate_ack) */ {
 public:
  inline User_RoleCreate_ack() : User_RoleCreate_ack(nullptr) {}
  ~User_RoleCreate_ack() override;
  explicit constexpr User_RoleCreate_ack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User_RoleCreate_ack(const User_RoleCreate_ack& from);
  User_RoleCreate_ack(User_RoleCreate_ack&& from) noexcept
    : User_RoleCreate_ack() {
    *this = ::std::move(from);
  }

  inline User_RoleCreate_ack& operator=(const User_RoleCreate_ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_RoleCreate_ack& operator=(User_RoleCreate_ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_RoleCreate_ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_RoleCreate_ack* internal_default_instance() {
    return reinterpret_cast<const User_RoleCreate_ack*>(
               &_User_RoleCreate_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(User_RoleCreate_ack& a, User_RoleCreate_ack& b) {
    a.Swap(&b);
  }
  inline void Swap(User_RoleCreate_ack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_RoleCreate_ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_RoleCreate_ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_RoleCreate_ack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const User_RoleCreate_ack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const User_RoleCreate_ack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User_RoleCreate_ack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.User_RoleCreate_ack";
  }
  protected:
  explicit User_RoleCreate_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIidFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // optional int64 role_iid = 2;
  bool has_role_iid() const;
  private:
  bool _internal_has_role_iid() const;
  public:
  void clear_role_iid();
  int64_t role_iid() const;
  void set_role_iid(int64_t value);
  private:
  int64_t _internal_role_iid() const;
  void _internal_set_role_iid(int64_t value);
  public:

  // int32 result = 1;
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.User_RoleCreate_ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t role_iid_;
  int32_t result_;
  friend struct ::TableStruct_user_5flogin_2eproto;
};
// -------------------------------------------------------------------

class User_RoleSelect_req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.User_RoleSelect_req) */ {
 public:
  inline User_RoleSelect_req() : User_RoleSelect_req(nullptr) {}
  ~User_RoleSelect_req() override;
  explicit constexpr User_RoleSelect_req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User_RoleSelect_req(const User_RoleSelect_req& from);
  User_RoleSelect_req(User_RoleSelect_req&& from) noexcept
    : User_RoleSelect_req() {
    *this = ::std::move(from);
  }

  inline User_RoleSelect_req& operator=(const User_RoleSelect_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_RoleSelect_req& operator=(User_RoleSelect_req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_RoleSelect_req& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_RoleSelect_req* internal_default_instance() {
    return reinterpret_cast<const User_RoleSelect_req*>(
               &_User_RoleSelect_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(User_RoleSelect_req& a, User_RoleSelect_req& b) {
    a.Swap(&b);
  }
  inline void Swap(User_RoleSelect_req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_RoleSelect_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_RoleSelect_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_RoleSelect_req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const User_RoleSelect_req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const User_RoleSelect_req& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User_RoleSelect_req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.User_RoleSelect_req";
  }
  protected:
  explicit User_RoleSelect_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIidFieldNumber = 1,
  };
  // int64 role_iid = 1;
  void clear_role_iid();
  int64_t role_iid() const;
  void set_role_iid(int64_t value);
  private:
  int64_t _internal_role_iid() const;
  void _internal_set_role_iid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.User_RoleSelect_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t role_iid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5flogin_2eproto;
};
// -------------------------------------------------------------------

class User_RoleSelect_ack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.User_RoleSelect_ack) */ {
 public:
  inline User_RoleSelect_ack() : User_RoleSelect_ack(nullptr) {}
  ~User_RoleSelect_ack() override;
  explicit constexpr User_RoleSelect_ack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User_RoleSelect_ack(const User_RoleSelect_ack& from);
  User_RoleSelect_ack(User_RoleSelect_ack&& from) noexcept
    : User_RoleSelect_ack() {
    *this = ::std::move(from);
  }

  inline User_RoleSelect_ack& operator=(const User_RoleSelect_ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_RoleSelect_ack& operator=(User_RoleSelect_ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_RoleSelect_ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_RoleSelect_ack* internal_default_instance() {
    return reinterpret_cast<const User_RoleSelect_ack*>(
               &_User_RoleSelect_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(User_RoleSelect_ack& a, User_RoleSelect_ack& b) {
    a.Swap(&b);
  }
  inline void Swap(User_RoleSelect_ack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_RoleSelect_ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_RoleSelect_ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_RoleSelect_ack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const User_RoleSelect_ack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const User_RoleSelect_ack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User_RoleSelect_ack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.User_RoleSelect_ack";
  }
  protected:
  explicit User_RoleSelect_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIidFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // int64 role_iid = 2;
  void clear_role_iid();
  int64_t role_iid() const;
  void set_role_iid(int64_t value);
  private:
  int64_t _internal_role_iid() const;
  void _internal_set_role_iid(int64_t value);
  public:

  // int32 result = 1;
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.User_RoleSelect_ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t role_iid_;
  int32_t result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5flogin_2eproto;
};
// -------------------------------------------------------------------

class User_RoleDetailA_ntf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.User_RoleDetailA_ntf) */ {
 public:
  inline User_RoleDetailA_ntf() : User_RoleDetailA_ntf(nullptr) {}
  ~User_RoleDetailA_ntf() override;
  explicit constexpr User_RoleDetailA_ntf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User_RoleDetailA_ntf(const User_RoleDetailA_ntf& from);
  User_RoleDetailA_ntf(User_RoleDetailA_ntf&& from) noexcept
    : User_RoleDetailA_ntf() {
    *this = ::std::move(from);
  }

  inline User_RoleDetailA_ntf& operator=(const User_RoleDetailA_ntf& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_RoleDetailA_ntf& operator=(User_RoleDetailA_ntf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_RoleDetailA_ntf& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_RoleDetailA_ntf* internal_default_instance() {
    return reinterpret_cast<const User_RoleDetailA_ntf*>(
               &_User_RoleDetailA_ntf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(User_RoleDetailA_ntf& a, User_RoleDetailA_ntf& b) {
    a.Swap(&b);
  }
  inline void Swap(User_RoleDetailA_ntf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_RoleDetailA_ntf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_RoleDetailA_ntf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_RoleDetailA_ntf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const User_RoleDetailA_ntf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const User_RoleDetailA_ntf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User_RoleDetailA_ntf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.User_RoleDetailA_ntf";
  }
  protected:
  explicit User_RoleDetailA_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHomeFieldNumber = 1,
    kHomeitemsFieldNumber = 2,
  };
  // .PRO.DBUserHome home = 1;
  bool has_home() const;
  private:
  bool _internal_has_home() const;
  public:
  void clear_home();
  const ::PRO::DBUserHome& home() const;
  PROTOBUF_NODISCARD ::PRO::DBUserHome* release_home();
  ::PRO::DBUserHome* mutable_home();
  void set_allocated_home(::PRO::DBUserHome* home);
  private:
  const ::PRO::DBUserHome& _internal_home() const;
  ::PRO::DBUserHome* _internal_mutable_home();
  public:
  void unsafe_arena_set_allocated_home(
      ::PRO::DBUserHome* home);
  ::PRO::DBUserHome* unsafe_arena_release_home();

  // .PRO.DBUserHomeStructure homeitems = 2;
  bool has_homeitems() const;
  private:
  bool _internal_has_homeitems() const;
  public:
  void clear_homeitems();
  const ::PRO::DBUserHomeStructure& homeitems() const;
  PROTOBUF_NODISCARD ::PRO::DBUserHomeStructure* release_homeitems();
  ::PRO::DBUserHomeStructure* mutable_homeitems();
  void set_allocated_homeitems(::PRO::DBUserHomeStructure* homeitems);
  private:
  const ::PRO::DBUserHomeStructure& _internal_homeitems() const;
  ::PRO::DBUserHomeStructure* _internal_mutable_homeitems();
  public:
  void unsafe_arena_set_allocated_homeitems(
      ::PRO::DBUserHomeStructure* homeitems);
  ::PRO::DBUserHomeStructure* unsafe_arena_release_homeitems();

  // @@protoc_insertion_point(class_scope:PRO.User_RoleDetailA_ntf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PRO::DBUserHome* home_;
  ::PRO::DBUserHomeStructure* homeitems_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5flogin_2eproto;
};
// -------------------------------------------------------------------

class User_RoleDetailB_ntf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.User_RoleDetailB_ntf) */ {
 public:
  inline User_RoleDetailB_ntf() : User_RoleDetailB_ntf(nullptr) {}
  ~User_RoleDetailB_ntf() override;
  explicit constexpr User_RoleDetailB_ntf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User_RoleDetailB_ntf(const User_RoleDetailB_ntf& from);
  User_RoleDetailB_ntf(User_RoleDetailB_ntf&& from) noexcept
    : User_RoleDetailB_ntf() {
    *this = ::std::move(from);
  }

  inline User_RoleDetailB_ntf& operator=(const User_RoleDetailB_ntf& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_RoleDetailB_ntf& operator=(User_RoleDetailB_ntf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_RoleDetailB_ntf& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_RoleDetailB_ntf* internal_default_instance() {
    return reinterpret_cast<const User_RoleDetailB_ntf*>(
               &_User_RoleDetailB_ntf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(User_RoleDetailB_ntf& a, User_RoleDetailB_ntf& b) {
    a.Swap(&b);
  }
  inline void Swap(User_RoleDetailB_ntf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_RoleDetailB_ntf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_RoleDetailB_ntf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_RoleDetailB_ntf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const User_RoleDetailB_ntf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const User_RoleDetailB_ntf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User_RoleDetailB_ntf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.User_RoleDetailB_ntf";
  }
  protected:
  explicit User_RoleDetailB_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPetsFieldNumber = 1,
  };
  // .PRO.DBUserPets pets = 1;
  bool has_pets() const;
  private:
  bool _internal_has_pets() const;
  public:
  void clear_pets();
  const ::PRO::DBUserPets& pets() const;
  PROTOBUF_NODISCARD ::PRO::DBUserPets* release_pets();
  ::PRO::DBUserPets* mutable_pets();
  void set_allocated_pets(::PRO::DBUserPets* pets);
  private:
  const ::PRO::DBUserPets& _internal_pets() const;
  ::PRO::DBUserPets* _internal_mutable_pets();
  public:
  void unsafe_arena_set_allocated_pets(
      ::PRO::DBUserPets* pets);
  ::PRO::DBUserPets* unsafe_arena_release_pets();

  // @@protoc_insertion_point(class_scope:PRO.User_RoleDetailB_ntf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PRO::DBUserPets* pets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5flogin_2eproto;
};
// -------------------------------------------------------------------

class User_RoleDetailEnd_ntf final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:PRO.User_RoleDetailEnd_ntf) */ {
 public:
  inline User_RoleDetailEnd_ntf() : User_RoleDetailEnd_ntf(nullptr) {}
  explicit constexpr User_RoleDetailEnd_ntf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User_RoleDetailEnd_ntf(const User_RoleDetailEnd_ntf& from);
  User_RoleDetailEnd_ntf(User_RoleDetailEnd_ntf&& from) noexcept
    : User_RoleDetailEnd_ntf() {
    *this = ::std::move(from);
  }

  inline User_RoleDetailEnd_ntf& operator=(const User_RoleDetailEnd_ntf& from) {
    CopyFrom(from);
    return *this;
  }
  inline User_RoleDetailEnd_ntf& operator=(User_RoleDetailEnd_ntf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User_RoleDetailEnd_ntf& default_instance() {
    return *internal_default_instance();
  }
  static inline const User_RoleDetailEnd_ntf* internal_default_instance() {
    return reinterpret_cast<const User_RoleDetailEnd_ntf*>(
               &_User_RoleDetailEnd_ntf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(User_RoleDetailEnd_ntf& a, User_RoleDetailEnd_ntf& b) {
    a.Swap(&b);
  }
  inline void Swap(User_RoleDetailEnd_ntf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User_RoleDetailEnd_ntf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User_RoleDetailEnd_ntf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User_RoleDetailEnd_ntf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const User_RoleDetailEnd_ntf& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const User_RoleDetailEnd_ntf& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.User_RoleDetailEnd_ntf";
  }
  protected:
  explicit User_RoleDetailEnd_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PRO.User_RoleDetailEnd_ntf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5flogin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// User_Login_req

// int32 type = 1;
inline void User_Login_req::clear_type() {
  type_ = 0;
}
inline int32_t User_Login_req::_internal_type() const {
  return type_;
}
inline int32_t User_Login_req::type() const {
  // @@protoc_insertion_point(field_get:PRO.User_Login_req.type)
  return _internal_type();
}
inline void User_Login_req::_internal_set_type(int32_t value) {
  
  type_ = value;
}
inline void User_Login_req::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PRO.User_Login_req.type)
}

// optional string account = 2;
inline bool User_Login_req::_internal_has_account() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool User_Login_req::has_account() const {
  return _internal_has_account();
}
inline void User_Login_req::clear_account() {
  account_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& User_Login_req::account() const {
  // @@protoc_insertion_point(field_get:PRO.User_Login_req.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User_Login_req::set_account(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.User_Login_req.account)
}
inline std::string* User_Login_req::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:PRO.User_Login_req.account)
  return _s;
}
inline const std::string& User_Login_req::_internal_account() const {
  return account_.Get();
}
inline void User_Login_req::_internal_set_account(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* User_Login_req::_internal_mutable_account() {
  _has_bits_[0] |= 0x00000001u;
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* User_Login_req::release_account() {
  // @@protoc_insertion_point(field_release:PRO.User_Login_req.account)
  if (!_internal_has_account()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = account_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void User_Login_req::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.User_Login_req.account)
}

// optional string pwd = 3;
inline bool User_Login_req::_internal_has_pwd() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool User_Login_req::has_pwd() const {
  return _internal_has_pwd();
}
inline void User_Login_req::clear_pwd() {
  pwd_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& User_Login_req::pwd() const {
  // @@protoc_insertion_point(field_get:PRO.User_Login_req.pwd)
  return _internal_pwd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User_Login_req::set_pwd(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.User_Login_req.pwd)
}
inline std::string* User_Login_req::mutable_pwd() {
  std::string* _s = _internal_mutable_pwd();
  // @@protoc_insertion_point(field_mutable:PRO.User_Login_req.pwd)
  return _s;
}
inline const std::string& User_Login_req::_internal_pwd() const {
  return pwd_.Get();
}
inline void User_Login_req::_internal_set_pwd(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* User_Login_req::_internal_mutable_pwd() {
  _has_bits_[0] |= 0x00000002u;
  return pwd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* User_Login_req::release_pwd() {
  // @@protoc_insertion_point(field_release:PRO.User_Login_req.pwd)
  if (!_internal_has_pwd()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = pwd_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pwd_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    pwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void User_Login_req::set_allocated_pwd(std::string* pwd) {
  if (pwd != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pwd,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pwd_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    pwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.User_Login_req.pwd)
}

// optional string token = 4;
inline bool User_Login_req::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool User_Login_req::has_token() const {
  return _internal_has_token();
}
inline void User_Login_req::clear_token() {
  token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& User_Login_req::token() const {
  // @@protoc_insertion_point(field_get:PRO.User_Login_req.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User_Login_req::set_token(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.User_Login_req.token)
}
inline std::string* User_Login_req::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:PRO.User_Login_req.token)
  return _s;
}
inline const std::string& User_Login_req::_internal_token() const {
  return token_.Get();
}
inline void User_Login_req::_internal_set_token(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* User_Login_req::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000004u;
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* User_Login_req::release_token() {
  // @@protoc_insertion_point(field_release:PRO.User_Login_req.token)
  if (!_internal_has_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void User_Login_req::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.User_Login_req.token)
}

// optional int64 userid = 5;
inline bool User_Login_req::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool User_Login_req::has_userid() const {
  return _internal_has_userid();
}
inline void User_Login_req::clear_userid() {
  userid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t User_Login_req::_internal_userid() const {
  return userid_;
}
inline int64_t User_Login_req::userid() const {
  // @@protoc_insertion_point(field_get:PRO.User_Login_req.userid)
  return _internal_userid();
}
inline void User_Login_req::_internal_set_userid(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  userid_ = value;
}
inline void User_Login_req::set_userid(int64_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:PRO.User_Login_req.userid)
}

// -------------------------------------------------------------------

// User_Login_ack

// int32 type = 1;
inline void User_Login_ack::clear_type() {
  type_ = 0;
}
inline int32_t User_Login_ack::_internal_type() const {
  return type_;
}
inline int32_t User_Login_ack::type() const {
  // @@protoc_insertion_point(field_get:PRO.User_Login_ack.type)
  return _internal_type();
}
inline void User_Login_ack::_internal_set_type(int32_t value) {
  
  type_ = value;
}
inline void User_Login_ack::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PRO.User_Login_ack.type)
}

// int32 result = 2;
inline void User_Login_ack::clear_result() {
  result_ = 0;
}
inline int32_t User_Login_ack::_internal_result() const {
  return result_;
}
inline int32_t User_Login_ack::result() const {
  // @@protoc_insertion_point(field_get:PRO.User_Login_ack.result)
  return _internal_result();
}
inline void User_Login_ack::_internal_set_result(int32_t value) {
  
  result_ = value;
}
inline void User_Login_ack::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:PRO.User_Login_ack.result)
}

// optional int64 user_iid = 3;
inline bool User_Login_ack::_internal_has_user_iid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool User_Login_ack::has_user_iid() const {
  return _internal_has_user_iid();
}
inline void User_Login_ack::clear_user_iid() {
  user_iid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t User_Login_ack::_internal_user_iid() const {
  return user_iid_;
}
inline int64_t User_Login_ack::user_iid() const {
  // @@protoc_insertion_point(field_get:PRO.User_Login_ack.user_iid)
  return _internal_user_iid();
}
inline void User_Login_ack::_internal_set_user_iid(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  user_iid_ = value;
}
inline void User_Login_ack::set_user_iid(int64_t value) {
  _internal_set_user_iid(value);
  // @@protoc_insertion_point(field_set:PRO.User_Login_ack.user_iid)
}

// optional string logintoken = 4;
inline bool User_Login_ack::_internal_has_logintoken() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool User_Login_ack::has_logintoken() const {
  return _internal_has_logintoken();
}
inline void User_Login_ack::clear_logintoken() {
  logintoken_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& User_Login_ack::logintoken() const {
  // @@protoc_insertion_point(field_get:PRO.User_Login_ack.logintoken)
  return _internal_logintoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User_Login_ack::set_logintoken(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 logintoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.User_Login_ack.logintoken)
}
inline std::string* User_Login_ack::mutable_logintoken() {
  std::string* _s = _internal_mutable_logintoken();
  // @@protoc_insertion_point(field_mutable:PRO.User_Login_ack.logintoken)
  return _s;
}
inline const std::string& User_Login_ack::_internal_logintoken() const {
  return logintoken_.Get();
}
inline void User_Login_ack::_internal_set_logintoken(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  logintoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* User_Login_ack::_internal_mutable_logintoken() {
  _has_bits_[0] |= 0x00000001u;
  return logintoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* User_Login_ack::release_logintoken() {
  // @@protoc_insertion_point(field_release:PRO.User_Login_ack.logintoken)
  if (!_internal_has_logintoken()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = logintoken_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (logintoken_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    logintoken_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void User_Login_ack::set_allocated_logintoken(std::string* logintoken) {
  if (logintoken != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  logintoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logintoken,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (logintoken_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    logintoken_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.User_Login_ack.logintoken)
}

// -------------------------------------------------------------------

// User_ReLogin_req

// int64 user_iid = 1;
inline void User_ReLogin_req::clear_user_iid() {
  user_iid_ = int64_t{0};
}
inline int64_t User_ReLogin_req::_internal_user_iid() const {
  return user_iid_;
}
inline int64_t User_ReLogin_req::user_iid() const {
  // @@protoc_insertion_point(field_get:PRO.User_ReLogin_req.user_iid)
  return _internal_user_iid();
}
inline void User_ReLogin_req::_internal_set_user_iid(int64_t value) {
  
  user_iid_ = value;
}
inline void User_ReLogin_req::set_user_iid(int64_t value) {
  _internal_set_user_iid(value);
  // @@protoc_insertion_point(field_set:PRO.User_ReLogin_req.user_iid)
}

// int64 logintoken = 2;
inline void User_ReLogin_req::clear_logintoken() {
  logintoken_ = int64_t{0};
}
inline int64_t User_ReLogin_req::_internal_logintoken() const {
  return logintoken_;
}
inline int64_t User_ReLogin_req::logintoken() const {
  // @@protoc_insertion_point(field_get:PRO.User_ReLogin_req.logintoken)
  return _internal_logintoken();
}
inline void User_ReLogin_req::_internal_set_logintoken(int64_t value) {
  
  logintoken_ = value;
}
inline void User_ReLogin_req::set_logintoken(int64_t value) {
  _internal_set_logintoken(value);
  // @@protoc_insertion_point(field_set:PRO.User_ReLogin_req.logintoken)
}

// -------------------------------------------------------------------

// User_ReLogin_ack

// int32 result = 1;
inline void User_ReLogin_ack::clear_result() {
  result_ = 0;
}
inline int32_t User_ReLogin_ack::_internal_result() const {
  return result_;
}
inline int32_t User_ReLogin_ack::result() const {
  // @@protoc_insertion_point(field_get:PRO.User_ReLogin_ack.result)
  return _internal_result();
}
inline void User_ReLogin_ack::_internal_set_result(int32_t value) {
  
  result_ = value;
}
inline void User_ReLogin_ack::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:PRO.User_ReLogin_ack.result)
}

// optional int64 user_iid = 2;
inline bool User_ReLogin_ack::_internal_has_user_iid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool User_ReLogin_ack::has_user_iid() const {
  return _internal_has_user_iid();
}
inline void User_ReLogin_ack::clear_user_iid() {
  user_iid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t User_ReLogin_ack::_internal_user_iid() const {
  return user_iid_;
}
inline int64_t User_ReLogin_ack::user_iid() const {
  // @@protoc_insertion_point(field_get:PRO.User_ReLogin_ack.user_iid)
  return _internal_user_iid();
}
inline void User_ReLogin_ack::_internal_set_user_iid(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  user_iid_ = value;
}
inline void User_ReLogin_ack::set_user_iid(int64_t value) {
  _internal_set_user_iid(value);
  // @@protoc_insertion_point(field_set:PRO.User_ReLogin_ack.user_iid)
}

// optional int64 logintoken = 3;
inline bool User_ReLogin_ack::_internal_has_logintoken() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool User_ReLogin_ack::has_logintoken() const {
  return _internal_has_logintoken();
}
inline void User_ReLogin_ack::clear_logintoken() {
  logintoken_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t User_ReLogin_ack::_internal_logintoken() const {
  return logintoken_;
}
inline int64_t User_ReLogin_ack::logintoken() const {
  // @@protoc_insertion_point(field_get:PRO.User_ReLogin_ack.logintoken)
  return _internal_logintoken();
}
inline void User_ReLogin_ack::_internal_set_logintoken(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  logintoken_ = value;
}
inline void User_ReLogin_ack::set_logintoken(int64_t value) {
  _internal_set_logintoken(value);
  // @@protoc_insertion_point(field_set:PRO.User_ReLogin_ack.logintoken)
}

// -------------------------------------------------------------------

// User_Logout_ntf

// -------------------------------------------------------------------

// User_GateLost_ntf

// -------------------------------------------------------------------

// User_Active_ntf

// -------------------------------------------------------------------

// User_RoleList_req

// -------------------------------------------------------------------

// User_RoleList_ack

// .PRO.DBUserRoles roles = 1;
inline bool User_RoleList_ack::_internal_has_roles() const {
  return this != internal_default_instance() && roles_ != nullptr;
}
inline bool User_RoleList_ack::has_roles() const {
  return _internal_has_roles();
}
inline const ::PRO::DBUserRoles& User_RoleList_ack::_internal_roles() const {
  const ::PRO::DBUserRoles* p = roles_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::DBUserRoles&>(
      ::PRO::_DBUserRoles_default_instance_);
}
inline const ::PRO::DBUserRoles& User_RoleList_ack::roles() const {
  // @@protoc_insertion_point(field_get:PRO.User_RoleList_ack.roles)
  return _internal_roles();
}
inline void User_RoleList_ack::unsafe_arena_set_allocated_roles(
    ::PRO::DBUserRoles* roles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roles_);
  }
  roles_ = roles;
  if (roles) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.User_RoleList_ack.roles)
}
inline ::PRO::DBUserRoles* User_RoleList_ack::release_roles() {
  
  ::PRO::DBUserRoles* temp = roles_;
  roles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::DBUserRoles* User_RoleList_ack::unsafe_arena_release_roles() {
  // @@protoc_insertion_point(field_release:PRO.User_RoleList_ack.roles)
  
  ::PRO::DBUserRoles* temp = roles_;
  roles_ = nullptr;
  return temp;
}
inline ::PRO::DBUserRoles* User_RoleList_ack::_internal_mutable_roles() {
  
  if (roles_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::DBUserRoles>(GetArenaForAllocation());
    roles_ = p;
  }
  return roles_;
}
inline ::PRO::DBUserRoles* User_RoleList_ack::mutable_roles() {
  ::PRO::DBUserRoles* _msg = _internal_mutable_roles();
  // @@protoc_insertion_point(field_mutable:PRO.User_RoleList_ack.roles)
  return _msg;
}
inline void User_RoleList_ack::set_allocated_roles(::PRO::DBUserRoles* roles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(roles_);
  }
  if (roles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roles));
    if (message_arena != submessage_arena) {
      roles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roles, submessage_arena);
    }
    
  } else {
    
  }
  roles_ = roles;
  // @@protoc_insertion_point(field_set_allocated:PRO.User_RoleList_ack.roles)
}

// -------------------------------------------------------------------

// User_RoleCreate_req

// string nickname = 1;
inline void User_RoleCreate_req::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& User_RoleCreate_req::nickname() const {
  // @@protoc_insertion_point(field_get:PRO.User_RoleCreate_req.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User_RoleCreate_req::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.User_RoleCreate_req.nickname)
}
inline std::string* User_RoleCreate_req::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:PRO.User_RoleCreate_req.nickname)
  return _s;
}
inline const std::string& User_RoleCreate_req::_internal_nickname() const {
  return nickname_.Get();
}
inline void User_RoleCreate_req::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* User_RoleCreate_req::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* User_RoleCreate_req::release_nickname() {
  // @@protoc_insertion_point(field_release:PRO.User_RoleCreate_req.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void User_RoleCreate_req::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nickname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.User_RoleCreate_req.nickname)
}

// -------------------------------------------------------------------

// User_RoleCreate_ack

// int32 result = 1;
inline void User_RoleCreate_ack::clear_result() {
  result_ = 0;
}
inline int32_t User_RoleCreate_ack::_internal_result() const {
  return result_;
}
inline int32_t User_RoleCreate_ack::result() const {
  // @@protoc_insertion_point(field_get:PRO.User_RoleCreate_ack.result)
  return _internal_result();
}
inline void User_RoleCreate_ack::_internal_set_result(int32_t value) {
  
  result_ = value;
}
inline void User_RoleCreate_ack::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:PRO.User_RoleCreate_ack.result)
}

// optional int64 role_iid = 2;
inline bool User_RoleCreate_ack::_internal_has_role_iid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool User_RoleCreate_ack::has_role_iid() const {
  return _internal_has_role_iid();
}
inline void User_RoleCreate_ack::clear_role_iid() {
  role_iid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t User_RoleCreate_ack::_internal_role_iid() const {
  return role_iid_;
}
inline int64_t User_RoleCreate_ack::role_iid() const {
  // @@protoc_insertion_point(field_get:PRO.User_RoleCreate_ack.role_iid)
  return _internal_role_iid();
}
inline void User_RoleCreate_ack::_internal_set_role_iid(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  role_iid_ = value;
}
inline void User_RoleCreate_ack::set_role_iid(int64_t value) {
  _internal_set_role_iid(value);
  // @@protoc_insertion_point(field_set:PRO.User_RoleCreate_ack.role_iid)
}

// -------------------------------------------------------------------

// User_RoleSelect_req

// int64 role_iid = 1;
inline void User_RoleSelect_req::clear_role_iid() {
  role_iid_ = int64_t{0};
}
inline int64_t User_RoleSelect_req::_internal_role_iid() const {
  return role_iid_;
}
inline int64_t User_RoleSelect_req::role_iid() const {
  // @@protoc_insertion_point(field_get:PRO.User_RoleSelect_req.role_iid)
  return _internal_role_iid();
}
inline void User_RoleSelect_req::_internal_set_role_iid(int64_t value) {
  
  role_iid_ = value;
}
inline void User_RoleSelect_req::set_role_iid(int64_t value) {
  _internal_set_role_iid(value);
  // @@protoc_insertion_point(field_set:PRO.User_RoleSelect_req.role_iid)
}

// -------------------------------------------------------------------

// User_RoleSelect_ack

// int32 result = 1;
inline void User_RoleSelect_ack::clear_result() {
  result_ = 0;
}
inline int32_t User_RoleSelect_ack::_internal_result() const {
  return result_;
}
inline int32_t User_RoleSelect_ack::result() const {
  // @@protoc_insertion_point(field_get:PRO.User_RoleSelect_ack.result)
  return _internal_result();
}
inline void User_RoleSelect_ack::_internal_set_result(int32_t value) {
  
  result_ = value;
}
inline void User_RoleSelect_ack::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:PRO.User_RoleSelect_ack.result)
}

// int64 role_iid = 2;
inline void User_RoleSelect_ack::clear_role_iid() {
  role_iid_ = int64_t{0};
}
inline int64_t User_RoleSelect_ack::_internal_role_iid() const {
  return role_iid_;
}
inline int64_t User_RoleSelect_ack::role_iid() const {
  // @@protoc_insertion_point(field_get:PRO.User_RoleSelect_ack.role_iid)
  return _internal_role_iid();
}
inline void User_RoleSelect_ack::_internal_set_role_iid(int64_t value) {
  
  role_iid_ = value;
}
inline void User_RoleSelect_ack::set_role_iid(int64_t value) {
  _internal_set_role_iid(value);
  // @@protoc_insertion_point(field_set:PRO.User_RoleSelect_ack.role_iid)
}

// -------------------------------------------------------------------

// User_RoleDetailA_ntf

// .PRO.DBUserHome home = 1;
inline bool User_RoleDetailA_ntf::_internal_has_home() const {
  return this != internal_default_instance() && home_ != nullptr;
}
inline bool User_RoleDetailA_ntf::has_home() const {
  return _internal_has_home();
}
inline const ::PRO::DBUserHome& User_RoleDetailA_ntf::_internal_home() const {
  const ::PRO::DBUserHome* p = home_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::DBUserHome&>(
      ::PRO::_DBUserHome_default_instance_);
}
inline const ::PRO::DBUserHome& User_RoleDetailA_ntf::home() const {
  // @@protoc_insertion_point(field_get:PRO.User_RoleDetailA_ntf.home)
  return _internal_home();
}
inline void User_RoleDetailA_ntf::unsafe_arena_set_allocated_home(
    ::PRO::DBUserHome* home) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(home_);
  }
  home_ = home;
  if (home) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.User_RoleDetailA_ntf.home)
}
inline ::PRO::DBUserHome* User_RoleDetailA_ntf::release_home() {
  
  ::PRO::DBUserHome* temp = home_;
  home_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::DBUserHome* User_RoleDetailA_ntf::unsafe_arena_release_home() {
  // @@protoc_insertion_point(field_release:PRO.User_RoleDetailA_ntf.home)
  
  ::PRO::DBUserHome* temp = home_;
  home_ = nullptr;
  return temp;
}
inline ::PRO::DBUserHome* User_RoleDetailA_ntf::_internal_mutable_home() {
  
  if (home_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::DBUserHome>(GetArenaForAllocation());
    home_ = p;
  }
  return home_;
}
inline ::PRO::DBUserHome* User_RoleDetailA_ntf::mutable_home() {
  ::PRO::DBUserHome* _msg = _internal_mutable_home();
  // @@protoc_insertion_point(field_mutable:PRO.User_RoleDetailA_ntf.home)
  return _msg;
}
inline void User_RoleDetailA_ntf::set_allocated_home(::PRO::DBUserHome* home) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(home_);
  }
  if (home) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(home));
    if (message_arena != submessage_arena) {
      home = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, home, submessage_arena);
    }
    
  } else {
    
  }
  home_ = home;
  // @@protoc_insertion_point(field_set_allocated:PRO.User_RoleDetailA_ntf.home)
}

// .PRO.DBUserHomeStructure homeitems = 2;
inline bool User_RoleDetailA_ntf::_internal_has_homeitems() const {
  return this != internal_default_instance() && homeitems_ != nullptr;
}
inline bool User_RoleDetailA_ntf::has_homeitems() const {
  return _internal_has_homeitems();
}
inline const ::PRO::DBUserHomeStructure& User_RoleDetailA_ntf::_internal_homeitems() const {
  const ::PRO::DBUserHomeStructure* p = homeitems_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::DBUserHomeStructure&>(
      ::PRO::_DBUserHomeStructure_default_instance_);
}
inline const ::PRO::DBUserHomeStructure& User_RoleDetailA_ntf::homeitems() const {
  // @@protoc_insertion_point(field_get:PRO.User_RoleDetailA_ntf.homeitems)
  return _internal_homeitems();
}
inline void User_RoleDetailA_ntf::unsafe_arena_set_allocated_homeitems(
    ::PRO::DBUserHomeStructure* homeitems) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(homeitems_);
  }
  homeitems_ = homeitems;
  if (homeitems) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.User_RoleDetailA_ntf.homeitems)
}
inline ::PRO::DBUserHomeStructure* User_RoleDetailA_ntf::release_homeitems() {
  
  ::PRO::DBUserHomeStructure* temp = homeitems_;
  homeitems_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::DBUserHomeStructure* User_RoleDetailA_ntf::unsafe_arena_release_homeitems() {
  // @@protoc_insertion_point(field_release:PRO.User_RoleDetailA_ntf.homeitems)
  
  ::PRO::DBUserHomeStructure* temp = homeitems_;
  homeitems_ = nullptr;
  return temp;
}
inline ::PRO::DBUserHomeStructure* User_RoleDetailA_ntf::_internal_mutable_homeitems() {
  
  if (homeitems_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::DBUserHomeStructure>(GetArenaForAllocation());
    homeitems_ = p;
  }
  return homeitems_;
}
inline ::PRO::DBUserHomeStructure* User_RoleDetailA_ntf::mutable_homeitems() {
  ::PRO::DBUserHomeStructure* _msg = _internal_mutable_homeitems();
  // @@protoc_insertion_point(field_mutable:PRO.User_RoleDetailA_ntf.homeitems)
  return _msg;
}
inline void User_RoleDetailA_ntf::set_allocated_homeitems(::PRO::DBUserHomeStructure* homeitems) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(homeitems_);
  }
  if (homeitems) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(homeitems));
    if (message_arena != submessage_arena) {
      homeitems = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, homeitems, submessage_arena);
    }
    
  } else {
    
  }
  homeitems_ = homeitems;
  // @@protoc_insertion_point(field_set_allocated:PRO.User_RoleDetailA_ntf.homeitems)
}

// -------------------------------------------------------------------

// User_RoleDetailB_ntf

// .PRO.DBUserPets pets = 1;
inline bool User_RoleDetailB_ntf::_internal_has_pets() const {
  return this != internal_default_instance() && pets_ != nullptr;
}
inline bool User_RoleDetailB_ntf::has_pets() const {
  return _internal_has_pets();
}
inline const ::PRO::DBUserPets& User_RoleDetailB_ntf::_internal_pets() const {
  const ::PRO::DBUserPets* p = pets_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::DBUserPets&>(
      ::PRO::_DBUserPets_default_instance_);
}
inline const ::PRO::DBUserPets& User_RoleDetailB_ntf::pets() const {
  // @@protoc_insertion_point(field_get:PRO.User_RoleDetailB_ntf.pets)
  return _internal_pets();
}
inline void User_RoleDetailB_ntf::unsafe_arena_set_allocated_pets(
    ::PRO::DBUserPets* pets) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pets_);
  }
  pets_ = pets;
  if (pets) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.User_RoleDetailB_ntf.pets)
}
inline ::PRO::DBUserPets* User_RoleDetailB_ntf::release_pets() {
  
  ::PRO::DBUserPets* temp = pets_;
  pets_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::DBUserPets* User_RoleDetailB_ntf::unsafe_arena_release_pets() {
  // @@protoc_insertion_point(field_release:PRO.User_RoleDetailB_ntf.pets)
  
  ::PRO::DBUserPets* temp = pets_;
  pets_ = nullptr;
  return temp;
}
inline ::PRO::DBUserPets* User_RoleDetailB_ntf::_internal_mutable_pets() {
  
  if (pets_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::DBUserPets>(GetArenaForAllocation());
    pets_ = p;
  }
  return pets_;
}
inline ::PRO::DBUserPets* User_RoleDetailB_ntf::mutable_pets() {
  ::PRO::DBUserPets* _msg = _internal_mutable_pets();
  // @@protoc_insertion_point(field_mutable:PRO.User_RoleDetailB_ntf.pets)
  return _msg;
}
inline void User_RoleDetailB_ntf::set_allocated_pets(::PRO::DBUserPets* pets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pets_);
  }
  if (pets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pets));
    if (message_arena != submessage_arena) {
      pets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pets, submessage_arena);
    }
    
  } else {
    
  }
  pets_ = pets;
  // @@protoc_insertion_point(field_set_allocated:PRO.User_RoleDetailB_ntf.pets)
}

// -------------------------------------------------------------------

// User_RoleDetailEnd_ntf

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PRO

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_user_5flogin_2eproto

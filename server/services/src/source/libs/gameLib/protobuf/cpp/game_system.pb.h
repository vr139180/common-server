// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_system.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_game_5fsystem_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_game_5fsystem_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_game_5fsystem_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_game_5fsystem_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_5fsystem_2eproto;
namespace PRO {
class GameUserInfo;
struct GameUserInfoDefaultTypeInternal;
extern GameUserInfoDefaultTypeInternal _GameUserInfo_default_instance_;
class Game_EnterGame_ack;
struct Game_EnterGame_ackDefaultTypeInternal;
extern Game_EnterGame_ackDefaultTypeInternal _Game_EnterGame_ack_default_instance_;
class Game_EnterGame_req;
struct Game_EnterGame_reqDefaultTypeInternal;
extern Game_EnterGame_reqDefaultTypeInternal _Game_EnterGame_req_default_instance_;
class Game_ServiceDisable_ntf;
struct Game_ServiceDisable_ntfDefaultTypeInternal;
extern Game_ServiceDisable_ntfDefaultTypeInternal _Game_ServiceDisable_ntf_default_instance_;
class Game_UserState_sync;
struct Game_UserState_syncDefaultTypeInternal;
extern Game_UserState_syncDefaultTypeInternal _Game_UserState_sync_default_instance_;
class Game_UsersVisiable_ntf;
struct Game_UsersVisiable_ntfDefaultTypeInternal;
extern Game_UsersVisiable_ntfDefaultTypeInternal _Game_UsersVisiable_ntf_default_instance_;
class Vector3d;
struct Vector3dDefaultTypeInternal;
extern Vector3dDefaultTypeInternal _Vector3d_default_instance_;
}  // namespace PRO
PROTOBUF_NAMESPACE_OPEN
template<> ::PRO::GameUserInfo* Arena::CreateMaybeMessage<::PRO::GameUserInfo>(Arena*);
template<> ::PRO::Game_EnterGame_ack* Arena::CreateMaybeMessage<::PRO::Game_EnterGame_ack>(Arena*);
template<> ::PRO::Game_EnterGame_req* Arena::CreateMaybeMessage<::PRO::Game_EnterGame_req>(Arena*);
template<> ::PRO::Game_ServiceDisable_ntf* Arena::CreateMaybeMessage<::PRO::Game_ServiceDisable_ntf>(Arena*);
template<> ::PRO::Game_UserState_sync* Arena::CreateMaybeMessage<::PRO::Game_UserState_sync>(Arena*);
template<> ::PRO::Game_UsersVisiable_ntf* Arena::CreateMaybeMessage<::PRO::Game_UsersVisiable_ntf>(Arena*);
template<> ::PRO::Vector3d* Arena::CreateMaybeMessage<::PRO::Vector3d>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PRO {

// ===================================================================

class Vector3d final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Vector3d) */ {
 public:
  inline Vector3d() : Vector3d(nullptr) {}
  ~Vector3d() override;
  explicit constexpr Vector3d(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3d(const Vector3d& from);
  Vector3d(Vector3d&& from) noexcept
    : Vector3d() {
    *this = ::std::move(from);
  }

  inline Vector3d& operator=(const Vector3d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3d& operator=(Vector3d&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3d& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3d* internal_default_instance() {
    return reinterpret_cast<const Vector3d*>(
               &_Vector3d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector3d& a, Vector3d& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3d* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector3d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector3d>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector3d& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vector3d& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3d* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Vector3d";
  }
  protected:
  explicit Vector3d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.Vector3d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fsystem_2eproto;
};
// -------------------------------------------------------------------

class GameUserInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.GameUserInfo) */ {
 public:
  inline GameUserInfo() : GameUserInfo(nullptr) {}
  ~GameUserInfo() override;
  explicit constexpr GameUserInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameUserInfo(const GameUserInfo& from);
  GameUserInfo(GameUserInfo&& from) noexcept
    : GameUserInfo() {
    *this = ::std::move(from);
  }

  inline GameUserInfo& operator=(const GameUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameUserInfo& operator=(GameUserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameUserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameUserInfo* internal_default_instance() {
    return reinterpret_cast<const GameUserInfo*>(
               &_GameUserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GameUserInfo& a, GameUserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GameUserInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameUserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameUserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameUserInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameUserInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameUserInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameUserInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.GameUserInfo";
  }
  protected:
  explicit GameUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 3,
    kPosFieldNumber = 4,
    kUserIidFieldNumber = 1,
    kRoleIidFieldNumber = 2,
  };
  // string nickname = 3;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // .PRO.Vector3d pos = 4;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::PRO::Vector3d& pos() const;
  PROTOBUF_NODISCARD ::PRO::Vector3d* release_pos();
  ::PRO::Vector3d* mutable_pos();
  void set_allocated_pos(::PRO::Vector3d* pos);
  private:
  const ::PRO::Vector3d& _internal_pos() const;
  ::PRO::Vector3d* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::PRO::Vector3d* pos);
  ::PRO::Vector3d* unsafe_arena_release_pos();

  // int64 user_iid = 1;
  void clear_user_iid();
  int64_t user_iid() const;
  void set_user_iid(int64_t value);
  private:
  int64_t _internal_user_iid() const;
  void _internal_set_user_iid(int64_t value);
  public:

  // int64 role_iid = 2;
  void clear_role_iid();
  int64_t role_iid() const;
  void set_role_iid(int64_t value);
  private:
  int64_t _internal_role_iid() const;
  void _internal_set_role_iid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.GameUserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PRO::Vector3d* pos_;
  int64_t user_iid_;
  int64_t role_iid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fsystem_2eproto;
};
// -------------------------------------------------------------------

class Game_EnterGame_req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Game_EnterGame_req) */ {
 public:
  inline Game_EnterGame_req() : Game_EnterGame_req(nullptr) {}
  ~Game_EnterGame_req() override;
  explicit constexpr Game_EnterGame_req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Game_EnterGame_req(const Game_EnterGame_req& from);
  Game_EnterGame_req(Game_EnterGame_req&& from) noexcept
    : Game_EnterGame_req() {
    *this = ::std::move(from);
  }

  inline Game_EnterGame_req& operator=(const Game_EnterGame_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Game_EnterGame_req& operator=(Game_EnterGame_req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Game_EnterGame_req& default_instance() {
    return *internal_default_instance();
  }
  static inline const Game_EnterGame_req* internal_default_instance() {
    return reinterpret_cast<const Game_EnterGame_req*>(
               &_Game_EnterGame_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Game_EnterGame_req& a, Game_EnterGame_req& b) {
    a.Swap(&b);
  }
  inline void Swap(Game_EnterGame_req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Game_EnterGame_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Game_EnterGame_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Game_EnterGame_req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Game_EnterGame_req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Game_EnterGame_req& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Game_EnterGame_req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Game_EnterGame_req";
  }
  protected:
  explicit Game_EnterGame_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameIidFieldNumber = 1,
  };
  // int64 game_iid = 1;
  void clear_game_iid();
  int64_t game_iid() const;
  void set_game_iid(int64_t value);
  private:
  int64_t _internal_game_iid() const;
  void _internal_set_game_iid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.Game_EnterGame_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t game_iid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fsystem_2eproto;
};
// -------------------------------------------------------------------

class Game_EnterGame_ack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Game_EnterGame_ack) */ {
 public:
  inline Game_EnterGame_ack() : Game_EnterGame_ack(nullptr) {}
  ~Game_EnterGame_ack() override;
  explicit constexpr Game_EnterGame_ack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Game_EnterGame_ack(const Game_EnterGame_ack& from);
  Game_EnterGame_ack(Game_EnterGame_ack&& from) noexcept
    : Game_EnterGame_ack() {
    *this = ::std::move(from);
  }

  inline Game_EnterGame_ack& operator=(const Game_EnterGame_ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Game_EnterGame_ack& operator=(Game_EnterGame_ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Game_EnterGame_ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Game_EnterGame_ack* internal_default_instance() {
    return reinterpret_cast<const Game_EnterGame_ack*>(
               &_Game_EnterGame_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Game_EnterGame_ack& a, Game_EnterGame_ack& b) {
    a.Swap(&b);
  }
  inline void Swap(Game_EnterGame_ack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Game_EnterGame_ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Game_EnterGame_ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Game_EnterGame_ack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Game_EnterGame_ack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Game_EnterGame_ack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Game_EnterGame_ack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Game_EnterGame_ack";
  }
  protected:
  explicit Game_EnterGame_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameIidFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // int64 game_iid = 2;
  void clear_game_iid();
  int64_t game_iid() const;
  void set_game_iid(int64_t value);
  private:
  int64_t _internal_game_iid() const;
  void _internal_set_game_iid(int64_t value);
  public:

  // int32 result = 1;
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.Game_EnterGame_ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t game_iid_;
  int32_t result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fsystem_2eproto;
};
// -------------------------------------------------------------------

class Game_ServiceDisable_ntf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Game_ServiceDisable_ntf) */ {
 public:
  inline Game_ServiceDisable_ntf() : Game_ServiceDisable_ntf(nullptr) {}
  ~Game_ServiceDisable_ntf() override;
  explicit constexpr Game_ServiceDisable_ntf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Game_ServiceDisable_ntf(const Game_ServiceDisable_ntf& from);
  Game_ServiceDisable_ntf(Game_ServiceDisable_ntf&& from) noexcept
    : Game_ServiceDisable_ntf() {
    *this = ::std::move(from);
  }

  inline Game_ServiceDisable_ntf& operator=(const Game_ServiceDisable_ntf& from) {
    CopyFrom(from);
    return *this;
  }
  inline Game_ServiceDisable_ntf& operator=(Game_ServiceDisable_ntf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Game_ServiceDisable_ntf& default_instance() {
    return *internal_default_instance();
  }
  static inline const Game_ServiceDisable_ntf* internal_default_instance() {
    return reinterpret_cast<const Game_ServiceDisable_ntf*>(
               &_Game_ServiceDisable_ntf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Game_ServiceDisable_ntf& a, Game_ServiceDisable_ntf& b) {
    a.Swap(&b);
  }
  inline void Swap(Game_ServiceDisable_ntf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Game_ServiceDisable_ntf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Game_ServiceDisable_ntf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Game_ServiceDisable_ntf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Game_ServiceDisable_ntf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Game_ServiceDisable_ntf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Game_ServiceDisable_ntf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Game_ServiceDisable_ntf";
  }
  protected:
  explicit Game_ServiceDisable_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameIidFieldNumber = 1,
  };
  // int64 game_iid = 1;
  void clear_game_iid();
  int64_t game_iid() const;
  void set_game_iid(int64_t value);
  private:
  int64_t _internal_game_iid() const;
  void _internal_set_game_iid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.Game_ServiceDisable_ntf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t game_iid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fsystem_2eproto;
};
// -------------------------------------------------------------------

class Game_UsersVisiable_ntf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Game_UsersVisiable_ntf) */ {
 public:
  inline Game_UsersVisiable_ntf() : Game_UsersVisiable_ntf(nullptr) {}
  ~Game_UsersVisiable_ntf() override;
  explicit constexpr Game_UsersVisiable_ntf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Game_UsersVisiable_ntf(const Game_UsersVisiable_ntf& from);
  Game_UsersVisiable_ntf(Game_UsersVisiable_ntf&& from) noexcept
    : Game_UsersVisiable_ntf() {
    *this = ::std::move(from);
  }

  inline Game_UsersVisiable_ntf& operator=(const Game_UsersVisiable_ntf& from) {
    CopyFrom(from);
    return *this;
  }
  inline Game_UsersVisiable_ntf& operator=(Game_UsersVisiable_ntf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Game_UsersVisiable_ntf& default_instance() {
    return *internal_default_instance();
  }
  static inline const Game_UsersVisiable_ntf* internal_default_instance() {
    return reinterpret_cast<const Game_UsersVisiable_ntf*>(
               &_Game_UsersVisiable_ntf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Game_UsersVisiable_ntf& a, Game_UsersVisiable_ntf& b) {
    a.Swap(&b);
  }
  inline void Swap(Game_UsersVisiable_ntf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Game_UsersVisiable_ntf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Game_UsersVisiable_ntf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Game_UsersVisiable_ntf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Game_UsersVisiable_ntf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Game_UsersVisiable_ntf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Game_UsersVisiable_ntf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Game_UsersVisiable_ntf";
  }
  protected:
  explicit Game_UsersVisiable_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOnlineUsersFieldNumber = 1,
    kOfflineUsersFieldNumber = 2,
  };
  // repeated .PRO.GameUserInfo online_users = 1;
  int online_users_size() const;
  private:
  int _internal_online_users_size() const;
  public:
  void clear_online_users();
  ::PRO::GameUserInfo* mutable_online_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::GameUserInfo >*
      mutable_online_users();
  private:
  const ::PRO::GameUserInfo& _internal_online_users(int index) const;
  ::PRO::GameUserInfo* _internal_add_online_users();
  public:
  const ::PRO::GameUserInfo& online_users(int index) const;
  ::PRO::GameUserInfo* add_online_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::GameUserInfo >&
      online_users() const;

  // repeated int64 offline_users = 2;
  int offline_users_size() const;
  private:
  int _internal_offline_users_size() const;
  public:
  void clear_offline_users();
  private:
  int64_t _internal_offline_users(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_offline_users() const;
  void _internal_add_offline_users(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_offline_users();
  public:
  int64_t offline_users(int index) const;
  void set_offline_users(int index, int64_t value);
  void add_offline_users(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      offline_users() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_offline_users();

  // @@protoc_insertion_point(class_scope:PRO.Game_UsersVisiable_ntf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::GameUserInfo > online_users_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > offline_users_;
  mutable std::atomic<int> _offline_users_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fsystem_2eproto;
};
// -------------------------------------------------------------------

class Game_UserState_sync final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Game_UserState_sync) */ {
 public:
  inline Game_UserState_sync() : Game_UserState_sync(nullptr) {}
  ~Game_UserState_sync() override;
  explicit constexpr Game_UserState_sync(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Game_UserState_sync(const Game_UserState_sync& from);
  Game_UserState_sync(Game_UserState_sync&& from) noexcept
    : Game_UserState_sync() {
    *this = ::std::move(from);
  }

  inline Game_UserState_sync& operator=(const Game_UserState_sync& from) {
    CopyFrom(from);
    return *this;
  }
  inline Game_UserState_sync& operator=(Game_UserState_sync&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Game_UserState_sync& default_instance() {
    return *internal_default_instance();
  }
  static inline const Game_UserState_sync* internal_default_instance() {
    return reinterpret_cast<const Game_UserState_sync*>(
               &_Game_UserState_sync_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Game_UserState_sync& a, Game_UserState_sync& b) {
    a.Swap(&b);
  }
  inline void Swap(Game_UserState_sync* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Game_UserState_sync* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Game_UserState_sync* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Game_UserState_sync>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Game_UserState_sync& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Game_UserState_sync& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Game_UserState_sync* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Game_UserState_sync";
  }
  protected:
  explicit Game_UserState_sync(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 2,
    kUserIidFieldNumber = 1,
  };
  // .PRO.Vector3d pos = 2;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::PRO::Vector3d& pos() const;
  PROTOBUF_NODISCARD ::PRO::Vector3d* release_pos();
  ::PRO::Vector3d* mutable_pos();
  void set_allocated_pos(::PRO::Vector3d* pos);
  private:
  const ::PRO::Vector3d& _internal_pos() const;
  ::PRO::Vector3d* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::PRO::Vector3d* pos);
  ::PRO::Vector3d* unsafe_arena_release_pos();

  // int64 user_iid = 1;
  void clear_user_iid();
  int64_t user_iid() const;
  void set_user_iid(int64_t value);
  private:
  int64_t _internal_user_iid() const;
  void _internal_set_user_iid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.Game_UserState_sync)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PRO::Vector3d* pos_;
  int64_t user_iid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fsystem_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector3d

// float x = 1;
inline void Vector3d::clear_x() {
  x_ = 0;
}
inline float Vector3d::_internal_x() const {
  return x_;
}
inline float Vector3d::x() const {
  // @@protoc_insertion_point(field_get:PRO.Vector3d.x)
  return _internal_x();
}
inline void Vector3d::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vector3d::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:PRO.Vector3d.x)
}

// float y = 2;
inline void Vector3d::clear_y() {
  y_ = 0;
}
inline float Vector3d::_internal_y() const {
  return y_;
}
inline float Vector3d::y() const {
  // @@protoc_insertion_point(field_get:PRO.Vector3d.y)
  return _internal_y();
}
inline void Vector3d::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vector3d::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:PRO.Vector3d.y)
}

// float z = 3;
inline void Vector3d::clear_z() {
  z_ = 0;
}
inline float Vector3d::_internal_z() const {
  return z_;
}
inline float Vector3d::z() const {
  // @@protoc_insertion_point(field_get:PRO.Vector3d.z)
  return _internal_z();
}
inline void Vector3d::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Vector3d::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:PRO.Vector3d.z)
}

// -------------------------------------------------------------------

// GameUserInfo

// int64 user_iid = 1;
inline void GameUserInfo::clear_user_iid() {
  user_iid_ = int64_t{0};
}
inline int64_t GameUserInfo::_internal_user_iid() const {
  return user_iid_;
}
inline int64_t GameUserInfo::user_iid() const {
  // @@protoc_insertion_point(field_get:PRO.GameUserInfo.user_iid)
  return _internal_user_iid();
}
inline void GameUserInfo::_internal_set_user_iid(int64_t value) {
  
  user_iid_ = value;
}
inline void GameUserInfo::set_user_iid(int64_t value) {
  _internal_set_user_iid(value);
  // @@protoc_insertion_point(field_set:PRO.GameUserInfo.user_iid)
}

// int64 role_iid = 2;
inline void GameUserInfo::clear_role_iid() {
  role_iid_ = int64_t{0};
}
inline int64_t GameUserInfo::_internal_role_iid() const {
  return role_iid_;
}
inline int64_t GameUserInfo::role_iid() const {
  // @@protoc_insertion_point(field_get:PRO.GameUserInfo.role_iid)
  return _internal_role_iid();
}
inline void GameUserInfo::_internal_set_role_iid(int64_t value) {
  
  role_iid_ = value;
}
inline void GameUserInfo::set_role_iid(int64_t value) {
  _internal_set_role_iid(value);
  // @@protoc_insertion_point(field_set:PRO.GameUserInfo.role_iid)
}

// string nickname = 3;
inline void GameUserInfo::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& GameUserInfo::nickname() const {
  // @@protoc_insertion_point(field_get:PRO.GameUserInfo.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameUserInfo::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.GameUserInfo.nickname)
}
inline std::string* GameUserInfo::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:PRO.GameUserInfo.nickname)
  return _s;
}
inline const std::string& GameUserInfo::_internal_nickname() const {
  return nickname_.Get();
}
inline void GameUserInfo::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GameUserInfo::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GameUserInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:PRO.GameUserInfo.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GameUserInfo::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nickname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.GameUserInfo.nickname)
}

// .PRO.Vector3d pos = 4;
inline bool GameUserInfo::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool GameUserInfo::has_pos() const {
  return _internal_has_pos();
}
inline void GameUserInfo::clear_pos() {
  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::PRO::Vector3d& GameUserInfo::_internal_pos() const {
  const ::PRO::Vector3d* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::Vector3d&>(
      ::PRO::_Vector3d_default_instance_);
}
inline const ::PRO::Vector3d& GameUserInfo::pos() const {
  // @@protoc_insertion_point(field_get:PRO.GameUserInfo.pos)
  return _internal_pos();
}
inline void GameUserInfo::unsafe_arena_set_allocated_pos(
    ::PRO::Vector3d* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.GameUserInfo.pos)
}
inline ::PRO::Vector3d* GameUserInfo::release_pos() {
  
  ::PRO::Vector3d* temp = pos_;
  pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::Vector3d* GameUserInfo::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:PRO.GameUserInfo.pos)
  
  ::PRO::Vector3d* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::PRO::Vector3d* GameUserInfo::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::Vector3d>(GetArenaForAllocation());
    pos_ = p;
  }
  return pos_;
}
inline ::PRO::Vector3d* GameUserInfo::mutable_pos() {
  ::PRO::Vector3d* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:PRO.GameUserInfo.pos)
  return _msg;
}
inline void GameUserInfo::set_allocated_pos(::PRO::Vector3d* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PRO::Vector3d>::GetOwningArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:PRO.GameUserInfo.pos)
}

// -------------------------------------------------------------------

// Game_EnterGame_req

// int64 game_iid = 1;
inline void Game_EnterGame_req::clear_game_iid() {
  game_iid_ = int64_t{0};
}
inline int64_t Game_EnterGame_req::_internal_game_iid() const {
  return game_iid_;
}
inline int64_t Game_EnterGame_req::game_iid() const {
  // @@protoc_insertion_point(field_get:PRO.Game_EnterGame_req.game_iid)
  return _internal_game_iid();
}
inline void Game_EnterGame_req::_internal_set_game_iid(int64_t value) {
  
  game_iid_ = value;
}
inline void Game_EnterGame_req::set_game_iid(int64_t value) {
  _internal_set_game_iid(value);
  // @@protoc_insertion_point(field_set:PRO.Game_EnterGame_req.game_iid)
}

// -------------------------------------------------------------------

// Game_EnterGame_ack

// int32 result = 1;
inline void Game_EnterGame_ack::clear_result() {
  result_ = 0;
}
inline int32_t Game_EnterGame_ack::_internal_result() const {
  return result_;
}
inline int32_t Game_EnterGame_ack::result() const {
  // @@protoc_insertion_point(field_get:PRO.Game_EnterGame_ack.result)
  return _internal_result();
}
inline void Game_EnterGame_ack::_internal_set_result(int32_t value) {
  
  result_ = value;
}
inline void Game_EnterGame_ack::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:PRO.Game_EnterGame_ack.result)
}

// int64 game_iid = 2;
inline void Game_EnterGame_ack::clear_game_iid() {
  game_iid_ = int64_t{0};
}
inline int64_t Game_EnterGame_ack::_internal_game_iid() const {
  return game_iid_;
}
inline int64_t Game_EnterGame_ack::game_iid() const {
  // @@protoc_insertion_point(field_get:PRO.Game_EnterGame_ack.game_iid)
  return _internal_game_iid();
}
inline void Game_EnterGame_ack::_internal_set_game_iid(int64_t value) {
  
  game_iid_ = value;
}
inline void Game_EnterGame_ack::set_game_iid(int64_t value) {
  _internal_set_game_iid(value);
  // @@protoc_insertion_point(field_set:PRO.Game_EnterGame_ack.game_iid)
}

// -------------------------------------------------------------------

// Game_ServiceDisable_ntf

// int64 game_iid = 1;
inline void Game_ServiceDisable_ntf::clear_game_iid() {
  game_iid_ = int64_t{0};
}
inline int64_t Game_ServiceDisable_ntf::_internal_game_iid() const {
  return game_iid_;
}
inline int64_t Game_ServiceDisable_ntf::game_iid() const {
  // @@protoc_insertion_point(field_get:PRO.Game_ServiceDisable_ntf.game_iid)
  return _internal_game_iid();
}
inline void Game_ServiceDisable_ntf::_internal_set_game_iid(int64_t value) {
  
  game_iid_ = value;
}
inline void Game_ServiceDisable_ntf::set_game_iid(int64_t value) {
  _internal_set_game_iid(value);
  // @@protoc_insertion_point(field_set:PRO.Game_ServiceDisable_ntf.game_iid)
}

// -------------------------------------------------------------------

// Game_UsersVisiable_ntf

// repeated .PRO.GameUserInfo online_users = 1;
inline int Game_UsersVisiable_ntf::_internal_online_users_size() const {
  return online_users_.size();
}
inline int Game_UsersVisiable_ntf::online_users_size() const {
  return _internal_online_users_size();
}
inline void Game_UsersVisiable_ntf::clear_online_users() {
  online_users_.Clear();
}
inline ::PRO::GameUserInfo* Game_UsersVisiable_ntf::mutable_online_users(int index) {
  // @@protoc_insertion_point(field_mutable:PRO.Game_UsersVisiable_ntf.online_users)
  return online_users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::GameUserInfo >*
Game_UsersVisiable_ntf::mutable_online_users() {
  // @@protoc_insertion_point(field_mutable_list:PRO.Game_UsersVisiable_ntf.online_users)
  return &online_users_;
}
inline const ::PRO::GameUserInfo& Game_UsersVisiable_ntf::_internal_online_users(int index) const {
  return online_users_.Get(index);
}
inline const ::PRO::GameUserInfo& Game_UsersVisiable_ntf::online_users(int index) const {
  // @@protoc_insertion_point(field_get:PRO.Game_UsersVisiable_ntf.online_users)
  return _internal_online_users(index);
}
inline ::PRO::GameUserInfo* Game_UsersVisiable_ntf::_internal_add_online_users() {
  return online_users_.Add();
}
inline ::PRO::GameUserInfo* Game_UsersVisiable_ntf::add_online_users() {
  ::PRO::GameUserInfo* _add = _internal_add_online_users();
  // @@protoc_insertion_point(field_add:PRO.Game_UsersVisiable_ntf.online_users)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::GameUserInfo >&
Game_UsersVisiable_ntf::online_users() const {
  // @@protoc_insertion_point(field_list:PRO.Game_UsersVisiable_ntf.online_users)
  return online_users_;
}

// repeated int64 offline_users = 2;
inline int Game_UsersVisiable_ntf::_internal_offline_users_size() const {
  return offline_users_.size();
}
inline int Game_UsersVisiable_ntf::offline_users_size() const {
  return _internal_offline_users_size();
}
inline void Game_UsersVisiable_ntf::clear_offline_users() {
  offline_users_.Clear();
}
inline int64_t Game_UsersVisiable_ntf::_internal_offline_users(int index) const {
  return offline_users_.Get(index);
}
inline int64_t Game_UsersVisiable_ntf::offline_users(int index) const {
  // @@protoc_insertion_point(field_get:PRO.Game_UsersVisiable_ntf.offline_users)
  return _internal_offline_users(index);
}
inline void Game_UsersVisiable_ntf::set_offline_users(int index, int64_t value) {
  offline_users_.Set(index, value);
  // @@protoc_insertion_point(field_set:PRO.Game_UsersVisiable_ntf.offline_users)
}
inline void Game_UsersVisiable_ntf::_internal_add_offline_users(int64_t value) {
  offline_users_.Add(value);
}
inline void Game_UsersVisiable_ntf::add_offline_users(int64_t value) {
  _internal_add_offline_users(value);
  // @@protoc_insertion_point(field_add:PRO.Game_UsersVisiable_ntf.offline_users)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Game_UsersVisiable_ntf::_internal_offline_users() const {
  return offline_users_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Game_UsersVisiable_ntf::offline_users() const {
  // @@protoc_insertion_point(field_list:PRO.Game_UsersVisiable_ntf.offline_users)
  return _internal_offline_users();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Game_UsersVisiable_ntf::_internal_mutable_offline_users() {
  return &offline_users_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Game_UsersVisiable_ntf::mutable_offline_users() {
  // @@protoc_insertion_point(field_mutable_list:PRO.Game_UsersVisiable_ntf.offline_users)
  return _internal_mutable_offline_users();
}

// -------------------------------------------------------------------

// Game_UserState_sync

// int64 user_iid = 1;
inline void Game_UserState_sync::clear_user_iid() {
  user_iid_ = int64_t{0};
}
inline int64_t Game_UserState_sync::_internal_user_iid() const {
  return user_iid_;
}
inline int64_t Game_UserState_sync::user_iid() const {
  // @@protoc_insertion_point(field_get:PRO.Game_UserState_sync.user_iid)
  return _internal_user_iid();
}
inline void Game_UserState_sync::_internal_set_user_iid(int64_t value) {
  
  user_iid_ = value;
}
inline void Game_UserState_sync::set_user_iid(int64_t value) {
  _internal_set_user_iid(value);
  // @@protoc_insertion_point(field_set:PRO.Game_UserState_sync.user_iid)
}

// .PRO.Vector3d pos = 2;
inline bool Game_UserState_sync::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool Game_UserState_sync::has_pos() const {
  return _internal_has_pos();
}
inline void Game_UserState_sync::clear_pos() {
  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::PRO::Vector3d& Game_UserState_sync::_internal_pos() const {
  const ::PRO::Vector3d* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::Vector3d&>(
      ::PRO::_Vector3d_default_instance_);
}
inline const ::PRO::Vector3d& Game_UserState_sync::pos() const {
  // @@protoc_insertion_point(field_get:PRO.Game_UserState_sync.pos)
  return _internal_pos();
}
inline void Game_UserState_sync::unsafe_arena_set_allocated_pos(
    ::PRO::Vector3d* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.Game_UserState_sync.pos)
}
inline ::PRO::Vector3d* Game_UserState_sync::release_pos() {
  
  ::PRO::Vector3d* temp = pos_;
  pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::Vector3d* Game_UserState_sync::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:PRO.Game_UserState_sync.pos)
  
  ::PRO::Vector3d* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::PRO::Vector3d* Game_UserState_sync::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::Vector3d>(GetArenaForAllocation());
    pos_ = p;
  }
  return pos_;
}
inline ::PRO::Vector3d* Game_UserState_sync::mutable_pos() {
  ::PRO::Vector3d* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:PRO.Game_UserState_sync.pos)
  return _msg;
}
inline void Game_UserState_sync::set_allocated_pos(::PRO::Vector3d* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PRO::Vector3d>::GetOwningArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:PRO.Game_UserState_sync.pos)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PRO

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_game_5fsystem_2eproto

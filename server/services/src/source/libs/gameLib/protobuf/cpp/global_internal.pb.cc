// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: global_internal.proto

#include "global_internal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace PRO {
constexpr UserToken::UserToken(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : giduid_(int64_t{0})
  , slottoken_(int64_t{0}){}
struct UserTokenDefaultTypeInternal {
  constexpr UserTokenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserTokenDefaultTypeInternal() {}
  union {
    UserToken _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserTokenDefaultTypeInternal _UserToken_default_instance_;
constexpr MailSystemItem::MailSystemItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , contents_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , attachinfo_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , iid_(int64_t{0})
  , sender_iid_(int64_t{0})
  , attachment_(0)
  , createtime_(0){}
struct MailSystemItemDefaultTypeInternal {
  constexpr MailSystemItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MailSystemItemDefaultTypeInternal() {}
  union {
    MailSystemItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MailSystemItemDefaultTypeInternal _MailSystemItem_default_instance_;
constexpr MailSystemItems::MailSystemItems(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mails_(){}
struct MailSystemItemsDefaultTypeInternal {
  constexpr MailSystemItemsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MailSystemItemsDefaultTypeInternal() {}
  union {
    MailSystemItems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MailSystemItemsDefaultTypeInternal _MailSystemItems_default_instance_;
constexpr MailNormalItem::MailNormalItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attachinfo_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , contents_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , iid_(int64_t{0})
  , sender_iid_(int64_t{0})
  , stype_(0)
  , attachment_(0)
  , receiver_iid_(int64_t{0})
  , createtime_(0)
  , readtime_(0){}
struct MailNormalItemDefaultTypeInternal {
  constexpr MailNormalItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MailNormalItemDefaultTypeInternal() {}
  union {
    MailNormalItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MailNormalItemDefaultTypeInternal _MailNormalItem_default_instance_;
constexpr MailNormalItems::MailNormalItems(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mails_(){}
struct MailNormalItemsDefaultTypeInternal {
  constexpr MailNormalItemsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MailNormalItemsDefaultTypeInternal() {}
  union {
    MailNormalItems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MailNormalItemsDefaultTypeInternal _MailNormalItems_default_instance_;
constexpr FriendInviteItem::FriendInviteItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nickname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , iid_(int64_t{0})
  , from_iid_(int64_t{0})
  , invitetime_(0){}
struct FriendInviteItemDefaultTypeInternal {
  constexpr FriendInviteItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FriendInviteItemDefaultTypeInternal() {}
  union {
    FriendInviteItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FriendInviteItemDefaultTypeInternal _FriendInviteItem_default_instance_;
constexpr FriendRelation::FriendRelation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nickname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , iid_(int64_t{0})
  , friendiid_(int64_t{0})
  , online_(false){}
struct FriendRelationDefaultTypeInternal {
  constexpr FriendRelationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FriendRelationDefaultTypeInternal() {}
  union {
    FriendRelation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FriendRelationDefaultTypeInternal _FriendRelation_default_instance_;
constexpr FriendUserInfo::FriendUserInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(nullptr){}
struct FriendUserInfoDefaultTypeInternal {
  constexpr FriendUserInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FriendUserInfoDefaultTypeInternal() {}
  union {
    FriendUserInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FriendUserInfoDefaultTypeInternal _FriendUserInfo_default_instance_;
constexpr TaskItemDatas_DataEntry_DoNotUse::TaskItemDatas_DataEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TaskItemDatas_DataEntry_DoNotUseDefaultTypeInternal {
  constexpr TaskItemDatas_DataEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskItemDatas_DataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TaskItemDatas_DataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskItemDatas_DataEntry_DoNotUseDefaultTypeInternal _TaskItemDatas_DataEntry_DoNotUse_default_instance_;
constexpr TaskItemDatas::TaskItemDatas(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct TaskItemDatasDefaultTypeInternal {
  constexpr TaskItemDatasDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskItemDatasDefaultTypeInternal() {}
  union {
    TaskItemDatas _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskItemDatasDefaultTypeInternal _TaskItemDatas_default_instance_;
constexpr TaskItemInfo::TaskItemInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : iid_(int64_t{0})
  , role_iid_(int64_t{0}){}
struct TaskItemInfoDefaultTypeInternal {
  constexpr TaskItemInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskItemInfoDefaultTypeInternal() {}
  union {
    TaskItemInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskItemInfoDefaultTypeInternal _TaskItemInfo_default_instance_;
constexpr TaskItemList::TaskItemList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tasks_(){}
struct TaskItemListDefaultTypeInternal {
  constexpr TaskItemListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskItemListDefaultTypeInternal() {}
  union {
    TaskItemList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskItemListDefaultTypeInternal _TaskItemList_default_instance_;
constexpr TaskGroupInfo::TaskGroupInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : datas_(nullptr)
  , iid_(int64_t{0})
  , role_iid_(int64_t{0}){}
struct TaskGroupInfoDefaultTypeInternal {
  constexpr TaskGroupInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskGroupInfoDefaultTypeInternal() {}
  union {
    TaskGroupInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskGroupInfoDefaultTypeInternal _TaskGroupInfo_default_instance_;
constexpr TaskGroupList::TaskGroupList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : groups_(){}
struct TaskGroupListDefaultTypeInternal {
  constexpr TaskGroupListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskGroupListDefaultTypeInternal() {}
  union {
    TaskGroupList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskGroupListDefaultTypeInternal _TaskGroupList_default_instance_;
}  // namespace PRO
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_global_5finternal_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_global_5finternal_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_global_5finternal_2eproto = nullptr;

const uint32_t TableStruct_global_5finternal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::UserToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::UserToken, giduid_),
  PROTOBUF_FIELD_OFFSET(::PRO::UserToken, slottoken_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::MailSystemItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::MailSystemItem, iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::MailSystemItem, sender_iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::MailSystemItem, title_),
  PROTOBUF_FIELD_OFFSET(::PRO::MailSystemItem, contents_),
  PROTOBUF_FIELD_OFFSET(::PRO::MailSystemItem, attachment_),
  PROTOBUF_FIELD_OFFSET(::PRO::MailSystemItem, attachinfo_),
  PROTOBUF_FIELD_OFFSET(::PRO::MailSystemItem, createtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::MailSystemItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::MailSystemItems, mails_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::MailNormalItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::MailNormalItem, iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::MailNormalItem, stype_),
  PROTOBUF_FIELD_OFFSET(::PRO::MailNormalItem, sender_iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::MailNormalItem, receiver_iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::MailNormalItem, attachment_),
  PROTOBUF_FIELD_OFFSET(::PRO::MailNormalItem, attachinfo_),
  PROTOBUF_FIELD_OFFSET(::PRO::MailNormalItem, title_),
  PROTOBUF_FIELD_OFFSET(::PRO::MailNormalItem, contents_),
  PROTOBUF_FIELD_OFFSET(::PRO::MailNormalItem, createtime_),
  PROTOBUF_FIELD_OFFSET(::PRO::MailNormalItem, readtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::MailNormalItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::MailNormalItems, mails_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::FriendInviteItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::FriendInviteItem, iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::FriendInviteItem, from_iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::FriendInviteItem, nickname_),
  PROTOBUF_FIELD_OFFSET(::PRO::FriendInviteItem, invitetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::FriendRelation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::FriendRelation, iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::FriendRelation, friendiid_),
  PROTOBUF_FIELD_OFFSET(::PRO::FriendRelation, nickname_),
  PROTOBUF_FIELD_OFFSET(::PRO::FriendRelation, online_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::FriendUserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::FriendUserInfo, token_),
  PROTOBUF_FIELD_OFFSET(::PRO::TaskItemDatas_DataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PRO::TaskItemDatas_DataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::TaskItemDatas_DataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::PRO::TaskItemDatas_DataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::TaskItemDatas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::TaskItemDatas, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::TaskItemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::TaskItemInfo, iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::TaskItemInfo, role_iid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::TaskItemList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::TaskItemList, tasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::TaskGroupInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::TaskGroupInfo, iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::TaskGroupInfo, role_iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::TaskGroupInfo, datas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::TaskGroupList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::TaskGroupList, groups_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::PRO::UserToken)},
  { 8, -1, -1, sizeof(::PRO::MailSystemItem)},
  { 21, -1, -1, sizeof(::PRO::MailSystemItems)},
  { 28, -1, -1, sizeof(::PRO::MailNormalItem)},
  { 44, -1, -1, sizeof(::PRO::MailNormalItems)},
  { 51, -1, -1, sizeof(::PRO::FriendInviteItem)},
  { 61, -1, -1, sizeof(::PRO::FriendRelation)},
  { 71, -1, -1, sizeof(::PRO::FriendUserInfo)},
  { 78, 86, -1, sizeof(::PRO::TaskItemDatas_DataEntry_DoNotUse)},
  { 88, -1, -1, sizeof(::PRO::TaskItemDatas)},
  { 95, -1, -1, sizeof(::PRO::TaskItemInfo)},
  { 103, -1, -1, sizeof(::PRO::TaskItemList)},
  { 110, -1, -1, sizeof(::PRO::TaskGroupInfo)},
  { 119, -1, -1, sizeof(::PRO::TaskGroupList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_UserToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_MailSystemItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_MailSystemItems_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_MailNormalItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_MailNormalItems_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_FriendInviteItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_FriendRelation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_FriendUserInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_TaskItemDatas_DataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_TaskItemDatas_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_TaskItemInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_TaskItemList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_TaskGroupInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_TaskGroupList_default_instance_),
};

const char descriptor_table_protodef_global_5finternal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025global_internal.proto\022\003PRO\".\n\tUserToke"
  "n\022\016\n\006giduid\030\001 \001(\003\022\021\n\tslottoken\030\002 \001(\003\"\216\001\n"
  "\016MailSystemItem\022\013\n\003iid\030\001 \001(\003\022\022\n\nsender_i"
  "id\030\002 \001(\003\022\r\n\005title\030\003 \001(\t\022\020\n\010contents\030\004 \001("
  "\t\022\022\n\nattachment\030\005 \001(\005\022\022\n\nattachinfo\030\006 \001("
  "\t\022\022\n\ncreatetime\030\007 \001(\005\"5\n\017MailSystemItems"
  "\022\"\n\005mails\030\001 \003(\0132\023.PRO.MailSystemItem\"\305\001\n"
  "\016MailNormalItem\022\013\n\003iid\030\001 \001(\003\022\r\n\005stype\030\002 "
  "\001(\005\022\022\n\nsender_iid\030\003 \001(\003\022\024\n\014receiver_iid\030"
  "\004 \001(\003\022\022\n\nattachment\030\005 \001(\005\022\022\n\nattachinfo\030"
  "\006 \001(\t\022\r\n\005title\030\007 \001(\t\022\020\n\010contents\030\010 \001(\t\022\022"
  "\n\ncreatetime\030\t \001(\005\022\020\n\010readtime\030\n \001(\005\"5\n\017"
  "MailNormalItems\022\"\n\005mails\030\001 \003(\0132\023.PRO.Mai"
  "lNormalItem\"W\n\020FriendInviteItem\022\013\n\003iid\030\001"
  " \001(\003\022\020\n\010from_iid\030\002 \001(\003\022\020\n\010nickname\030\003 \001(\t"
  "\022\022\n\ninvitetime\030\004 \001(\005\"R\n\016FriendRelation\022\013"
  "\n\003iid\030\001 \001(\003\022\021\n\tfriendiid\030\002 \001(\003\022\020\n\010nickna"
  "me\030\003 \001(\t\022\016\n\006online\030\004 \001(\010\"/\n\016FriendUserIn"
  "fo\022\035\n\005token\030\001 \001(\0132\016.PRO.UserToken\"h\n\rTas"
  "kItemDatas\022*\n\004data\030\001 \003(\0132\034.PRO.TaskItemD"
  "atas.DataEntry\032+\n\tDataEntry\022\013\n\003key\030\001 \001(\t"
  "\022\r\n\005value\030\002 \001(\003:\0028\001\"-\n\014TaskItemInfo\022\013\n\003i"
  "id\030\001 \001(\003\022\020\n\010role_iid\030\002 \001(\003\"0\n\014TaskItemLi"
  "st\022 \n\005tasks\030\001 \003(\0132\021.PRO.TaskItemInfo\"Q\n\r"
  "TaskGroupInfo\022\013\n\003iid\030\001 \001(\003\022\020\n\010role_iid\030\002"
  " \001(\003\022!\n\005datas\030\024 \001(\0132\022.PRO.TaskItemDatas\""
  "3\n\rTaskGroupList\022\"\n\006groups\030\001 \003(\0132\022.PRO.T"
  "askGroupInfoBT\n\033com.cms.client.network.g"
  "proP\001Z\025gamelib/protobuf/gpro\252\002\033com.cms.c"
  "lient.network.gprob\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_global_5finternal_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_global_5finternal_2eproto = {
  false, false, 1186, descriptor_table_protodef_global_5finternal_2eproto, "global_internal.proto", 
  &descriptor_table_global_5finternal_2eproto_once, nullptr, 0, 14,
  schemas, file_default_instances, TableStruct_global_5finternal_2eproto::offsets,
  file_level_metadata_global_5finternal_2eproto, file_level_enum_descriptors_global_5finternal_2eproto, file_level_service_descriptors_global_5finternal_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_global_5finternal_2eproto_getter() {
  return &descriptor_table_global_5finternal_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_global_5finternal_2eproto(&descriptor_table_global_5finternal_2eproto);
namespace PRO {

// ===================================================================

class UserToken::_Internal {
 public:
};

UserToken::UserToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.UserToken)
}
UserToken::UserToken(const UserToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&giduid_, &from.giduid_,
    static_cast<size_t>(reinterpret_cast<char*>(&slottoken_) -
    reinterpret_cast<char*>(&giduid_)) + sizeof(slottoken_));
  // @@protoc_insertion_point(copy_constructor:PRO.UserToken)
}

inline void UserToken::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&giduid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&slottoken_) -
    reinterpret_cast<char*>(&giduid_)) + sizeof(slottoken_));
}

UserToken::~UserToken() {
  // @@protoc_insertion_point(destructor:PRO.UserToken)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserToken::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UserToken::ArenaDtor(void* object) {
  UserToken* _this = reinterpret_cast< UserToken* >(object);
  (void)_this;
}
void UserToken::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserToken::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.UserToken)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&giduid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slottoken_) -
      reinterpret_cast<char*>(&giduid_)) + sizeof(slottoken_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 giduid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          giduid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 slottoken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          slottoken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserToken::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.UserToken)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 giduid = 1;
  if (this->_internal_giduid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_giduid(), target);
  }

  // int64 slottoken = 2;
  if (this->_internal_slottoken() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_slottoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.UserToken)
  return target;
}

size_t UserToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.UserToken)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 giduid = 1;
  if (this->_internal_giduid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_giduid());
  }

  // int64 slottoken = 2;
  if (this->_internal_slottoken() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_slottoken());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserToken::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserToken::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserToken::GetClassData() const { return &_class_data_; }

void UserToken::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserToken *>(to)->MergeFrom(
      static_cast<const UserToken &>(from));
}


void UserToken::MergeFrom(const UserToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.UserToken)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_giduid() != 0) {
    _internal_set_giduid(from._internal_giduid());
  }
  if (from._internal_slottoken() != 0) {
    _internal_set_slottoken(from._internal_slottoken());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserToken::CopyFrom(const UserToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.UserToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserToken::IsInitialized() const {
  return true;
}

void UserToken::InternalSwap(UserToken* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserToken, slottoken_)
      + sizeof(UserToken::slottoken_)
      - PROTOBUF_FIELD_OFFSET(UserToken, giduid_)>(
          reinterpret_cast<char*>(&giduid_),
          reinterpret_cast<char*>(&other->giduid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserToken::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_global_5finternal_2eproto_getter, &descriptor_table_global_5finternal_2eproto_once,
      file_level_metadata_global_5finternal_2eproto[0]);
}

// ===================================================================

class MailSystemItem::_Internal {
 public:
};

MailSystemItem::MailSystemItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.MailSystemItem)
}
MailSystemItem::MailSystemItem(const MailSystemItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  contents_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    contents_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contents().empty()) {
    contents_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contents(), 
      GetArenaForAllocation());
  }
  attachinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attachinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attachinfo().empty()) {
    attachinfo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attachinfo(), 
      GetArenaForAllocation());
  }
  ::memcpy(&iid_, &from.iid_,
    static_cast<size_t>(reinterpret_cast<char*>(&createtime_) -
    reinterpret_cast<char*>(&iid_)) + sizeof(createtime_));
  // @@protoc_insertion_point(copy_constructor:PRO.MailSystemItem)
}

inline void MailSystemItem::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
contents_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  contents_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
attachinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attachinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&iid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&createtime_) -
    reinterpret_cast<char*>(&iid_)) + sizeof(createtime_));
}

MailSystemItem::~MailSystemItem() {
  // @@protoc_insertion_point(destructor:PRO.MailSystemItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MailSystemItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contents_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attachinfo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MailSystemItem::ArenaDtor(void* object) {
  MailSystemItem* _this = reinterpret_cast< MailSystemItem* >(object);
  (void)_this;
}
void MailSystemItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MailSystemItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MailSystemItem::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.MailSystemItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmpty();
  contents_.ClearToEmpty();
  attachinfo_.ClearToEmpty();
  ::memset(&iid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&createtime_) -
      reinterpret_cast<char*>(&iid_)) + sizeof(createtime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MailSystemItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 sender_iid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          sender_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.MailSystemItem.title"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string contents = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_contents();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.MailSystemItem.contents"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 attachment = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          attachment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string attachinfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_attachinfo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.MailSystemItem.attachinfo"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 createtime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          createtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MailSystemItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.MailSystemItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 iid = 1;
  if (this->_internal_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_iid(), target);
  }

  // int64 sender_iid = 2;
  if (this->_internal_sender_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_sender_iid(), target);
  }

  // string title = 3;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.MailSystemItem.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // string contents = 4;
  if (!this->_internal_contents().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contents().data(), static_cast<int>(this->_internal_contents().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.MailSystemItem.contents");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_contents(), target);
  }

  // int32 attachment = 5;
  if (this->_internal_attachment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_attachment(), target);
  }

  // string attachinfo = 6;
  if (!this->_internal_attachinfo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_attachinfo().data(), static_cast<int>(this->_internal_attachinfo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.MailSystemItem.attachinfo");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_attachinfo(), target);
  }

  // int32 createtime = 7;
  if (this->_internal_createtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_createtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.MailSystemItem)
  return target;
}

size_t MailSystemItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.MailSystemItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 3;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string contents = 4;
  if (!this->_internal_contents().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contents());
  }

  // string attachinfo = 6;
  if (!this->_internal_attachinfo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_attachinfo());
  }

  // int64 iid = 1;
  if (this->_internal_iid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_iid());
  }

  // int64 sender_iid = 2;
  if (this->_internal_sender_iid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_sender_iid());
  }

  // int32 attachment = 5;
  if (this->_internal_attachment() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_attachment());
  }

  // int32 createtime = 7;
  if (this->_internal_createtime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_createtime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MailSystemItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MailSystemItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MailSystemItem::GetClassData() const { return &_class_data_; }

void MailSystemItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MailSystemItem *>(to)->MergeFrom(
      static_cast<const MailSystemItem &>(from));
}


void MailSystemItem::MergeFrom(const MailSystemItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.MailSystemItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _internal_set_title(from._internal_title());
  }
  if (!from._internal_contents().empty()) {
    _internal_set_contents(from._internal_contents());
  }
  if (!from._internal_attachinfo().empty()) {
    _internal_set_attachinfo(from._internal_attachinfo());
  }
  if (from._internal_iid() != 0) {
    _internal_set_iid(from._internal_iid());
  }
  if (from._internal_sender_iid() != 0) {
    _internal_set_sender_iid(from._internal_sender_iid());
  }
  if (from._internal_attachment() != 0) {
    _internal_set_attachment(from._internal_attachment());
  }
  if (from._internal_createtime() != 0) {
    _internal_set_createtime(from._internal_createtime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MailSystemItem::CopyFrom(const MailSystemItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.MailSystemItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailSystemItem::IsInitialized() const {
  return true;
}

void MailSystemItem::InternalSwap(MailSystemItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &contents_, lhs_arena,
      &other->contents_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attachinfo_, lhs_arena,
      &other->attachinfo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MailSystemItem, createtime_)
      + sizeof(MailSystemItem::createtime_)
      - PROTOBUF_FIELD_OFFSET(MailSystemItem, iid_)>(
          reinterpret_cast<char*>(&iid_),
          reinterpret_cast<char*>(&other->iid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MailSystemItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_global_5finternal_2eproto_getter, &descriptor_table_global_5finternal_2eproto_once,
      file_level_metadata_global_5finternal_2eproto[1]);
}

// ===================================================================

class MailSystemItems::_Internal {
 public:
};

MailSystemItems::MailSystemItems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  mails_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.MailSystemItems)
}
MailSystemItems::MailSystemItems(const MailSystemItems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mails_(from.mails_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PRO.MailSystemItems)
}

inline void MailSystemItems::SharedCtor() {
}

MailSystemItems::~MailSystemItems() {
  // @@protoc_insertion_point(destructor:PRO.MailSystemItems)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MailSystemItems::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MailSystemItems::ArenaDtor(void* object) {
  MailSystemItems* _this = reinterpret_cast< MailSystemItems* >(object);
  (void)_this;
}
void MailSystemItems::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MailSystemItems::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MailSystemItems::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.MailSystemItems)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mails_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MailSystemItems::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PRO.MailSystemItem mails = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MailSystemItems::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.MailSystemItems)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PRO.MailSystemItem mails = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mails_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_mails(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.MailSystemItems)
  return target;
}

size_t MailSystemItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.MailSystemItems)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PRO.MailSystemItem mails = 1;
  total_size += 1UL * this->_internal_mails_size();
  for (const auto& msg : this->mails_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MailSystemItems::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MailSystemItems::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MailSystemItems::GetClassData() const { return &_class_data_; }

void MailSystemItems::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MailSystemItems *>(to)->MergeFrom(
      static_cast<const MailSystemItems &>(from));
}


void MailSystemItems::MergeFrom(const MailSystemItems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.MailSystemItems)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  mails_.MergeFrom(from.mails_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MailSystemItems::CopyFrom(const MailSystemItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.MailSystemItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailSystemItems::IsInitialized() const {
  return true;
}

void MailSystemItems::InternalSwap(MailSystemItems* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  mails_.InternalSwap(&other->mails_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MailSystemItems::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_global_5finternal_2eproto_getter, &descriptor_table_global_5finternal_2eproto_once,
      file_level_metadata_global_5finternal_2eproto[2]);
}

// ===================================================================

class MailNormalItem::_Internal {
 public:
};

MailNormalItem::MailNormalItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.MailNormalItem)
}
MailNormalItem::MailNormalItem(const MailNormalItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attachinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attachinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attachinfo().empty()) {
    attachinfo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attachinfo(), 
      GetArenaForAllocation());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  contents_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    contents_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contents().empty()) {
    contents_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contents(), 
      GetArenaForAllocation());
  }
  ::memcpy(&iid_, &from.iid_,
    static_cast<size_t>(reinterpret_cast<char*>(&readtime_) -
    reinterpret_cast<char*>(&iid_)) + sizeof(readtime_));
  // @@protoc_insertion_point(copy_constructor:PRO.MailNormalItem)
}

inline void MailNormalItem::SharedCtor() {
attachinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attachinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
contents_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  contents_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&iid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&readtime_) -
    reinterpret_cast<char*>(&iid_)) + sizeof(readtime_));
}

MailNormalItem::~MailNormalItem() {
  // @@protoc_insertion_point(destructor:PRO.MailNormalItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MailNormalItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  attachinfo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contents_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MailNormalItem::ArenaDtor(void* object) {
  MailNormalItem* _this = reinterpret_cast< MailNormalItem* >(object);
  (void)_this;
}
void MailNormalItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MailNormalItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MailNormalItem::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.MailNormalItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attachinfo_.ClearToEmpty();
  title_.ClearToEmpty();
  contents_.ClearToEmpty();
  ::memset(&iid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&readtime_) -
      reinterpret_cast<char*>(&iid_)) + sizeof(readtime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MailNormalItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 stype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          stype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 sender_iid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          sender_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 receiver_iid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          receiver_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 attachment = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          attachment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string attachinfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_attachinfo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.MailNormalItem.attachinfo"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string title = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.MailNormalItem.title"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string contents = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_contents();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.MailNormalItem.contents"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 createtime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          createtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 readtime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          readtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MailNormalItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.MailNormalItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 iid = 1;
  if (this->_internal_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_iid(), target);
  }

  // int32 stype = 2;
  if (this->_internal_stype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_stype(), target);
  }

  // int64 sender_iid = 3;
  if (this->_internal_sender_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_sender_iid(), target);
  }

  // int64 receiver_iid = 4;
  if (this->_internal_receiver_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_receiver_iid(), target);
  }

  // int32 attachment = 5;
  if (this->_internal_attachment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_attachment(), target);
  }

  // string attachinfo = 6;
  if (!this->_internal_attachinfo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_attachinfo().data(), static_cast<int>(this->_internal_attachinfo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.MailNormalItem.attachinfo");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_attachinfo(), target);
  }

  // string title = 7;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.MailNormalItem.title");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_title(), target);
  }

  // string contents = 8;
  if (!this->_internal_contents().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contents().data(), static_cast<int>(this->_internal_contents().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.MailNormalItem.contents");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_contents(), target);
  }

  // int32 createtime = 9;
  if (this->_internal_createtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_createtime(), target);
  }

  // int32 readtime = 10;
  if (this->_internal_readtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_readtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.MailNormalItem)
  return target;
}

size_t MailNormalItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.MailNormalItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string attachinfo = 6;
  if (!this->_internal_attachinfo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_attachinfo());
  }

  // string title = 7;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string contents = 8;
  if (!this->_internal_contents().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contents());
  }

  // int64 iid = 1;
  if (this->_internal_iid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_iid());
  }

  // int64 sender_iid = 3;
  if (this->_internal_sender_iid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_sender_iid());
  }

  // int32 stype = 2;
  if (this->_internal_stype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_stype());
  }

  // int32 attachment = 5;
  if (this->_internal_attachment() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_attachment());
  }

  // int64 receiver_iid = 4;
  if (this->_internal_receiver_iid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_receiver_iid());
  }

  // int32 createtime = 9;
  if (this->_internal_createtime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_createtime());
  }

  // int32 readtime = 10;
  if (this->_internal_readtime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_readtime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MailNormalItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MailNormalItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MailNormalItem::GetClassData() const { return &_class_data_; }

void MailNormalItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MailNormalItem *>(to)->MergeFrom(
      static_cast<const MailNormalItem &>(from));
}


void MailNormalItem::MergeFrom(const MailNormalItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.MailNormalItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_attachinfo().empty()) {
    _internal_set_attachinfo(from._internal_attachinfo());
  }
  if (!from._internal_title().empty()) {
    _internal_set_title(from._internal_title());
  }
  if (!from._internal_contents().empty()) {
    _internal_set_contents(from._internal_contents());
  }
  if (from._internal_iid() != 0) {
    _internal_set_iid(from._internal_iid());
  }
  if (from._internal_sender_iid() != 0) {
    _internal_set_sender_iid(from._internal_sender_iid());
  }
  if (from._internal_stype() != 0) {
    _internal_set_stype(from._internal_stype());
  }
  if (from._internal_attachment() != 0) {
    _internal_set_attachment(from._internal_attachment());
  }
  if (from._internal_receiver_iid() != 0) {
    _internal_set_receiver_iid(from._internal_receiver_iid());
  }
  if (from._internal_createtime() != 0) {
    _internal_set_createtime(from._internal_createtime());
  }
  if (from._internal_readtime() != 0) {
    _internal_set_readtime(from._internal_readtime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MailNormalItem::CopyFrom(const MailNormalItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.MailNormalItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailNormalItem::IsInitialized() const {
  return true;
}

void MailNormalItem::InternalSwap(MailNormalItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attachinfo_, lhs_arena,
      &other->attachinfo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &contents_, lhs_arena,
      &other->contents_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MailNormalItem, readtime_)
      + sizeof(MailNormalItem::readtime_)
      - PROTOBUF_FIELD_OFFSET(MailNormalItem, iid_)>(
          reinterpret_cast<char*>(&iid_),
          reinterpret_cast<char*>(&other->iid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MailNormalItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_global_5finternal_2eproto_getter, &descriptor_table_global_5finternal_2eproto_once,
      file_level_metadata_global_5finternal_2eproto[3]);
}

// ===================================================================

class MailNormalItems::_Internal {
 public:
};

MailNormalItems::MailNormalItems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  mails_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.MailNormalItems)
}
MailNormalItems::MailNormalItems(const MailNormalItems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mails_(from.mails_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PRO.MailNormalItems)
}

inline void MailNormalItems::SharedCtor() {
}

MailNormalItems::~MailNormalItems() {
  // @@protoc_insertion_point(destructor:PRO.MailNormalItems)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MailNormalItems::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MailNormalItems::ArenaDtor(void* object) {
  MailNormalItems* _this = reinterpret_cast< MailNormalItems* >(object);
  (void)_this;
}
void MailNormalItems::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MailNormalItems::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MailNormalItems::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.MailNormalItems)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mails_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MailNormalItems::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PRO.MailNormalItem mails = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MailNormalItems::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.MailNormalItems)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PRO.MailNormalItem mails = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mails_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_mails(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.MailNormalItems)
  return target;
}

size_t MailNormalItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.MailNormalItems)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PRO.MailNormalItem mails = 1;
  total_size += 1UL * this->_internal_mails_size();
  for (const auto& msg : this->mails_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MailNormalItems::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MailNormalItems::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MailNormalItems::GetClassData() const { return &_class_data_; }

void MailNormalItems::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MailNormalItems *>(to)->MergeFrom(
      static_cast<const MailNormalItems &>(from));
}


void MailNormalItems::MergeFrom(const MailNormalItems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.MailNormalItems)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  mails_.MergeFrom(from.mails_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MailNormalItems::CopyFrom(const MailNormalItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.MailNormalItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailNormalItems::IsInitialized() const {
  return true;
}

void MailNormalItems::InternalSwap(MailNormalItems* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  mails_.InternalSwap(&other->mails_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MailNormalItems::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_global_5finternal_2eproto_getter, &descriptor_table_global_5finternal_2eproto_once,
      file_level_metadata_global_5finternal_2eproto[4]);
}

// ===================================================================

class FriendInviteItem::_Internal {
 public:
};

FriendInviteItem::FriendInviteItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.FriendInviteItem)
}
FriendInviteItem::FriendInviteItem(const FriendInviteItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&iid_, &from.iid_,
    static_cast<size_t>(reinterpret_cast<char*>(&invitetime_) -
    reinterpret_cast<char*>(&iid_)) + sizeof(invitetime_));
  // @@protoc_insertion_point(copy_constructor:PRO.FriendInviteItem)
}

inline void FriendInviteItem::SharedCtor() {
nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&iid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&invitetime_) -
    reinterpret_cast<char*>(&iid_)) + sizeof(invitetime_));
}

FriendInviteItem::~FriendInviteItem() {
  // @@protoc_insertion_point(destructor:PRO.FriendInviteItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FriendInviteItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FriendInviteItem::ArenaDtor(void* object) {
  FriendInviteItem* _this = reinterpret_cast< FriendInviteItem* >(object);
  (void)_this;
}
void FriendInviteItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FriendInviteItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FriendInviteItem::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.FriendInviteItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nickname_.ClearToEmpty();
  ::memset(&iid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invitetime_) -
      reinterpret_cast<char*>(&iid_)) + sizeof(invitetime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendInviteItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 from_iid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          from_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nickname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.FriendInviteItem.nickname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 invitetime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          invitetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FriendInviteItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.FriendInviteItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 iid = 1;
  if (this->_internal_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_iid(), target);
  }

  // int64 from_iid = 2;
  if (this->_internal_from_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_from_iid(), target);
  }

  // string nickname = 3;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.FriendInviteItem.nickname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_nickname(), target);
  }

  // int32 invitetime = 4;
  if (this->_internal_invitetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_invitetime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.FriendInviteItem)
  return target;
}

size_t FriendInviteItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.FriendInviteItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 3;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // int64 iid = 1;
  if (this->_internal_iid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_iid());
  }

  // int64 from_iid = 2;
  if (this->_internal_from_iid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_from_iid());
  }

  // int32 invitetime = 4;
  if (this->_internal_invitetime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_invitetime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FriendInviteItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FriendInviteItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FriendInviteItem::GetClassData() const { return &_class_data_; }

void FriendInviteItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FriendInviteItem *>(to)->MergeFrom(
      static_cast<const FriendInviteItem &>(from));
}


void FriendInviteItem::MergeFrom(const FriendInviteItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.FriendInviteItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nickname().empty()) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (from._internal_iid() != 0) {
    _internal_set_iid(from._internal_iid());
  }
  if (from._internal_from_iid() != 0) {
    _internal_set_from_iid(from._internal_from_iid());
  }
  if (from._internal_invitetime() != 0) {
    _internal_set_invitetime(from._internal_invitetime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FriendInviteItem::CopyFrom(const FriendInviteItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.FriendInviteItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendInviteItem::IsInitialized() const {
  return true;
}

void FriendInviteItem::InternalSwap(FriendInviteItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nickname_, lhs_arena,
      &other->nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FriendInviteItem, invitetime_)
      + sizeof(FriendInviteItem::invitetime_)
      - PROTOBUF_FIELD_OFFSET(FriendInviteItem, iid_)>(
          reinterpret_cast<char*>(&iid_),
          reinterpret_cast<char*>(&other->iid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendInviteItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_global_5finternal_2eproto_getter, &descriptor_table_global_5finternal_2eproto_once,
      file_level_metadata_global_5finternal_2eproto[5]);
}

// ===================================================================

class FriendRelation::_Internal {
 public:
};

FriendRelation::FriendRelation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.FriendRelation)
}
FriendRelation::FriendRelation(const FriendRelation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&iid_, &from.iid_,
    static_cast<size_t>(reinterpret_cast<char*>(&online_) -
    reinterpret_cast<char*>(&iid_)) + sizeof(online_));
  // @@protoc_insertion_point(copy_constructor:PRO.FriendRelation)
}

inline void FriendRelation::SharedCtor() {
nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&iid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&online_) -
    reinterpret_cast<char*>(&iid_)) + sizeof(online_));
}

FriendRelation::~FriendRelation() {
  // @@protoc_insertion_point(destructor:PRO.FriendRelation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FriendRelation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FriendRelation::ArenaDtor(void* object) {
  FriendRelation* _this = reinterpret_cast< FriendRelation* >(object);
  (void)_this;
}
void FriendRelation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FriendRelation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FriendRelation::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.FriendRelation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nickname_.ClearToEmpty();
  ::memset(&iid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_) -
      reinterpret_cast<char*>(&iid_)) + sizeof(online_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendRelation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 friendiid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          friendiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nickname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.FriendRelation.nickname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool online = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FriendRelation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.FriendRelation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 iid = 1;
  if (this->_internal_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_iid(), target);
  }

  // int64 friendiid = 2;
  if (this->_internal_friendiid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_friendiid(), target);
  }

  // string nickname = 3;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.FriendRelation.nickname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_nickname(), target);
  }

  // bool online = 4;
  if (this->_internal_online() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_online(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.FriendRelation)
  return target;
}

size_t FriendRelation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.FriendRelation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 3;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // int64 iid = 1;
  if (this->_internal_iid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_iid());
  }

  // int64 friendiid = 2;
  if (this->_internal_friendiid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_friendiid());
  }

  // bool online = 4;
  if (this->_internal_online() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FriendRelation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FriendRelation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FriendRelation::GetClassData() const { return &_class_data_; }

void FriendRelation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FriendRelation *>(to)->MergeFrom(
      static_cast<const FriendRelation &>(from));
}


void FriendRelation::MergeFrom(const FriendRelation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.FriendRelation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nickname().empty()) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (from._internal_iid() != 0) {
    _internal_set_iid(from._internal_iid());
  }
  if (from._internal_friendiid() != 0) {
    _internal_set_friendiid(from._internal_friendiid());
  }
  if (from._internal_online() != 0) {
    _internal_set_online(from._internal_online());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FriendRelation::CopyFrom(const FriendRelation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.FriendRelation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRelation::IsInitialized() const {
  return true;
}

void FriendRelation::InternalSwap(FriendRelation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nickname_, lhs_arena,
      &other->nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FriendRelation, online_)
      + sizeof(FriendRelation::online_)
      - PROTOBUF_FIELD_OFFSET(FriendRelation, iid_)>(
          reinterpret_cast<char*>(&iid_),
          reinterpret_cast<char*>(&other->iid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendRelation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_global_5finternal_2eproto_getter, &descriptor_table_global_5finternal_2eproto_once,
      file_level_metadata_global_5finternal_2eproto[6]);
}

// ===================================================================

class FriendUserInfo::_Internal {
 public:
  static const ::PRO::UserToken& token(const FriendUserInfo* msg);
};

const ::PRO::UserToken&
FriendUserInfo::_Internal::token(const FriendUserInfo* msg) {
  return *msg->token_;
}
FriendUserInfo::FriendUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.FriendUserInfo)
}
FriendUserInfo::FriendUserInfo(const FriendUserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_token()) {
    token_ = new ::PRO::UserToken(*from.token_);
  } else {
    token_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PRO.FriendUserInfo)
}

inline void FriendUserInfo::SharedCtor() {
token_ = nullptr;
}

FriendUserInfo::~FriendUserInfo() {
  // @@protoc_insertion_point(destructor:PRO.FriendUserInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FriendUserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete token_;
}

void FriendUserInfo::ArenaDtor(void* object) {
  FriendUserInfo* _this = reinterpret_cast< FriendUserInfo* >(object);
  (void)_this;
}
void FriendUserInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FriendUserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FriendUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.FriendUserInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && token_ != nullptr) {
    delete token_;
  }
  token_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendUserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PRO.UserToken token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FriendUserInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.FriendUserInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PRO.UserToken token = 1;
  if (this->_internal_has_token()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::token(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.FriendUserInfo)
  return target;
}

size_t FriendUserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.FriendUserInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PRO.UserToken token = 1;
  if (this->_internal_has_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *token_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FriendUserInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FriendUserInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FriendUserInfo::GetClassData() const { return &_class_data_; }

void FriendUserInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FriendUserInfo *>(to)->MergeFrom(
      static_cast<const FriendUserInfo &>(from));
}


void FriendUserInfo::MergeFrom(const FriendUserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.FriendUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_token()) {
    _internal_mutable_token()->::PRO::UserToken::MergeFrom(from._internal_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FriendUserInfo::CopyFrom(const FriendUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.FriendUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendUserInfo::IsInitialized() const {
  return true;
}

void FriendUserInfo::InternalSwap(FriendUserInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(token_, other->token_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendUserInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_global_5finternal_2eproto_getter, &descriptor_table_global_5finternal_2eproto_once,
      file_level_metadata_global_5finternal_2eproto[7]);
}

// ===================================================================

TaskItemDatas_DataEntry_DoNotUse::TaskItemDatas_DataEntry_DoNotUse() {}
TaskItemDatas_DataEntry_DoNotUse::TaskItemDatas_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TaskItemDatas_DataEntry_DoNotUse::MergeFrom(const TaskItemDatas_DataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TaskItemDatas_DataEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_global_5finternal_2eproto_getter, &descriptor_table_global_5finternal_2eproto_once,
      file_level_metadata_global_5finternal_2eproto[8]);
}

// ===================================================================

class TaskItemDatas::_Internal {
 public:
};

TaskItemDatas::TaskItemDatas(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.TaskItemDatas)
}
TaskItemDatas::TaskItemDatas(const TaskItemDatas& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.MergeFrom(from.data_);
  // @@protoc_insertion_point(copy_constructor:PRO.TaskItemDatas)
}

inline void TaskItemDatas::SharedCtor() {
}

TaskItemDatas::~TaskItemDatas() {
  // @@protoc_insertion_point(destructor:PRO.TaskItemDatas)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskItemDatas::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TaskItemDatas::ArenaDtor(void* object) {
  TaskItemDatas* _this = reinterpret_cast< TaskItemDatas* >(object);
  (void)_this;
  _this->data_. ~MapField();
}
inline void TaskItemDatas::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &TaskItemDatas::ArenaDtor);
  }
}
void TaskItemDatas::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskItemDatas::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.TaskItemDatas)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskItemDatas::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, int64> data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskItemDatas::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.TaskItemDatas)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, int64> data = 1;
  if (!this->_internal_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "PRO.TaskItemDatas.DataEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >::const_iterator
          it = this->_internal_data().begin();
          it != this->_internal_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TaskItemDatas_DataEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >::const_iterator
          it = this->_internal_data().begin();
          it != this->_internal_data().end(); ++it) {
        target = TaskItemDatas_DataEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.TaskItemDatas)
  return target;
}

size_t TaskItemDatas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.TaskItemDatas)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int64> data = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >::const_iterator
      it = this->_internal_data().begin();
      it != this->_internal_data().end(); ++it) {
    total_size += TaskItemDatas_DataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskItemDatas::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskItemDatas::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskItemDatas::GetClassData() const { return &_class_data_; }

void TaskItemDatas::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TaskItemDatas *>(to)->MergeFrom(
      static_cast<const TaskItemDatas &>(from));
}


void TaskItemDatas::MergeFrom(const TaskItemDatas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.TaskItemDatas)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskItemDatas::CopyFrom(const TaskItemDatas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.TaskItemDatas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskItemDatas::IsInitialized() const {
  return true;
}

void TaskItemDatas::InternalSwap(TaskItemDatas* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskItemDatas::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_global_5finternal_2eproto_getter, &descriptor_table_global_5finternal_2eproto_once,
      file_level_metadata_global_5finternal_2eproto[9]);
}

// ===================================================================

class TaskItemInfo::_Internal {
 public:
};

TaskItemInfo::TaskItemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.TaskItemInfo)
}
TaskItemInfo::TaskItemInfo(const TaskItemInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&iid_, &from.iid_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_iid_) -
    reinterpret_cast<char*>(&iid_)) + sizeof(role_iid_));
  // @@protoc_insertion_point(copy_constructor:PRO.TaskItemInfo)
}

inline void TaskItemInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&iid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&role_iid_) -
    reinterpret_cast<char*>(&iid_)) + sizeof(role_iid_));
}

TaskItemInfo::~TaskItemInfo() {
  // @@protoc_insertion_point(destructor:PRO.TaskItemInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskItemInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TaskItemInfo::ArenaDtor(void* object) {
  TaskItemInfo* _this = reinterpret_cast< TaskItemInfo* >(object);
  (void)_this;
}
void TaskItemInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskItemInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskItemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.TaskItemInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&iid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_iid_) -
      reinterpret_cast<char*>(&iid_)) + sizeof(role_iid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskItemInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 role_iid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          role_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskItemInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.TaskItemInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 iid = 1;
  if (this->_internal_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_iid(), target);
  }

  // int64 role_iid = 2;
  if (this->_internal_role_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_role_iid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.TaskItemInfo)
  return target;
}

size_t TaskItemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.TaskItemInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 iid = 1;
  if (this->_internal_iid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_iid());
  }

  // int64 role_iid = 2;
  if (this->_internal_role_iid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_role_iid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskItemInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskItemInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskItemInfo::GetClassData() const { return &_class_data_; }

void TaskItemInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TaskItemInfo *>(to)->MergeFrom(
      static_cast<const TaskItemInfo &>(from));
}


void TaskItemInfo::MergeFrom(const TaskItemInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.TaskItemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_iid() != 0) {
    _internal_set_iid(from._internal_iid());
  }
  if (from._internal_role_iid() != 0) {
    _internal_set_role_iid(from._internal_role_iid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskItemInfo::CopyFrom(const TaskItemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.TaskItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskItemInfo::IsInitialized() const {
  return true;
}

void TaskItemInfo::InternalSwap(TaskItemInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskItemInfo, role_iid_)
      + sizeof(TaskItemInfo::role_iid_)
      - PROTOBUF_FIELD_OFFSET(TaskItemInfo, iid_)>(
          reinterpret_cast<char*>(&iid_),
          reinterpret_cast<char*>(&other->iid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskItemInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_global_5finternal_2eproto_getter, &descriptor_table_global_5finternal_2eproto_once,
      file_level_metadata_global_5finternal_2eproto[10]);
}

// ===================================================================

class TaskItemList::_Internal {
 public:
};

TaskItemList::TaskItemList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tasks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.TaskItemList)
}
TaskItemList::TaskItemList(const TaskItemList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PRO.TaskItemList)
}

inline void TaskItemList::SharedCtor() {
}

TaskItemList::~TaskItemList() {
  // @@protoc_insertion_point(destructor:PRO.TaskItemList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskItemList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TaskItemList::ArenaDtor(void* object) {
  TaskItemList* _this = reinterpret_cast< TaskItemList* >(object);
  (void)_this;
}
void TaskItemList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskItemList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskItemList::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.TaskItemList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskItemList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PRO.TaskItemInfo tasks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskItemList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.TaskItemList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PRO.TaskItemInfo tasks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tasks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.TaskItemList)
  return target;
}

size_t TaskItemList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.TaskItemList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PRO.TaskItemInfo tasks = 1;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskItemList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskItemList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskItemList::GetClassData() const { return &_class_data_; }

void TaskItemList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TaskItemList *>(to)->MergeFrom(
      static_cast<const TaskItemList &>(from));
}


void TaskItemList::MergeFrom(const TaskItemList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.TaskItemList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskItemList::CopyFrom(const TaskItemList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.TaskItemList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskItemList::IsInitialized() const {
  return true;
}

void TaskItemList::InternalSwap(TaskItemList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tasks_.InternalSwap(&other->tasks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskItemList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_global_5finternal_2eproto_getter, &descriptor_table_global_5finternal_2eproto_once,
      file_level_metadata_global_5finternal_2eproto[11]);
}

// ===================================================================

class TaskGroupInfo::_Internal {
 public:
  static const ::PRO::TaskItemDatas& datas(const TaskGroupInfo* msg);
};

const ::PRO::TaskItemDatas&
TaskGroupInfo::_Internal::datas(const TaskGroupInfo* msg) {
  return *msg->datas_;
}
TaskGroupInfo::TaskGroupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.TaskGroupInfo)
}
TaskGroupInfo::TaskGroupInfo(const TaskGroupInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_datas()) {
    datas_ = new ::PRO::TaskItemDatas(*from.datas_);
  } else {
    datas_ = nullptr;
  }
  ::memcpy(&iid_, &from.iid_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_iid_) -
    reinterpret_cast<char*>(&iid_)) + sizeof(role_iid_));
  // @@protoc_insertion_point(copy_constructor:PRO.TaskGroupInfo)
}

inline void TaskGroupInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&datas_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&role_iid_) -
    reinterpret_cast<char*>(&datas_)) + sizeof(role_iid_));
}

TaskGroupInfo::~TaskGroupInfo() {
  // @@protoc_insertion_point(destructor:PRO.TaskGroupInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskGroupInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete datas_;
}

void TaskGroupInfo::ArenaDtor(void* object) {
  TaskGroupInfo* _this = reinterpret_cast< TaskGroupInfo* >(object);
  (void)_this;
}
void TaskGroupInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskGroupInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskGroupInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.TaskGroupInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && datas_ != nullptr) {
    delete datas_;
  }
  datas_ = nullptr;
  ::memset(&iid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_iid_) -
      reinterpret_cast<char*>(&iid_)) + sizeof(role_iid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskGroupInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 role_iid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          role_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PRO.TaskItemDatas datas = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_datas(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskGroupInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.TaskGroupInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 iid = 1;
  if (this->_internal_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_iid(), target);
  }

  // int64 role_iid = 2;
  if (this->_internal_role_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_role_iid(), target);
  }

  // .PRO.TaskItemDatas datas = 20;
  if (this->_internal_has_datas()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::datas(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.TaskGroupInfo)
  return target;
}

size_t TaskGroupInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.TaskGroupInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PRO.TaskItemDatas datas = 20;
  if (this->_internal_has_datas()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *datas_);
  }

  // int64 iid = 1;
  if (this->_internal_iid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_iid());
  }

  // int64 role_iid = 2;
  if (this->_internal_role_iid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_role_iid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskGroupInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskGroupInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskGroupInfo::GetClassData() const { return &_class_data_; }

void TaskGroupInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TaskGroupInfo *>(to)->MergeFrom(
      static_cast<const TaskGroupInfo &>(from));
}


void TaskGroupInfo::MergeFrom(const TaskGroupInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.TaskGroupInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_datas()) {
    _internal_mutable_datas()->::PRO::TaskItemDatas::MergeFrom(from._internal_datas());
  }
  if (from._internal_iid() != 0) {
    _internal_set_iid(from._internal_iid());
  }
  if (from._internal_role_iid() != 0) {
    _internal_set_role_iid(from._internal_role_iid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskGroupInfo::CopyFrom(const TaskGroupInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.TaskGroupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskGroupInfo::IsInitialized() const {
  return true;
}

void TaskGroupInfo::InternalSwap(TaskGroupInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskGroupInfo, role_iid_)
      + sizeof(TaskGroupInfo::role_iid_)
      - PROTOBUF_FIELD_OFFSET(TaskGroupInfo, datas_)>(
          reinterpret_cast<char*>(&datas_),
          reinterpret_cast<char*>(&other->datas_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskGroupInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_global_5finternal_2eproto_getter, &descriptor_table_global_5finternal_2eproto_once,
      file_level_metadata_global_5finternal_2eproto[12]);
}

// ===================================================================

class TaskGroupList::_Internal {
 public:
};

TaskGroupList::TaskGroupList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  groups_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.TaskGroupList)
}
TaskGroupList::TaskGroupList(const TaskGroupList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      groups_(from.groups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PRO.TaskGroupList)
}

inline void TaskGroupList::SharedCtor() {
}

TaskGroupList::~TaskGroupList() {
  // @@protoc_insertion_point(destructor:PRO.TaskGroupList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskGroupList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TaskGroupList::ArenaDtor(void* object) {
  TaskGroupList* _this = reinterpret_cast< TaskGroupList* >(object);
  (void)_this;
}
void TaskGroupList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskGroupList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskGroupList::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.TaskGroupList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groups_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskGroupList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PRO.TaskGroupInfo groups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskGroupList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.TaskGroupList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PRO.TaskGroupInfo groups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_groups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_groups(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.TaskGroupList)
  return target;
}

size_t TaskGroupList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.TaskGroupList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PRO.TaskGroupInfo groups = 1;
  total_size += 1UL * this->_internal_groups_size();
  for (const auto& msg : this->groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskGroupList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskGroupList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskGroupList::GetClassData() const { return &_class_data_; }

void TaskGroupList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TaskGroupList *>(to)->MergeFrom(
      static_cast<const TaskGroupList &>(from));
}


void TaskGroupList::MergeFrom(const TaskGroupList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.TaskGroupList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  groups_.MergeFrom(from.groups_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskGroupList::CopyFrom(const TaskGroupList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.TaskGroupList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskGroupList::IsInitialized() const {
  return true;
}

void TaskGroupList::InternalSwap(TaskGroupList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  groups_.InternalSwap(&other->groups_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskGroupList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_global_5finternal_2eproto_getter, &descriptor_table_global_5finternal_2eproto_once,
      file_level_metadata_global_5finternal_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace PRO
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PRO::UserToken* Arena::CreateMaybeMessage< ::PRO::UserToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::UserToken >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::MailSystemItem* Arena::CreateMaybeMessage< ::PRO::MailSystemItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::MailSystemItem >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::MailSystemItems* Arena::CreateMaybeMessage< ::PRO::MailSystemItems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::MailSystemItems >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::MailNormalItem* Arena::CreateMaybeMessage< ::PRO::MailNormalItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::MailNormalItem >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::MailNormalItems* Arena::CreateMaybeMessage< ::PRO::MailNormalItems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::MailNormalItems >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::FriendInviteItem* Arena::CreateMaybeMessage< ::PRO::FriendInviteItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::FriendInviteItem >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::FriendRelation* Arena::CreateMaybeMessage< ::PRO::FriendRelation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::FriendRelation >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::FriendUserInfo* Arena::CreateMaybeMessage< ::PRO::FriendUserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::FriendUserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::TaskItemDatas_DataEntry_DoNotUse* Arena::CreateMaybeMessage< ::PRO::TaskItemDatas_DataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::TaskItemDatas_DataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::TaskItemDatas* Arena::CreateMaybeMessage< ::PRO::TaskItemDatas >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::TaskItemDatas >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::TaskItemInfo* Arena::CreateMaybeMessage< ::PRO::TaskItemInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::TaskItemInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::TaskItemList* Arena::CreateMaybeMessage< ::PRO::TaskItemList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::TaskItemList >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::TaskGroupInfo* Arena::CreateMaybeMessage< ::PRO::TaskGroupInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::TaskGroupInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::TaskGroupList* Arena::CreateMaybeMessage< ::PRO::TaskGroupList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::TaskGroupList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task_system.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_task_5fsystem_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_task_5fsystem_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "global_internal.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_task_5fsystem_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_task_5fsystem_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_task_5fsystem_2eproto;
namespace PRO {
class Task_NewTasks_ntf;
struct Task_NewTasks_ntfDefaultTypeInternal;
extern Task_NewTasks_ntfDefaultTypeInternal _Task_NewTasks_ntf_default_instance_;
}  // namespace PRO
PROTOBUF_NAMESPACE_OPEN
template<> ::PRO::Task_NewTasks_ntf* Arena::CreateMaybeMessage<::PRO::Task_NewTasks_ntf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PRO {

enum TASK_TRIGGER_TYPE : int {
  TT_BEGIN = 0,
  TT_TRIGGER_TIMER = 1,
  TT_ROLEINFO_CHANGE = 2,
  TT_BAG_CHANGE = 4,
  TT_BUILDING_CHANGE = 8,
  TT_MAX = 9,
  TASK_TRIGGER_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TASK_TRIGGER_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TASK_TRIGGER_TYPE_IsValid(int value);
constexpr TASK_TRIGGER_TYPE TASK_TRIGGER_TYPE_MIN = TT_BEGIN;
constexpr TASK_TRIGGER_TYPE TASK_TRIGGER_TYPE_MAX = TT_MAX;
constexpr int TASK_TRIGGER_TYPE_ARRAYSIZE = TASK_TRIGGER_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TASK_TRIGGER_TYPE_descriptor();
template<typename T>
inline const std::string& TASK_TRIGGER_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TASK_TRIGGER_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TASK_TRIGGER_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TASK_TRIGGER_TYPE_descriptor(), enum_t_value);
}
inline bool TASK_TRIGGER_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TASK_TRIGGER_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TASK_TRIGGER_TYPE>(
    TASK_TRIGGER_TYPE_descriptor(), name, value);
}
// ===================================================================

class Task_NewTasks_ntf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Task_NewTasks_ntf) */ {
 public:
  inline Task_NewTasks_ntf() : Task_NewTasks_ntf(nullptr) {}
  ~Task_NewTasks_ntf() override;
  explicit constexpr Task_NewTasks_ntf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Task_NewTasks_ntf(const Task_NewTasks_ntf& from);
  Task_NewTasks_ntf(Task_NewTasks_ntf&& from) noexcept
    : Task_NewTasks_ntf() {
    *this = ::std::move(from);
  }

  inline Task_NewTasks_ntf& operator=(const Task_NewTasks_ntf& from) {
    CopyFrom(from);
    return *this;
  }
  inline Task_NewTasks_ntf& operator=(Task_NewTasks_ntf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Task_NewTasks_ntf& default_instance() {
    return *internal_default_instance();
  }
  static inline const Task_NewTasks_ntf* internal_default_instance() {
    return reinterpret_cast<const Task_NewTasks_ntf*>(
               &_Task_NewTasks_ntf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Task_NewTasks_ntf& a, Task_NewTasks_ntf& b) {
    a.Swap(&b);
  }
  inline void Swap(Task_NewTasks_ntf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Task_NewTasks_ntf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Task_NewTasks_ntf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Task_NewTasks_ntf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Task_NewTasks_ntf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Task_NewTasks_ntf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task_NewTasks_ntf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Task_NewTasks_ntf";
  }
  protected:
  explicit Task_NewTasks_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUtokenFieldNumber = 1,
  };
  // optional .PRO.UserToken utoken = 1;
  bool has_utoken() const;
  private:
  bool _internal_has_utoken() const;
  public:
  void clear_utoken();
  const ::PRO::UserToken& utoken() const;
  PROTOBUF_NODISCARD ::PRO::UserToken* release_utoken();
  ::PRO::UserToken* mutable_utoken();
  void set_allocated_utoken(::PRO::UserToken* utoken);
  private:
  const ::PRO::UserToken& _internal_utoken() const;
  ::PRO::UserToken* _internal_mutable_utoken();
  public:
  void unsafe_arena_set_allocated_utoken(
      ::PRO::UserToken* utoken);
  ::PRO::UserToken* unsafe_arena_release_utoken();

  // @@protoc_insertion_point(class_scope:PRO.Task_NewTasks_ntf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PRO::UserToken* utoken_;
  friend struct ::TableStruct_task_5fsystem_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Task_NewTasks_ntf

// optional .PRO.UserToken utoken = 1;
inline bool Task_NewTasks_ntf::_internal_has_utoken() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || utoken_ != nullptr);
  return value;
}
inline bool Task_NewTasks_ntf::has_utoken() const {
  return _internal_has_utoken();
}
inline const ::PRO::UserToken& Task_NewTasks_ntf::_internal_utoken() const {
  const ::PRO::UserToken* p = utoken_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::UserToken&>(
      ::PRO::_UserToken_default_instance_);
}
inline const ::PRO::UserToken& Task_NewTasks_ntf::utoken() const {
  // @@protoc_insertion_point(field_get:PRO.Task_NewTasks_ntf.utoken)
  return _internal_utoken();
}
inline void Task_NewTasks_ntf::unsafe_arena_set_allocated_utoken(
    ::PRO::UserToken* utoken) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  utoken_ = utoken;
  if (utoken) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.Task_NewTasks_ntf.utoken)
}
inline ::PRO::UserToken* Task_NewTasks_ntf::release_utoken() {
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::UserToken* Task_NewTasks_ntf::unsafe_arena_release_utoken() {
  // @@protoc_insertion_point(field_release:PRO.Task_NewTasks_ntf.utoken)
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
  return temp;
}
inline ::PRO::UserToken* Task_NewTasks_ntf::_internal_mutable_utoken() {
  _has_bits_[0] |= 0x00000001u;
  if (utoken_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::UserToken>(GetArenaForAllocation());
    utoken_ = p;
  }
  return utoken_;
}
inline ::PRO::UserToken* Task_NewTasks_ntf::mutable_utoken() {
  ::PRO::UserToken* _msg = _internal_mutable_utoken();
  // @@protoc_insertion_point(field_mutable:PRO.Task_NewTasks_ntf.utoken)
  return _msg;
}
inline void Task_NewTasks_ntf::set_allocated_utoken(::PRO::UserToken* utoken) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  if (utoken) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken));
    if (message_arena != submessage_arena) {
      utoken = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, utoken, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  utoken_ = utoken;
  // @@protoc_insertion_point(field_set_allocated:PRO.Task_NewTasks_ntf.utoken)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace PRO

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::PRO::TASK_TRIGGER_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PRO::TASK_TRIGGER_TYPE>() {
  return ::PRO::TASK_TRIGGER_TYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_task_5fsystem_2eproto

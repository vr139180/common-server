// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: res_internal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_res_5finternal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_res_5finternal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_res_5finternal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_res_5finternal_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_res_5finternal_2eproto;
namespace PRO {
class Res_ProxyUserSlot_ack;
struct Res_ProxyUserSlot_ackDefaultTypeInternal;
extern Res_ProxyUserSlot_ackDefaultTypeInternal _Res_ProxyUserSlot_ack_default_instance_;
class Res_ProxyUserSlot_req;
struct Res_ProxyUserSlot_reqDefaultTypeInternal;
extern Res_ProxyUserSlot_reqDefaultTypeInternal _Res_ProxyUserSlot_req_default_instance_;
class Res_SyncGateSlot_ntf;
struct Res_SyncGateSlot_ntfDefaultTypeInternal;
extern Res_SyncGateSlot_ntfDefaultTypeInternal _Res_SyncGateSlot_ntf_default_instance_;
class Res_UserSlot_ack;
struct Res_UserSlot_ackDefaultTypeInternal;
extern Res_UserSlot_ackDefaultTypeInternal _Res_UserSlot_ack_default_instance_;
class Res_UserSlot_req;
struct Res_UserSlot_reqDefaultTypeInternal;
extern Res_UserSlot_reqDefaultTypeInternal _Res_UserSlot_req_default_instance_;
}  // namespace PRO
PROTOBUF_NAMESPACE_OPEN
template<> ::PRO::Res_ProxyUserSlot_ack* Arena::CreateMaybeMessage<::PRO::Res_ProxyUserSlot_ack>(Arena*);
template<> ::PRO::Res_ProxyUserSlot_req* Arena::CreateMaybeMessage<::PRO::Res_ProxyUserSlot_req>(Arena*);
template<> ::PRO::Res_SyncGateSlot_ntf* Arena::CreateMaybeMessage<::PRO::Res_SyncGateSlot_ntf>(Arena*);
template<> ::PRO::Res_UserSlot_ack* Arena::CreateMaybeMessage<::PRO::Res_UserSlot_ack>(Arena*);
template<> ::PRO::Res_UserSlot_req* Arena::CreateMaybeMessage<::PRO::Res_UserSlot_req>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PRO {

// ===================================================================

class Res_UserSlot_req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Res_UserSlot_req) */ {
 public:
  inline Res_UserSlot_req() : Res_UserSlot_req(nullptr) {}
  ~Res_UserSlot_req() override;
  explicit constexpr Res_UserSlot_req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Res_UserSlot_req(const Res_UserSlot_req& from);
  Res_UserSlot_req(Res_UserSlot_req&& from) noexcept
    : Res_UserSlot_req() {
    *this = ::std::move(from);
  }

  inline Res_UserSlot_req& operator=(const Res_UserSlot_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Res_UserSlot_req& operator=(Res_UserSlot_req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Res_UserSlot_req& default_instance() {
    return *internal_default_instance();
  }
  static inline const Res_UserSlot_req* internal_default_instance() {
    return reinterpret_cast<const Res_UserSlot_req*>(
               &_Res_UserSlot_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Res_UserSlot_req& a, Res_UserSlot_req& b) {
    a.Swap(&b);
  }
  inline void Swap(Res_UserSlot_req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Res_UserSlot_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Res_UserSlot_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Res_UserSlot_req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Res_UserSlot_req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Res_UserSlot_req& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Res_UserSlot_req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Res_UserSlot_req";
  }
  protected:
  explicit Res_UserSlot_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLsnoFieldNumber = 1,
    kSequenceFieldNumber = 2,
    kUserIidFieldNumber = 3,
  };
  // int64 lsno = 1;
  void clear_lsno();
  int64_t lsno() const;
  void set_lsno(int64_t value);
  private:
  int64_t _internal_lsno() const;
  void _internal_set_lsno(int64_t value);
  public:

  // int64 sequence = 2;
  void clear_sequence();
  int64_t sequence() const;
  void set_sequence(int64_t value);
  private:
  int64_t _internal_sequence() const;
  void _internal_set_sequence(int64_t value);
  public:

  // int64 user_iid = 3;
  void clear_user_iid();
  int64_t user_iid() const;
  void set_user_iid(int64_t value);
  private:
  int64_t _internal_user_iid() const;
  void _internal_set_user_iid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.Res_UserSlot_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t lsno_;
  int64_t sequence_;
  int64_t user_iid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_res_5finternal_2eproto;
};
// -------------------------------------------------------------------

class Res_UserSlot_ack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Res_UserSlot_ack) */ {
 public:
  inline Res_UserSlot_ack() : Res_UserSlot_ack(nullptr) {}
  ~Res_UserSlot_ack() override;
  explicit constexpr Res_UserSlot_ack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Res_UserSlot_ack(const Res_UserSlot_ack& from);
  Res_UserSlot_ack(Res_UserSlot_ack&& from) noexcept
    : Res_UserSlot_ack() {
    *this = ::std::move(from);
  }

  inline Res_UserSlot_ack& operator=(const Res_UserSlot_ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Res_UserSlot_ack& operator=(Res_UserSlot_ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Res_UserSlot_ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Res_UserSlot_ack* internal_default_instance() {
    return reinterpret_cast<const Res_UserSlot_ack*>(
               &_Res_UserSlot_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Res_UserSlot_ack& a, Res_UserSlot_ack& b) {
    a.Swap(&b);
  }
  inline void Swap(Res_UserSlot_ack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Res_UserSlot_ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Res_UserSlot_ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Res_UserSlot_ack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Res_UserSlot_ack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Res_UserSlot_ack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Res_UserSlot_ack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Res_UserSlot_ack";
  }
  protected:
  explicit Res_UserSlot_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProxyipFieldNumber = 3,
    kResultFieldNumber = 1,
    kSlotFieldNumber = 2,
    kSlottokenFieldNumber = 5,
    kProxyportFieldNumber = 4,
    kLsnoFieldNumber = 20,
    kSequenceFieldNumber = 21,
    kUserIidFieldNumber = 22,
  };
  // optional string proxyip = 3;
  bool has_proxyip() const;
  private:
  bool _internal_has_proxyip() const;
  public:
  void clear_proxyip();
  const std::string& proxyip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proxyip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proxyip();
  PROTOBUF_NODISCARD std::string* release_proxyip();
  void set_allocated_proxyip(std::string* proxyip);
  private:
  const std::string& _internal_proxyip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proxyip(const std::string& value);
  std::string* _internal_mutable_proxyip();
  public:

  // int32 result = 1;
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // optional int32 slot = 2;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  int32_t slot() const;
  void set_slot(int32_t value);
  private:
  int32_t _internal_slot() const;
  void _internal_set_slot(int32_t value);
  public:

  // optional int64 slottoken = 5;
  bool has_slottoken() const;
  private:
  bool _internal_has_slottoken() const;
  public:
  void clear_slottoken();
  int64_t slottoken() const;
  void set_slottoken(int64_t value);
  private:
  int64_t _internal_slottoken() const;
  void _internal_set_slottoken(int64_t value);
  public:

  // optional int32 proxyport = 4;
  bool has_proxyport() const;
  private:
  bool _internal_has_proxyport() const;
  public:
  void clear_proxyport();
  int32_t proxyport() const;
  void set_proxyport(int32_t value);
  private:
  int32_t _internal_proxyport() const;
  void _internal_set_proxyport(int32_t value);
  public:

  // int64 lsno = 20;
  void clear_lsno();
  int64_t lsno() const;
  void set_lsno(int64_t value);
  private:
  int64_t _internal_lsno() const;
  void _internal_set_lsno(int64_t value);
  public:

  // int64 sequence = 21;
  void clear_sequence();
  int64_t sequence() const;
  void set_sequence(int64_t value);
  private:
  int64_t _internal_sequence() const;
  void _internal_set_sequence(int64_t value);
  public:

  // int64 user_iid = 22;
  void clear_user_iid();
  int64_t user_iid() const;
  void set_user_iid(int64_t value);
  private:
  int64_t _internal_user_iid() const;
  void _internal_set_user_iid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.Res_UserSlot_ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proxyip_;
  int32_t result_;
  int32_t slot_;
  int64_t slottoken_;
  int32_t proxyport_;
  int64_t lsno_;
  int64_t sequence_;
  int64_t user_iid_;
  friend struct ::TableStruct_res_5finternal_2eproto;
};
// -------------------------------------------------------------------

class Res_ProxyUserSlot_req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Res_ProxyUserSlot_req) */ {
 public:
  inline Res_ProxyUserSlot_req() : Res_ProxyUserSlot_req(nullptr) {}
  ~Res_ProxyUserSlot_req() override;
  explicit constexpr Res_ProxyUserSlot_req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Res_ProxyUserSlot_req(const Res_ProxyUserSlot_req& from);
  Res_ProxyUserSlot_req(Res_ProxyUserSlot_req&& from) noexcept
    : Res_ProxyUserSlot_req() {
    *this = ::std::move(from);
  }

  inline Res_ProxyUserSlot_req& operator=(const Res_ProxyUserSlot_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Res_ProxyUserSlot_req& operator=(Res_ProxyUserSlot_req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Res_ProxyUserSlot_req& default_instance() {
    return *internal_default_instance();
  }
  static inline const Res_ProxyUserSlot_req* internal_default_instance() {
    return reinterpret_cast<const Res_ProxyUserSlot_req*>(
               &_Res_ProxyUserSlot_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Res_ProxyUserSlot_req& a, Res_ProxyUserSlot_req& b) {
    a.Swap(&b);
  }
  inline void Swap(Res_ProxyUserSlot_req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Res_ProxyUserSlot_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Res_ProxyUserSlot_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Res_ProxyUserSlot_req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Res_ProxyUserSlot_req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Res_ProxyUserSlot_req& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Res_ProxyUserSlot_req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Res_ProxyUserSlot_req";
  }
  protected:
  explicit Res_ProxyUserSlot_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProxytokenFieldNumber = 10,
    kHgtypeFieldNumber = 13,
    kHomeiidFieldNumber = 11,
    kGateiidFieldNumber = 12,
    kLsnoFieldNumber = 20,
    kSequenceFieldNumber = 21,
    kUserIidFieldNumber = 22,
  };
  // string proxytoken = 10;
  void clear_proxytoken();
  const std::string& proxytoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proxytoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proxytoken();
  PROTOBUF_NODISCARD std::string* release_proxytoken();
  void set_allocated_proxytoken(std::string* proxytoken);
  private:
  const std::string& _internal_proxytoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proxytoken(const std::string& value);
  std::string* _internal_mutable_proxytoken();
  public:

  // int32 hgtype = 13;
  void clear_hgtype();
  int32_t hgtype() const;
  void set_hgtype(int32_t value);
  private:
  int32_t _internal_hgtype() const;
  void _internal_set_hgtype(int32_t value);
  public:

  // int64 homeiid = 11;
  void clear_homeiid();
  int64_t homeiid() const;
  void set_homeiid(int64_t value);
  private:
  int64_t _internal_homeiid() const;
  void _internal_set_homeiid(int64_t value);
  public:

  // int64 gateiid = 12;
  void clear_gateiid();
  int64_t gateiid() const;
  void set_gateiid(int64_t value);
  private:
  int64_t _internal_gateiid() const;
  void _internal_set_gateiid(int64_t value);
  public:

  // int64 lsno = 20;
  void clear_lsno();
  int64_t lsno() const;
  void set_lsno(int64_t value);
  private:
  int64_t _internal_lsno() const;
  void _internal_set_lsno(int64_t value);
  public:

  // int64 sequence = 21;
  void clear_sequence();
  int64_t sequence() const;
  void set_sequence(int64_t value);
  private:
  int64_t _internal_sequence() const;
  void _internal_set_sequence(int64_t value);
  public:

  // int64 user_iid = 22;
  void clear_user_iid();
  int64_t user_iid() const;
  void set_user_iid(int64_t value);
  private:
  int64_t _internal_user_iid() const;
  void _internal_set_user_iid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.Res_ProxyUserSlot_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proxytoken_;
  int32_t hgtype_;
  int64_t homeiid_;
  int64_t gateiid_;
  int64_t lsno_;
  int64_t sequence_;
  int64_t user_iid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_res_5finternal_2eproto;
};
// -------------------------------------------------------------------

class Res_ProxyUserSlot_ack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Res_ProxyUserSlot_ack) */ {
 public:
  inline Res_ProxyUserSlot_ack() : Res_ProxyUserSlot_ack(nullptr) {}
  ~Res_ProxyUserSlot_ack() override;
  explicit constexpr Res_ProxyUserSlot_ack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Res_ProxyUserSlot_ack(const Res_ProxyUserSlot_ack& from);
  Res_ProxyUserSlot_ack(Res_ProxyUserSlot_ack&& from) noexcept
    : Res_ProxyUserSlot_ack() {
    *this = ::std::move(from);
  }

  inline Res_ProxyUserSlot_ack& operator=(const Res_ProxyUserSlot_ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Res_ProxyUserSlot_ack& operator=(Res_ProxyUserSlot_ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Res_ProxyUserSlot_ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Res_ProxyUserSlot_ack* internal_default_instance() {
    return reinterpret_cast<const Res_ProxyUserSlot_ack*>(
               &_Res_ProxyUserSlot_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Res_ProxyUserSlot_ack& a, Res_ProxyUserSlot_ack& b) {
    a.Swap(&b);
  }
  inline void Swap(Res_ProxyUserSlot_ack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Res_ProxyUserSlot_ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Res_ProxyUserSlot_ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Res_ProxyUserSlot_ack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Res_ProxyUserSlot_ack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Res_ProxyUserSlot_ack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Res_ProxyUserSlot_ack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Res_ProxyUserSlot_ack";
  }
  protected:
  explicit Res_ProxyUserSlot_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProxyipFieldNumber = 3,
    kProxytokenFieldNumber = 10,
    kResultFieldNumber = 1,
    kSlotFieldNumber = 2,
    kSlottokenFieldNumber = 5,
    kProxyportFieldNumber = 4,
    kHgtypeFieldNumber = 13,
    kHomeiidFieldNumber = 11,
    kGateiidFieldNumber = 12,
    kLsnoFieldNumber = 20,
    kSequenceFieldNumber = 21,
    kUserIidFieldNumber = 22,
  };
  // optional string proxyip = 3;
  bool has_proxyip() const;
  private:
  bool _internal_has_proxyip() const;
  public:
  void clear_proxyip();
  const std::string& proxyip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proxyip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proxyip();
  PROTOBUF_NODISCARD std::string* release_proxyip();
  void set_allocated_proxyip(std::string* proxyip);
  private:
  const std::string& _internal_proxyip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proxyip(const std::string& value);
  std::string* _internal_mutable_proxyip();
  public:

  // string proxytoken = 10;
  void clear_proxytoken();
  const std::string& proxytoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proxytoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proxytoken();
  PROTOBUF_NODISCARD std::string* release_proxytoken();
  void set_allocated_proxytoken(std::string* proxytoken);
  private:
  const std::string& _internal_proxytoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proxytoken(const std::string& value);
  std::string* _internal_mutable_proxytoken();
  public:

  // int32 result = 1;
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // optional int32 slot = 2;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  int32_t slot() const;
  void set_slot(int32_t value);
  private:
  int32_t _internal_slot() const;
  void _internal_set_slot(int32_t value);
  public:

  // optional int64 slottoken = 5;
  bool has_slottoken() const;
  private:
  bool _internal_has_slottoken() const;
  public:
  void clear_slottoken();
  int64_t slottoken() const;
  void set_slottoken(int64_t value);
  private:
  int64_t _internal_slottoken() const;
  void _internal_set_slottoken(int64_t value);
  public:

  // optional int32 proxyport = 4;
  bool has_proxyport() const;
  private:
  bool _internal_has_proxyport() const;
  public:
  void clear_proxyport();
  int32_t proxyport() const;
  void set_proxyport(int32_t value);
  private:
  int32_t _internal_proxyport() const;
  void _internal_set_proxyport(int32_t value);
  public:

  // int32 hgtype = 13;
  void clear_hgtype();
  int32_t hgtype() const;
  void set_hgtype(int32_t value);
  private:
  int32_t _internal_hgtype() const;
  void _internal_set_hgtype(int32_t value);
  public:

  // int64 homeiid = 11;
  void clear_homeiid();
  int64_t homeiid() const;
  void set_homeiid(int64_t value);
  private:
  int64_t _internal_homeiid() const;
  void _internal_set_homeiid(int64_t value);
  public:

  // int64 gateiid = 12;
  void clear_gateiid();
  int64_t gateiid() const;
  void set_gateiid(int64_t value);
  private:
  int64_t _internal_gateiid() const;
  void _internal_set_gateiid(int64_t value);
  public:

  // int64 lsno = 20;
  void clear_lsno();
  int64_t lsno() const;
  void set_lsno(int64_t value);
  private:
  int64_t _internal_lsno() const;
  void _internal_set_lsno(int64_t value);
  public:

  // int64 sequence = 21;
  void clear_sequence();
  int64_t sequence() const;
  void set_sequence(int64_t value);
  private:
  int64_t _internal_sequence() const;
  void _internal_set_sequence(int64_t value);
  public:

  // int64 user_iid = 22;
  void clear_user_iid();
  int64_t user_iid() const;
  void set_user_iid(int64_t value);
  private:
  int64_t _internal_user_iid() const;
  void _internal_set_user_iid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.Res_ProxyUserSlot_ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proxyip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proxytoken_;
  int32_t result_;
  int32_t slot_;
  int64_t slottoken_;
  int32_t proxyport_;
  int32_t hgtype_;
  int64_t homeiid_;
  int64_t gateiid_;
  int64_t lsno_;
  int64_t sequence_;
  int64_t user_iid_;
  friend struct ::TableStruct_res_5finternal_2eproto;
};
// -------------------------------------------------------------------

class Res_SyncGateSlot_ntf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Res_SyncGateSlot_ntf) */ {
 public:
  inline Res_SyncGateSlot_ntf() : Res_SyncGateSlot_ntf(nullptr) {}
  ~Res_SyncGateSlot_ntf() override;
  explicit constexpr Res_SyncGateSlot_ntf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Res_SyncGateSlot_ntf(const Res_SyncGateSlot_ntf& from);
  Res_SyncGateSlot_ntf(Res_SyncGateSlot_ntf&& from) noexcept
    : Res_SyncGateSlot_ntf() {
    *this = ::std::move(from);
  }

  inline Res_SyncGateSlot_ntf& operator=(const Res_SyncGateSlot_ntf& from) {
    CopyFrom(from);
    return *this;
  }
  inline Res_SyncGateSlot_ntf& operator=(Res_SyncGateSlot_ntf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Res_SyncGateSlot_ntf& default_instance() {
    return *internal_default_instance();
  }
  static inline const Res_SyncGateSlot_ntf* internal_default_instance() {
    return reinterpret_cast<const Res_SyncGateSlot_ntf*>(
               &_Res_SyncGateSlot_ntf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Res_SyncGateSlot_ntf& a, Res_SyncGateSlot_ntf& b) {
    a.Swap(&b);
  }
  inline void Swap(Res_SyncGateSlot_ntf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Res_SyncGateSlot_ntf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Res_SyncGateSlot_ntf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Res_SyncGateSlot_ntf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Res_SyncGateSlot_ntf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Res_SyncGateSlot_ntf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Res_SyncGateSlot_ntf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Res_SyncGateSlot_ntf";
  }
  protected:
  explicit Res_SyncGateSlot_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSyncsequenceFieldNumber = 2,
    kHomeiidFieldNumber = 4,
    kGateiidFieldNumber = 5,
    kFreeslotsFieldNumber = 1,
  };
  // int64 syncsequence = 2;
  void clear_syncsequence();
  int64_t syncsequence() const;
  void set_syncsequence(int64_t value);
  private:
  int64_t _internal_syncsequence() const;
  void _internal_set_syncsequence(int64_t value);
  public:

  // int64 homeiid = 4;
  void clear_homeiid();
  int64_t homeiid() const;
  void set_homeiid(int64_t value);
  private:
  int64_t _internal_homeiid() const;
  void _internal_set_homeiid(int64_t value);
  public:

  // int64 gateiid = 5;
  void clear_gateiid();
  int64_t gateiid() const;
  void set_gateiid(int64_t value);
  private:
  int64_t _internal_gateiid() const;
  void _internal_set_gateiid(int64_t value);
  public:

  // int32 freeslots = 1;
  void clear_freeslots();
  int32_t freeslots() const;
  void set_freeslots(int32_t value);
  private:
  int32_t _internal_freeslots() const;
  void _internal_set_freeslots(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.Res_SyncGateSlot_ntf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t syncsequence_;
  int64_t homeiid_;
  int64_t gateiid_;
  int32_t freeslots_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_res_5finternal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Res_UserSlot_req

// int64 lsno = 1;
inline void Res_UserSlot_req::clear_lsno() {
  lsno_ = int64_t{0};
}
inline int64_t Res_UserSlot_req::_internal_lsno() const {
  return lsno_;
}
inline int64_t Res_UserSlot_req::lsno() const {
  // @@protoc_insertion_point(field_get:PRO.Res_UserSlot_req.lsno)
  return _internal_lsno();
}
inline void Res_UserSlot_req::_internal_set_lsno(int64_t value) {
  
  lsno_ = value;
}
inline void Res_UserSlot_req::set_lsno(int64_t value) {
  _internal_set_lsno(value);
  // @@protoc_insertion_point(field_set:PRO.Res_UserSlot_req.lsno)
}

// int64 sequence = 2;
inline void Res_UserSlot_req::clear_sequence() {
  sequence_ = int64_t{0};
}
inline int64_t Res_UserSlot_req::_internal_sequence() const {
  return sequence_;
}
inline int64_t Res_UserSlot_req::sequence() const {
  // @@protoc_insertion_point(field_get:PRO.Res_UserSlot_req.sequence)
  return _internal_sequence();
}
inline void Res_UserSlot_req::_internal_set_sequence(int64_t value) {
  
  sequence_ = value;
}
inline void Res_UserSlot_req::set_sequence(int64_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:PRO.Res_UserSlot_req.sequence)
}

// int64 user_iid = 3;
inline void Res_UserSlot_req::clear_user_iid() {
  user_iid_ = int64_t{0};
}
inline int64_t Res_UserSlot_req::_internal_user_iid() const {
  return user_iid_;
}
inline int64_t Res_UserSlot_req::user_iid() const {
  // @@protoc_insertion_point(field_get:PRO.Res_UserSlot_req.user_iid)
  return _internal_user_iid();
}
inline void Res_UserSlot_req::_internal_set_user_iid(int64_t value) {
  
  user_iid_ = value;
}
inline void Res_UserSlot_req::set_user_iid(int64_t value) {
  _internal_set_user_iid(value);
  // @@protoc_insertion_point(field_set:PRO.Res_UserSlot_req.user_iid)
}

// -------------------------------------------------------------------

// Res_UserSlot_ack

// int32 result = 1;
inline void Res_UserSlot_ack::clear_result() {
  result_ = 0;
}
inline int32_t Res_UserSlot_ack::_internal_result() const {
  return result_;
}
inline int32_t Res_UserSlot_ack::result() const {
  // @@protoc_insertion_point(field_get:PRO.Res_UserSlot_ack.result)
  return _internal_result();
}
inline void Res_UserSlot_ack::_internal_set_result(int32_t value) {
  
  result_ = value;
}
inline void Res_UserSlot_ack::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:PRO.Res_UserSlot_ack.result)
}

// optional int32 slot = 2;
inline bool Res_UserSlot_ack::_internal_has_slot() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Res_UserSlot_ack::has_slot() const {
  return _internal_has_slot();
}
inline void Res_UserSlot_ack::clear_slot() {
  slot_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t Res_UserSlot_ack::_internal_slot() const {
  return slot_;
}
inline int32_t Res_UserSlot_ack::slot() const {
  // @@protoc_insertion_point(field_get:PRO.Res_UserSlot_ack.slot)
  return _internal_slot();
}
inline void Res_UserSlot_ack::_internal_set_slot(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  slot_ = value;
}
inline void Res_UserSlot_ack::set_slot(int32_t value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:PRO.Res_UserSlot_ack.slot)
}

// optional string proxyip = 3;
inline bool Res_UserSlot_ack::_internal_has_proxyip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Res_UserSlot_ack::has_proxyip() const {
  return _internal_has_proxyip();
}
inline void Res_UserSlot_ack::clear_proxyip() {
  proxyip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Res_UserSlot_ack::proxyip() const {
  // @@protoc_insertion_point(field_get:PRO.Res_UserSlot_ack.proxyip)
  return _internal_proxyip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Res_UserSlot_ack::set_proxyip(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 proxyip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.Res_UserSlot_ack.proxyip)
}
inline std::string* Res_UserSlot_ack::mutable_proxyip() {
  std::string* _s = _internal_mutable_proxyip();
  // @@protoc_insertion_point(field_mutable:PRO.Res_UserSlot_ack.proxyip)
  return _s;
}
inline const std::string& Res_UserSlot_ack::_internal_proxyip() const {
  return proxyip_.Get();
}
inline void Res_UserSlot_ack::_internal_set_proxyip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  proxyip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Res_UserSlot_ack::_internal_mutable_proxyip() {
  _has_bits_[0] |= 0x00000001u;
  return proxyip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Res_UserSlot_ack::release_proxyip() {
  // @@protoc_insertion_point(field_release:PRO.Res_UserSlot_ack.proxyip)
  if (!_internal_has_proxyip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = proxyip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (proxyip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    proxyip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Res_UserSlot_ack::set_allocated_proxyip(std::string* proxyip) {
  if (proxyip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  proxyip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proxyip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (proxyip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    proxyip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.Res_UserSlot_ack.proxyip)
}

// optional int32 proxyport = 4;
inline bool Res_UserSlot_ack::_internal_has_proxyport() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Res_UserSlot_ack::has_proxyport() const {
  return _internal_has_proxyport();
}
inline void Res_UserSlot_ack::clear_proxyport() {
  proxyport_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t Res_UserSlot_ack::_internal_proxyport() const {
  return proxyport_;
}
inline int32_t Res_UserSlot_ack::proxyport() const {
  // @@protoc_insertion_point(field_get:PRO.Res_UserSlot_ack.proxyport)
  return _internal_proxyport();
}
inline void Res_UserSlot_ack::_internal_set_proxyport(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  proxyport_ = value;
}
inline void Res_UserSlot_ack::set_proxyport(int32_t value) {
  _internal_set_proxyport(value);
  // @@protoc_insertion_point(field_set:PRO.Res_UserSlot_ack.proxyport)
}

// optional int64 slottoken = 5;
inline bool Res_UserSlot_ack::_internal_has_slottoken() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Res_UserSlot_ack::has_slottoken() const {
  return _internal_has_slottoken();
}
inline void Res_UserSlot_ack::clear_slottoken() {
  slottoken_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t Res_UserSlot_ack::_internal_slottoken() const {
  return slottoken_;
}
inline int64_t Res_UserSlot_ack::slottoken() const {
  // @@protoc_insertion_point(field_get:PRO.Res_UserSlot_ack.slottoken)
  return _internal_slottoken();
}
inline void Res_UserSlot_ack::_internal_set_slottoken(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  slottoken_ = value;
}
inline void Res_UserSlot_ack::set_slottoken(int64_t value) {
  _internal_set_slottoken(value);
  // @@protoc_insertion_point(field_set:PRO.Res_UserSlot_ack.slottoken)
}

// int64 lsno = 20;
inline void Res_UserSlot_ack::clear_lsno() {
  lsno_ = int64_t{0};
}
inline int64_t Res_UserSlot_ack::_internal_lsno() const {
  return lsno_;
}
inline int64_t Res_UserSlot_ack::lsno() const {
  // @@protoc_insertion_point(field_get:PRO.Res_UserSlot_ack.lsno)
  return _internal_lsno();
}
inline void Res_UserSlot_ack::_internal_set_lsno(int64_t value) {
  
  lsno_ = value;
}
inline void Res_UserSlot_ack::set_lsno(int64_t value) {
  _internal_set_lsno(value);
  // @@protoc_insertion_point(field_set:PRO.Res_UserSlot_ack.lsno)
}

// int64 sequence = 21;
inline void Res_UserSlot_ack::clear_sequence() {
  sequence_ = int64_t{0};
}
inline int64_t Res_UserSlot_ack::_internal_sequence() const {
  return sequence_;
}
inline int64_t Res_UserSlot_ack::sequence() const {
  // @@protoc_insertion_point(field_get:PRO.Res_UserSlot_ack.sequence)
  return _internal_sequence();
}
inline void Res_UserSlot_ack::_internal_set_sequence(int64_t value) {
  
  sequence_ = value;
}
inline void Res_UserSlot_ack::set_sequence(int64_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:PRO.Res_UserSlot_ack.sequence)
}

// int64 user_iid = 22;
inline void Res_UserSlot_ack::clear_user_iid() {
  user_iid_ = int64_t{0};
}
inline int64_t Res_UserSlot_ack::_internal_user_iid() const {
  return user_iid_;
}
inline int64_t Res_UserSlot_ack::user_iid() const {
  // @@protoc_insertion_point(field_get:PRO.Res_UserSlot_ack.user_iid)
  return _internal_user_iid();
}
inline void Res_UserSlot_ack::_internal_set_user_iid(int64_t value) {
  
  user_iid_ = value;
}
inline void Res_UserSlot_ack::set_user_iid(int64_t value) {
  _internal_set_user_iid(value);
  // @@protoc_insertion_point(field_set:PRO.Res_UserSlot_ack.user_iid)
}

// -------------------------------------------------------------------

// Res_ProxyUserSlot_req

// string proxytoken = 10;
inline void Res_ProxyUserSlot_req::clear_proxytoken() {
  proxytoken_.ClearToEmpty();
}
inline const std::string& Res_ProxyUserSlot_req::proxytoken() const {
  // @@protoc_insertion_point(field_get:PRO.Res_ProxyUserSlot_req.proxytoken)
  return _internal_proxytoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Res_ProxyUserSlot_req::set_proxytoken(ArgT0&& arg0, ArgT... args) {
 
 proxytoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.Res_ProxyUserSlot_req.proxytoken)
}
inline std::string* Res_ProxyUserSlot_req::mutable_proxytoken() {
  std::string* _s = _internal_mutable_proxytoken();
  // @@protoc_insertion_point(field_mutable:PRO.Res_ProxyUserSlot_req.proxytoken)
  return _s;
}
inline const std::string& Res_ProxyUserSlot_req::_internal_proxytoken() const {
  return proxytoken_.Get();
}
inline void Res_ProxyUserSlot_req::_internal_set_proxytoken(const std::string& value) {
  
  proxytoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Res_ProxyUserSlot_req::_internal_mutable_proxytoken() {
  
  return proxytoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Res_ProxyUserSlot_req::release_proxytoken() {
  // @@protoc_insertion_point(field_release:PRO.Res_ProxyUserSlot_req.proxytoken)
  return proxytoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Res_ProxyUserSlot_req::set_allocated_proxytoken(std::string* proxytoken) {
  if (proxytoken != nullptr) {
    
  } else {
    
  }
  proxytoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proxytoken,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (proxytoken_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    proxytoken_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.Res_ProxyUserSlot_req.proxytoken)
}

// int64 homeiid = 11;
inline void Res_ProxyUserSlot_req::clear_homeiid() {
  homeiid_ = int64_t{0};
}
inline int64_t Res_ProxyUserSlot_req::_internal_homeiid() const {
  return homeiid_;
}
inline int64_t Res_ProxyUserSlot_req::homeiid() const {
  // @@protoc_insertion_point(field_get:PRO.Res_ProxyUserSlot_req.homeiid)
  return _internal_homeiid();
}
inline void Res_ProxyUserSlot_req::_internal_set_homeiid(int64_t value) {
  
  homeiid_ = value;
}
inline void Res_ProxyUserSlot_req::set_homeiid(int64_t value) {
  _internal_set_homeiid(value);
  // @@protoc_insertion_point(field_set:PRO.Res_ProxyUserSlot_req.homeiid)
}

// int64 gateiid = 12;
inline void Res_ProxyUserSlot_req::clear_gateiid() {
  gateiid_ = int64_t{0};
}
inline int64_t Res_ProxyUserSlot_req::_internal_gateiid() const {
  return gateiid_;
}
inline int64_t Res_ProxyUserSlot_req::gateiid() const {
  // @@protoc_insertion_point(field_get:PRO.Res_ProxyUserSlot_req.gateiid)
  return _internal_gateiid();
}
inline void Res_ProxyUserSlot_req::_internal_set_gateiid(int64_t value) {
  
  gateiid_ = value;
}
inline void Res_ProxyUserSlot_req::set_gateiid(int64_t value) {
  _internal_set_gateiid(value);
  // @@protoc_insertion_point(field_set:PRO.Res_ProxyUserSlot_req.gateiid)
}

// int32 hgtype = 13;
inline void Res_ProxyUserSlot_req::clear_hgtype() {
  hgtype_ = 0;
}
inline int32_t Res_ProxyUserSlot_req::_internal_hgtype() const {
  return hgtype_;
}
inline int32_t Res_ProxyUserSlot_req::hgtype() const {
  // @@protoc_insertion_point(field_get:PRO.Res_ProxyUserSlot_req.hgtype)
  return _internal_hgtype();
}
inline void Res_ProxyUserSlot_req::_internal_set_hgtype(int32_t value) {
  
  hgtype_ = value;
}
inline void Res_ProxyUserSlot_req::set_hgtype(int32_t value) {
  _internal_set_hgtype(value);
  // @@protoc_insertion_point(field_set:PRO.Res_ProxyUserSlot_req.hgtype)
}

// int64 lsno = 20;
inline void Res_ProxyUserSlot_req::clear_lsno() {
  lsno_ = int64_t{0};
}
inline int64_t Res_ProxyUserSlot_req::_internal_lsno() const {
  return lsno_;
}
inline int64_t Res_ProxyUserSlot_req::lsno() const {
  // @@protoc_insertion_point(field_get:PRO.Res_ProxyUserSlot_req.lsno)
  return _internal_lsno();
}
inline void Res_ProxyUserSlot_req::_internal_set_lsno(int64_t value) {
  
  lsno_ = value;
}
inline void Res_ProxyUserSlot_req::set_lsno(int64_t value) {
  _internal_set_lsno(value);
  // @@protoc_insertion_point(field_set:PRO.Res_ProxyUserSlot_req.lsno)
}

// int64 sequence = 21;
inline void Res_ProxyUserSlot_req::clear_sequence() {
  sequence_ = int64_t{0};
}
inline int64_t Res_ProxyUserSlot_req::_internal_sequence() const {
  return sequence_;
}
inline int64_t Res_ProxyUserSlot_req::sequence() const {
  // @@protoc_insertion_point(field_get:PRO.Res_ProxyUserSlot_req.sequence)
  return _internal_sequence();
}
inline void Res_ProxyUserSlot_req::_internal_set_sequence(int64_t value) {
  
  sequence_ = value;
}
inline void Res_ProxyUserSlot_req::set_sequence(int64_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:PRO.Res_ProxyUserSlot_req.sequence)
}

// int64 user_iid = 22;
inline void Res_ProxyUserSlot_req::clear_user_iid() {
  user_iid_ = int64_t{0};
}
inline int64_t Res_ProxyUserSlot_req::_internal_user_iid() const {
  return user_iid_;
}
inline int64_t Res_ProxyUserSlot_req::user_iid() const {
  // @@protoc_insertion_point(field_get:PRO.Res_ProxyUserSlot_req.user_iid)
  return _internal_user_iid();
}
inline void Res_ProxyUserSlot_req::_internal_set_user_iid(int64_t value) {
  
  user_iid_ = value;
}
inline void Res_ProxyUserSlot_req::set_user_iid(int64_t value) {
  _internal_set_user_iid(value);
  // @@protoc_insertion_point(field_set:PRO.Res_ProxyUserSlot_req.user_iid)
}

// -------------------------------------------------------------------

// Res_ProxyUserSlot_ack

// int32 result = 1;
inline void Res_ProxyUserSlot_ack::clear_result() {
  result_ = 0;
}
inline int32_t Res_ProxyUserSlot_ack::_internal_result() const {
  return result_;
}
inline int32_t Res_ProxyUserSlot_ack::result() const {
  // @@protoc_insertion_point(field_get:PRO.Res_ProxyUserSlot_ack.result)
  return _internal_result();
}
inline void Res_ProxyUserSlot_ack::_internal_set_result(int32_t value) {
  
  result_ = value;
}
inline void Res_ProxyUserSlot_ack::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:PRO.Res_ProxyUserSlot_ack.result)
}

// optional int32 slot = 2;
inline bool Res_ProxyUserSlot_ack::_internal_has_slot() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Res_ProxyUserSlot_ack::has_slot() const {
  return _internal_has_slot();
}
inline void Res_ProxyUserSlot_ack::clear_slot() {
  slot_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t Res_ProxyUserSlot_ack::_internal_slot() const {
  return slot_;
}
inline int32_t Res_ProxyUserSlot_ack::slot() const {
  // @@protoc_insertion_point(field_get:PRO.Res_ProxyUserSlot_ack.slot)
  return _internal_slot();
}
inline void Res_ProxyUserSlot_ack::_internal_set_slot(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  slot_ = value;
}
inline void Res_ProxyUserSlot_ack::set_slot(int32_t value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:PRO.Res_ProxyUserSlot_ack.slot)
}

// optional string proxyip = 3;
inline bool Res_ProxyUserSlot_ack::_internal_has_proxyip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Res_ProxyUserSlot_ack::has_proxyip() const {
  return _internal_has_proxyip();
}
inline void Res_ProxyUserSlot_ack::clear_proxyip() {
  proxyip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Res_ProxyUserSlot_ack::proxyip() const {
  // @@protoc_insertion_point(field_get:PRO.Res_ProxyUserSlot_ack.proxyip)
  return _internal_proxyip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Res_ProxyUserSlot_ack::set_proxyip(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 proxyip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.Res_ProxyUserSlot_ack.proxyip)
}
inline std::string* Res_ProxyUserSlot_ack::mutable_proxyip() {
  std::string* _s = _internal_mutable_proxyip();
  // @@protoc_insertion_point(field_mutable:PRO.Res_ProxyUserSlot_ack.proxyip)
  return _s;
}
inline const std::string& Res_ProxyUserSlot_ack::_internal_proxyip() const {
  return proxyip_.Get();
}
inline void Res_ProxyUserSlot_ack::_internal_set_proxyip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  proxyip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Res_ProxyUserSlot_ack::_internal_mutable_proxyip() {
  _has_bits_[0] |= 0x00000001u;
  return proxyip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Res_ProxyUserSlot_ack::release_proxyip() {
  // @@protoc_insertion_point(field_release:PRO.Res_ProxyUserSlot_ack.proxyip)
  if (!_internal_has_proxyip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = proxyip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (proxyip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    proxyip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Res_ProxyUserSlot_ack::set_allocated_proxyip(std::string* proxyip) {
  if (proxyip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  proxyip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proxyip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (proxyip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    proxyip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.Res_ProxyUserSlot_ack.proxyip)
}

// optional int32 proxyport = 4;
inline bool Res_ProxyUserSlot_ack::_internal_has_proxyport() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Res_ProxyUserSlot_ack::has_proxyport() const {
  return _internal_has_proxyport();
}
inline void Res_ProxyUserSlot_ack::clear_proxyport() {
  proxyport_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t Res_ProxyUserSlot_ack::_internal_proxyport() const {
  return proxyport_;
}
inline int32_t Res_ProxyUserSlot_ack::proxyport() const {
  // @@protoc_insertion_point(field_get:PRO.Res_ProxyUserSlot_ack.proxyport)
  return _internal_proxyport();
}
inline void Res_ProxyUserSlot_ack::_internal_set_proxyport(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  proxyport_ = value;
}
inline void Res_ProxyUserSlot_ack::set_proxyport(int32_t value) {
  _internal_set_proxyport(value);
  // @@protoc_insertion_point(field_set:PRO.Res_ProxyUserSlot_ack.proxyport)
}

// optional int64 slottoken = 5;
inline bool Res_ProxyUserSlot_ack::_internal_has_slottoken() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Res_ProxyUserSlot_ack::has_slottoken() const {
  return _internal_has_slottoken();
}
inline void Res_ProxyUserSlot_ack::clear_slottoken() {
  slottoken_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t Res_ProxyUserSlot_ack::_internal_slottoken() const {
  return slottoken_;
}
inline int64_t Res_ProxyUserSlot_ack::slottoken() const {
  // @@protoc_insertion_point(field_get:PRO.Res_ProxyUserSlot_ack.slottoken)
  return _internal_slottoken();
}
inline void Res_ProxyUserSlot_ack::_internal_set_slottoken(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  slottoken_ = value;
}
inline void Res_ProxyUserSlot_ack::set_slottoken(int64_t value) {
  _internal_set_slottoken(value);
  // @@protoc_insertion_point(field_set:PRO.Res_ProxyUserSlot_ack.slottoken)
}

// string proxytoken = 10;
inline void Res_ProxyUserSlot_ack::clear_proxytoken() {
  proxytoken_.ClearToEmpty();
}
inline const std::string& Res_ProxyUserSlot_ack::proxytoken() const {
  // @@protoc_insertion_point(field_get:PRO.Res_ProxyUserSlot_ack.proxytoken)
  return _internal_proxytoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Res_ProxyUserSlot_ack::set_proxytoken(ArgT0&& arg0, ArgT... args) {
 
 proxytoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.Res_ProxyUserSlot_ack.proxytoken)
}
inline std::string* Res_ProxyUserSlot_ack::mutable_proxytoken() {
  std::string* _s = _internal_mutable_proxytoken();
  // @@protoc_insertion_point(field_mutable:PRO.Res_ProxyUserSlot_ack.proxytoken)
  return _s;
}
inline const std::string& Res_ProxyUserSlot_ack::_internal_proxytoken() const {
  return proxytoken_.Get();
}
inline void Res_ProxyUserSlot_ack::_internal_set_proxytoken(const std::string& value) {
  
  proxytoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Res_ProxyUserSlot_ack::_internal_mutable_proxytoken() {
  
  return proxytoken_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Res_ProxyUserSlot_ack::release_proxytoken() {
  // @@protoc_insertion_point(field_release:PRO.Res_ProxyUserSlot_ack.proxytoken)
  return proxytoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Res_ProxyUserSlot_ack::set_allocated_proxytoken(std::string* proxytoken) {
  if (proxytoken != nullptr) {
    
  } else {
    
  }
  proxytoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proxytoken,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (proxytoken_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    proxytoken_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.Res_ProxyUserSlot_ack.proxytoken)
}

// int64 homeiid = 11;
inline void Res_ProxyUserSlot_ack::clear_homeiid() {
  homeiid_ = int64_t{0};
}
inline int64_t Res_ProxyUserSlot_ack::_internal_homeiid() const {
  return homeiid_;
}
inline int64_t Res_ProxyUserSlot_ack::homeiid() const {
  // @@protoc_insertion_point(field_get:PRO.Res_ProxyUserSlot_ack.homeiid)
  return _internal_homeiid();
}
inline void Res_ProxyUserSlot_ack::_internal_set_homeiid(int64_t value) {
  
  homeiid_ = value;
}
inline void Res_ProxyUserSlot_ack::set_homeiid(int64_t value) {
  _internal_set_homeiid(value);
  // @@protoc_insertion_point(field_set:PRO.Res_ProxyUserSlot_ack.homeiid)
}

// int64 gateiid = 12;
inline void Res_ProxyUserSlot_ack::clear_gateiid() {
  gateiid_ = int64_t{0};
}
inline int64_t Res_ProxyUserSlot_ack::_internal_gateiid() const {
  return gateiid_;
}
inline int64_t Res_ProxyUserSlot_ack::gateiid() const {
  // @@protoc_insertion_point(field_get:PRO.Res_ProxyUserSlot_ack.gateiid)
  return _internal_gateiid();
}
inline void Res_ProxyUserSlot_ack::_internal_set_gateiid(int64_t value) {
  
  gateiid_ = value;
}
inline void Res_ProxyUserSlot_ack::set_gateiid(int64_t value) {
  _internal_set_gateiid(value);
  // @@protoc_insertion_point(field_set:PRO.Res_ProxyUserSlot_ack.gateiid)
}

// int32 hgtype = 13;
inline void Res_ProxyUserSlot_ack::clear_hgtype() {
  hgtype_ = 0;
}
inline int32_t Res_ProxyUserSlot_ack::_internal_hgtype() const {
  return hgtype_;
}
inline int32_t Res_ProxyUserSlot_ack::hgtype() const {
  // @@protoc_insertion_point(field_get:PRO.Res_ProxyUserSlot_ack.hgtype)
  return _internal_hgtype();
}
inline void Res_ProxyUserSlot_ack::_internal_set_hgtype(int32_t value) {
  
  hgtype_ = value;
}
inline void Res_ProxyUserSlot_ack::set_hgtype(int32_t value) {
  _internal_set_hgtype(value);
  // @@protoc_insertion_point(field_set:PRO.Res_ProxyUserSlot_ack.hgtype)
}

// int64 lsno = 20;
inline void Res_ProxyUserSlot_ack::clear_lsno() {
  lsno_ = int64_t{0};
}
inline int64_t Res_ProxyUserSlot_ack::_internal_lsno() const {
  return lsno_;
}
inline int64_t Res_ProxyUserSlot_ack::lsno() const {
  // @@protoc_insertion_point(field_get:PRO.Res_ProxyUserSlot_ack.lsno)
  return _internal_lsno();
}
inline void Res_ProxyUserSlot_ack::_internal_set_lsno(int64_t value) {
  
  lsno_ = value;
}
inline void Res_ProxyUserSlot_ack::set_lsno(int64_t value) {
  _internal_set_lsno(value);
  // @@protoc_insertion_point(field_set:PRO.Res_ProxyUserSlot_ack.lsno)
}

// int64 sequence = 21;
inline void Res_ProxyUserSlot_ack::clear_sequence() {
  sequence_ = int64_t{0};
}
inline int64_t Res_ProxyUserSlot_ack::_internal_sequence() const {
  return sequence_;
}
inline int64_t Res_ProxyUserSlot_ack::sequence() const {
  // @@protoc_insertion_point(field_get:PRO.Res_ProxyUserSlot_ack.sequence)
  return _internal_sequence();
}
inline void Res_ProxyUserSlot_ack::_internal_set_sequence(int64_t value) {
  
  sequence_ = value;
}
inline void Res_ProxyUserSlot_ack::set_sequence(int64_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:PRO.Res_ProxyUserSlot_ack.sequence)
}

// int64 user_iid = 22;
inline void Res_ProxyUserSlot_ack::clear_user_iid() {
  user_iid_ = int64_t{0};
}
inline int64_t Res_ProxyUserSlot_ack::_internal_user_iid() const {
  return user_iid_;
}
inline int64_t Res_ProxyUserSlot_ack::user_iid() const {
  // @@protoc_insertion_point(field_get:PRO.Res_ProxyUserSlot_ack.user_iid)
  return _internal_user_iid();
}
inline void Res_ProxyUserSlot_ack::_internal_set_user_iid(int64_t value) {
  
  user_iid_ = value;
}
inline void Res_ProxyUserSlot_ack::set_user_iid(int64_t value) {
  _internal_set_user_iid(value);
  // @@protoc_insertion_point(field_set:PRO.Res_ProxyUserSlot_ack.user_iid)
}

// -------------------------------------------------------------------

// Res_SyncGateSlot_ntf

// int32 freeslots = 1;
inline void Res_SyncGateSlot_ntf::clear_freeslots() {
  freeslots_ = 0;
}
inline int32_t Res_SyncGateSlot_ntf::_internal_freeslots() const {
  return freeslots_;
}
inline int32_t Res_SyncGateSlot_ntf::freeslots() const {
  // @@protoc_insertion_point(field_get:PRO.Res_SyncGateSlot_ntf.freeslots)
  return _internal_freeslots();
}
inline void Res_SyncGateSlot_ntf::_internal_set_freeslots(int32_t value) {
  
  freeslots_ = value;
}
inline void Res_SyncGateSlot_ntf::set_freeslots(int32_t value) {
  _internal_set_freeslots(value);
  // @@protoc_insertion_point(field_set:PRO.Res_SyncGateSlot_ntf.freeslots)
}

// int64 syncsequence = 2;
inline void Res_SyncGateSlot_ntf::clear_syncsequence() {
  syncsequence_ = int64_t{0};
}
inline int64_t Res_SyncGateSlot_ntf::_internal_syncsequence() const {
  return syncsequence_;
}
inline int64_t Res_SyncGateSlot_ntf::syncsequence() const {
  // @@protoc_insertion_point(field_get:PRO.Res_SyncGateSlot_ntf.syncsequence)
  return _internal_syncsequence();
}
inline void Res_SyncGateSlot_ntf::_internal_set_syncsequence(int64_t value) {
  
  syncsequence_ = value;
}
inline void Res_SyncGateSlot_ntf::set_syncsequence(int64_t value) {
  _internal_set_syncsequence(value);
  // @@protoc_insertion_point(field_set:PRO.Res_SyncGateSlot_ntf.syncsequence)
}

// int64 homeiid = 4;
inline void Res_SyncGateSlot_ntf::clear_homeiid() {
  homeiid_ = int64_t{0};
}
inline int64_t Res_SyncGateSlot_ntf::_internal_homeiid() const {
  return homeiid_;
}
inline int64_t Res_SyncGateSlot_ntf::homeiid() const {
  // @@protoc_insertion_point(field_get:PRO.Res_SyncGateSlot_ntf.homeiid)
  return _internal_homeiid();
}
inline void Res_SyncGateSlot_ntf::_internal_set_homeiid(int64_t value) {
  
  homeiid_ = value;
}
inline void Res_SyncGateSlot_ntf::set_homeiid(int64_t value) {
  _internal_set_homeiid(value);
  // @@protoc_insertion_point(field_set:PRO.Res_SyncGateSlot_ntf.homeiid)
}

// int64 gateiid = 5;
inline void Res_SyncGateSlot_ntf::clear_gateiid() {
  gateiid_ = int64_t{0};
}
inline int64_t Res_SyncGateSlot_ntf::_internal_gateiid() const {
  return gateiid_;
}
inline int64_t Res_SyncGateSlot_ntf::gateiid() const {
  // @@protoc_insertion_point(field_get:PRO.Res_SyncGateSlot_ntf.gateiid)
  return _internal_gateiid();
}
inline void Res_SyncGateSlot_ntf::_internal_set_gateiid(int64_t value) {
  
  gateiid_ = value;
}
inline void Res_SyncGateSlot_ntf::set_gateiid(int64_t value) {
  _internal_set_gateiid(value);
  // @@protoc_insertion_point(field_set:PRO.Res_SyncGateSlot_ntf.gateiid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PRO

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_res_5finternal_2eproto

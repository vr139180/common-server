// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mail_system_internal.proto

#include "mail_system_internal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace PRO {
constexpr Mail_SystemMail_req::Mail_SystemMail_req(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attachinfo_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , contents_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sender_iid_(int64_t{0})
  , attachment_(0){}
struct Mail_SystemMail_reqDefaultTypeInternal {
  constexpr Mail_SystemMail_reqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Mail_SystemMail_reqDefaultTypeInternal() {}
  union {
    Mail_SystemMail_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Mail_SystemMail_reqDefaultTypeInternal _Mail_SystemMail_req_default_instance_;
constexpr Mail_SystemMail_ack::Mail_SystemMail_ack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mail_(nullptr)
  , result_(0){}
struct Mail_SystemMail_ackDefaultTypeInternal {
  constexpr Mail_SystemMail_ackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Mail_SystemMail_ackDefaultTypeInternal() {}
  union {
    Mail_SystemMail_ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Mail_SystemMail_ackDefaultTypeInternal _Mail_SystemMail_ack_default_instance_;
constexpr Mail_SystemMail_ntf::Mail_SystemMail_ntf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mailiid_(int64_t{0}){}
struct Mail_SystemMail_ntfDefaultTypeInternal {
  constexpr Mail_SystemMail_ntfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Mail_SystemMail_ntfDefaultTypeInternal() {}
  union {
    Mail_SystemMail_ntf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Mail_SystemMail_ntfDefaultTypeInternal _Mail_SystemMail_ntf_default_instance_;
constexpr Mail_NewMail_req::Mail_NewMail_req(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attachinfo_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , contents_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , receiver_iid_(int64_t{0})
  , stype_(0)
  , attachment_(0)
  , sender_iid_(int64_t{0}){}
struct Mail_NewMail_reqDefaultTypeInternal {
  constexpr Mail_NewMail_reqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Mail_NewMail_reqDefaultTypeInternal() {}
  union {
    Mail_NewMail_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Mail_NewMail_reqDefaultTypeInternal _Mail_NewMail_req_default_instance_;
constexpr Mail_NewMail_ack::Mail_NewMail_ack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mail_(nullptr)
  , result_(0){}
struct Mail_NewMail_ackDefaultTypeInternal {
  constexpr Mail_NewMail_ackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Mail_NewMail_ackDefaultTypeInternal() {}
  union {
    Mail_NewMail_ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Mail_NewMail_ackDefaultTypeInternal _Mail_NewMail_ack_default_instance_;
}  // namespace PRO
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mail_5fsystem_5finternal_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mail_5fsystem_5finternal_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mail_5fsystem_5finternal_2eproto = nullptr;

const uint32_t TableStruct_mail_5fsystem_5finternal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Mail_SystemMail_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Mail_SystemMail_req, sender_iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::Mail_SystemMail_req, attachment_),
  PROTOBUF_FIELD_OFFSET(::PRO::Mail_SystemMail_req, attachinfo_),
  PROTOBUF_FIELD_OFFSET(::PRO::Mail_SystemMail_req, title_),
  PROTOBUF_FIELD_OFFSET(::PRO::Mail_SystemMail_req, contents_),
  PROTOBUF_FIELD_OFFSET(::PRO::Mail_SystemMail_ack, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PRO::Mail_SystemMail_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Mail_SystemMail_ack, result_),
  PROTOBUF_FIELD_OFFSET(::PRO::Mail_SystemMail_ack, mail_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Mail_SystemMail_ntf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Mail_SystemMail_ntf, mailiid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Mail_NewMail_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Mail_NewMail_req, stype_),
  PROTOBUF_FIELD_OFFSET(::PRO::Mail_NewMail_req, receiver_iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::Mail_NewMail_req, sender_iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::Mail_NewMail_req, attachment_),
  PROTOBUF_FIELD_OFFSET(::PRO::Mail_NewMail_req, attachinfo_),
  PROTOBUF_FIELD_OFFSET(::PRO::Mail_NewMail_req, title_),
  PROTOBUF_FIELD_OFFSET(::PRO::Mail_NewMail_req, contents_),
  PROTOBUF_FIELD_OFFSET(::PRO::Mail_NewMail_ack, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PRO::Mail_NewMail_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Mail_NewMail_ack, result_),
  PROTOBUF_FIELD_OFFSET(::PRO::Mail_NewMail_ack, mail_),
  ~0u,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::PRO::Mail_SystemMail_req)},
  { 11, 19, -1, sizeof(::PRO::Mail_SystemMail_ack)},
  { 21, -1, -1, sizeof(::PRO::Mail_SystemMail_ntf)},
  { 28, -1, -1, sizeof(::PRO::Mail_NewMail_req)},
  { 41, 49, -1, sizeof(::PRO::Mail_NewMail_ack)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Mail_SystemMail_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Mail_SystemMail_ack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Mail_SystemMail_ntf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Mail_NewMail_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Mail_NewMail_ack_default_instance_),
};

const char descriptor_table_protodef_mail_5fsystem_5finternal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032mail_system_internal.proto\022\003PRO\032\025globa"
  "l_internal.proto\"r\n\023Mail_SystemMail_req\022"
  "\022\n\nsender_iid\030\002 \001(\003\022\022\n\nattachment\030\003 \001(\005\022"
  "\022\n\nattachinfo\030\004 \001(\t\022\r\n\005title\030\005 \001(\t\022\020\n\010co"
  "ntents\030\006 \001(\t\"V\n\023Mail_SystemMail_ack\022\016\n\006r"
  "esult\030\001 \001(\005\022&\n\004mail\030\002 \001(\0132\023.PRO.MailSyst"
  "emItemH\000\210\001\001B\007\n\005_mail\"&\n\023Mail_SystemMail_"
  "ntf\022\017\n\007mailiid\030\001 \001(\003\"\224\001\n\020Mail_NewMail_re"
  "q\022\r\n\005stype\030\001 \001(\005\022\024\n\014receiver_iid\030\002 \001(\003\022\022"
  "\n\nsender_iid\030\003 \001(\003\022\022\n\nattachment\030\004 \001(\005\022\022"
  "\n\nattachinfo\030\005 \001(\t\022\r\n\005title\030\006 \001(\t\022\020\n\010con"
  "tents\030\007 \001(\t\"S\n\020Mail_NewMail_ack\022\016\n\006resul"
  "t\030\001 \001(\005\022&\n\004mail\030\002 \001(\0132\023.PRO.MailNormalIt"
  "emH\000\210\001\001B\007\n\005_mailBT\n\033com.cms.client.netwo"
  "rk.gproP\001Z\025gamelib/protobuf/gpro\252\002\033com.c"
  "ms.client.network.gprob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mail_5fsystem_5finternal_2eproto_deps[1] = {
  &::descriptor_table_global_5finternal_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mail_5fsystem_5finternal_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mail_5fsystem_5finternal_2eproto = {
  false, false, 630, descriptor_table_protodef_mail_5fsystem_5finternal_2eproto, "mail_system_internal.proto", 
  &descriptor_table_mail_5fsystem_5finternal_2eproto_once, descriptor_table_mail_5fsystem_5finternal_2eproto_deps, 1, 5,
  schemas, file_default_instances, TableStruct_mail_5fsystem_5finternal_2eproto::offsets,
  file_level_metadata_mail_5fsystem_5finternal_2eproto, file_level_enum_descriptors_mail_5fsystem_5finternal_2eproto, file_level_service_descriptors_mail_5fsystem_5finternal_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mail_5fsystem_5finternal_2eproto_getter() {
  return &descriptor_table_mail_5fsystem_5finternal_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mail_5fsystem_5finternal_2eproto(&descriptor_table_mail_5fsystem_5finternal_2eproto);
namespace PRO {

// ===================================================================

class Mail_SystemMail_req::_Internal {
 public:
};

Mail_SystemMail_req::Mail_SystemMail_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Mail_SystemMail_req)
}
Mail_SystemMail_req::Mail_SystemMail_req(const Mail_SystemMail_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attachinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attachinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attachinfo().empty()) {
    attachinfo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attachinfo(), 
      GetArenaForAllocation());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  contents_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    contents_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contents().empty()) {
    contents_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contents(), 
      GetArenaForAllocation());
  }
  ::memcpy(&sender_iid_, &from.sender_iid_,
    static_cast<size_t>(reinterpret_cast<char*>(&attachment_) -
    reinterpret_cast<char*>(&sender_iid_)) + sizeof(attachment_));
  // @@protoc_insertion_point(copy_constructor:PRO.Mail_SystemMail_req)
}

inline void Mail_SystemMail_req::SharedCtor() {
attachinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attachinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
contents_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  contents_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sender_iid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attachment_) -
    reinterpret_cast<char*>(&sender_iid_)) + sizeof(attachment_));
}

Mail_SystemMail_req::~Mail_SystemMail_req() {
  // @@protoc_insertion_point(destructor:PRO.Mail_SystemMail_req)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Mail_SystemMail_req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  attachinfo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contents_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Mail_SystemMail_req::ArenaDtor(void* object) {
  Mail_SystemMail_req* _this = reinterpret_cast< Mail_SystemMail_req* >(object);
  (void)_this;
}
void Mail_SystemMail_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Mail_SystemMail_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Mail_SystemMail_req::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Mail_SystemMail_req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attachinfo_.ClearToEmpty();
  title_.ClearToEmpty();
  contents_.ClearToEmpty();
  ::memset(&sender_iid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attachment_) -
      reinterpret_cast<char*>(&sender_iid_)) + sizeof(attachment_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mail_SystemMail_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 sender_iid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          sender_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 attachment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          attachment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string attachinfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_attachinfo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.Mail_SystemMail_req.attachinfo"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string title = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.Mail_SystemMail_req.title"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string contents = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_contents();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.Mail_SystemMail_req.contents"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mail_SystemMail_req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Mail_SystemMail_req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sender_iid = 2;
  if (this->_internal_sender_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_sender_iid(), target);
  }

  // int32 attachment = 3;
  if (this->_internal_attachment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_attachment(), target);
  }

  // string attachinfo = 4;
  if (!this->_internal_attachinfo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_attachinfo().data(), static_cast<int>(this->_internal_attachinfo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.Mail_SystemMail_req.attachinfo");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_attachinfo(), target);
  }

  // string title = 5;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.Mail_SystemMail_req.title");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_title(), target);
  }

  // string contents = 6;
  if (!this->_internal_contents().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contents().data(), static_cast<int>(this->_internal_contents().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.Mail_SystemMail_req.contents");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_contents(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Mail_SystemMail_req)
  return target;
}

size_t Mail_SystemMail_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Mail_SystemMail_req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string attachinfo = 4;
  if (!this->_internal_attachinfo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_attachinfo());
  }

  // string title = 5;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string contents = 6;
  if (!this->_internal_contents().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contents());
  }

  // int64 sender_iid = 2;
  if (this->_internal_sender_iid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_sender_iid());
  }

  // int32 attachment = 3;
  if (this->_internal_attachment() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_attachment());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mail_SystemMail_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Mail_SystemMail_req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mail_SystemMail_req::GetClassData() const { return &_class_data_; }

void Mail_SystemMail_req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Mail_SystemMail_req *>(to)->MergeFrom(
      static_cast<const Mail_SystemMail_req &>(from));
}


void Mail_SystemMail_req::MergeFrom(const Mail_SystemMail_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Mail_SystemMail_req)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_attachinfo().empty()) {
    _internal_set_attachinfo(from._internal_attachinfo());
  }
  if (!from._internal_title().empty()) {
    _internal_set_title(from._internal_title());
  }
  if (!from._internal_contents().empty()) {
    _internal_set_contents(from._internal_contents());
  }
  if (from._internal_sender_iid() != 0) {
    _internal_set_sender_iid(from._internal_sender_iid());
  }
  if (from._internal_attachment() != 0) {
    _internal_set_attachment(from._internal_attachment());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mail_SystemMail_req::CopyFrom(const Mail_SystemMail_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Mail_SystemMail_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mail_SystemMail_req::IsInitialized() const {
  return true;
}

void Mail_SystemMail_req::InternalSwap(Mail_SystemMail_req* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attachinfo_, lhs_arena,
      &other->attachinfo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &contents_, lhs_arena,
      &other->contents_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Mail_SystemMail_req, attachment_)
      + sizeof(Mail_SystemMail_req::attachment_)
      - PROTOBUF_FIELD_OFFSET(Mail_SystemMail_req, sender_iid_)>(
          reinterpret_cast<char*>(&sender_iid_),
          reinterpret_cast<char*>(&other->sender_iid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Mail_SystemMail_req::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mail_5fsystem_5finternal_2eproto_getter, &descriptor_table_mail_5fsystem_5finternal_2eproto_once,
      file_level_metadata_mail_5fsystem_5finternal_2eproto[0]);
}

// ===================================================================

class Mail_SystemMail_ack::_Internal {
 public:
  using HasBits = decltype(std::declval<Mail_SystemMail_ack>()._has_bits_);
  static const ::PRO::MailSystemItem& mail(const Mail_SystemMail_ack* msg);
  static void set_has_mail(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PRO::MailSystemItem&
Mail_SystemMail_ack::_Internal::mail(const Mail_SystemMail_ack* msg) {
  return *msg->mail_;
}
void Mail_SystemMail_ack::clear_mail() {
  if (mail_ != nullptr) mail_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Mail_SystemMail_ack::Mail_SystemMail_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Mail_SystemMail_ack)
}
Mail_SystemMail_ack::Mail_SystemMail_ack(const Mail_SystemMail_ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mail()) {
    mail_ = new ::PRO::MailSystemItem(*from.mail_);
  } else {
    mail_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:PRO.Mail_SystemMail_ack)
}

inline void Mail_SystemMail_ack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mail_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&mail_)) + sizeof(result_));
}

Mail_SystemMail_ack::~Mail_SystemMail_ack() {
  // @@protoc_insertion_point(destructor:PRO.Mail_SystemMail_ack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Mail_SystemMail_ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete mail_;
}

void Mail_SystemMail_ack::ArenaDtor(void* object) {
  Mail_SystemMail_ack* _this = reinterpret_cast< Mail_SystemMail_ack* >(object);
  (void)_this;
}
void Mail_SystemMail_ack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Mail_SystemMail_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Mail_SystemMail_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Mail_SystemMail_ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(mail_ != nullptr);
    mail_->Clear();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mail_SystemMail_ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PRO.MailSystemItem mail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mail_SystemMail_ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Mail_SystemMail_ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // optional .PRO.MailSystemItem mail = 2;
  if (_internal_has_mail()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mail(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Mail_SystemMail_ack)
  return target;
}

size_t Mail_SystemMail_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Mail_SystemMail_ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PRO.MailSystemItem mail = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mail_);
  }

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mail_SystemMail_ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Mail_SystemMail_ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mail_SystemMail_ack::GetClassData() const { return &_class_data_; }

void Mail_SystemMail_ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Mail_SystemMail_ack *>(to)->MergeFrom(
      static_cast<const Mail_SystemMail_ack &>(from));
}


void Mail_SystemMail_ack::MergeFrom(const Mail_SystemMail_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Mail_SystemMail_ack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mail()) {
    _internal_mutable_mail()->::PRO::MailSystemItem::MergeFrom(from._internal_mail());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mail_SystemMail_ack::CopyFrom(const Mail_SystemMail_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Mail_SystemMail_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mail_SystemMail_ack::IsInitialized() const {
  return true;
}

void Mail_SystemMail_ack::InternalSwap(Mail_SystemMail_ack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Mail_SystemMail_ack, result_)
      + sizeof(Mail_SystemMail_ack::result_)
      - PROTOBUF_FIELD_OFFSET(Mail_SystemMail_ack, mail_)>(
          reinterpret_cast<char*>(&mail_),
          reinterpret_cast<char*>(&other->mail_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Mail_SystemMail_ack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mail_5fsystem_5finternal_2eproto_getter, &descriptor_table_mail_5fsystem_5finternal_2eproto_once,
      file_level_metadata_mail_5fsystem_5finternal_2eproto[1]);
}

// ===================================================================

class Mail_SystemMail_ntf::_Internal {
 public:
};

Mail_SystemMail_ntf::Mail_SystemMail_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Mail_SystemMail_ntf)
}
Mail_SystemMail_ntf::Mail_SystemMail_ntf(const Mail_SystemMail_ntf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mailiid_ = from.mailiid_;
  // @@protoc_insertion_point(copy_constructor:PRO.Mail_SystemMail_ntf)
}

inline void Mail_SystemMail_ntf::SharedCtor() {
mailiid_ = int64_t{0};
}

Mail_SystemMail_ntf::~Mail_SystemMail_ntf() {
  // @@protoc_insertion_point(destructor:PRO.Mail_SystemMail_ntf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Mail_SystemMail_ntf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Mail_SystemMail_ntf::ArenaDtor(void* object) {
  Mail_SystemMail_ntf* _this = reinterpret_cast< Mail_SystemMail_ntf* >(object);
  (void)_this;
}
void Mail_SystemMail_ntf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Mail_SystemMail_ntf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Mail_SystemMail_ntf::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Mail_SystemMail_ntf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mailiid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mail_SystemMail_ntf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 mailiid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          mailiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mail_SystemMail_ntf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Mail_SystemMail_ntf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mailiid = 1;
  if (this->_internal_mailiid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mailiid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Mail_SystemMail_ntf)
  return target;
}

size_t Mail_SystemMail_ntf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Mail_SystemMail_ntf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 mailiid = 1;
  if (this->_internal_mailiid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_mailiid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mail_SystemMail_ntf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Mail_SystemMail_ntf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mail_SystemMail_ntf::GetClassData() const { return &_class_data_; }

void Mail_SystemMail_ntf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Mail_SystemMail_ntf *>(to)->MergeFrom(
      static_cast<const Mail_SystemMail_ntf &>(from));
}


void Mail_SystemMail_ntf::MergeFrom(const Mail_SystemMail_ntf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Mail_SystemMail_ntf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_mailiid() != 0) {
    _internal_set_mailiid(from._internal_mailiid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mail_SystemMail_ntf::CopyFrom(const Mail_SystemMail_ntf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Mail_SystemMail_ntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mail_SystemMail_ntf::IsInitialized() const {
  return true;
}

void Mail_SystemMail_ntf::InternalSwap(Mail_SystemMail_ntf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(mailiid_, other->mailiid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mail_SystemMail_ntf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mail_5fsystem_5finternal_2eproto_getter, &descriptor_table_mail_5fsystem_5finternal_2eproto_once,
      file_level_metadata_mail_5fsystem_5finternal_2eproto[2]);
}

// ===================================================================

class Mail_NewMail_req::_Internal {
 public:
};

Mail_NewMail_req::Mail_NewMail_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Mail_NewMail_req)
}
Mail_NewMail_req::Mail_NewMail_req(const Mail_NewMail_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attachinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attachinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attachinfo().empty()) {
    attachinfo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attachinfo(), 
      GetArenaForAllocation());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  contents_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    contents_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contents().empty()) {
    contents_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contents(), 
      GetArenaForAllocation());
  }
  ::memcpy(&receiver_iid_, &from.receiver_iid_,
    static_cast<size_t>(reinterpret_cast<char*>(&sender_iid_) -
    reinterpret_cast<char*>(&receiver_iid_)) + sizeof(sender_iid_));
  // @@protoc_insertion_point(copy_constructor:PRO.Mail_NewMail_req)
}

inline void Mail_NewMail_req::SharedCtor() {
attachinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attachinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
contents_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  contents_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&receiver_iid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sender_iid_) -
    reinterpret_cast<char*>(&receiver_iid_)) + sizeof(sender_iid_));
}

Mail_NewMail_req::~Mail_NewMail_req() {
  // @@protoc_insertion_point(destructor:PRO.Mail_NewMail_req)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Mail_NewMail_req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  attachinfo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contents_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Mail_NewMail_req::ArenaDtor(void* object) {
  Mail_NewMail_req* _this = reinterpret_cast< Mail_NewMail_req* >(object);
  (void)_this;
}
void Mail_NewMail_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Mail_NewMail_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Mail_NewMail_req::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Mail_NewMail_req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attachinfo_.ClearToEmpty();
  title_.ClearToEmpty();
  contents_.ClearToEmpty();
  ::memset(&receiver_iid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sender_iid_) -
      reinterpret_cast<char*>(&receiver_iid_)) + sizeof(sender_iid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mail_NewMail_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 stype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          stype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 receiver_iid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          receiver_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 sender_iid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          sender_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 attachment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          attachment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string attachinfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_attachinfo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.Mail_NewMail_req.attachinfo"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string title = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.Mail_NewMail_req.title"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string contents = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_contents();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.Mail_NewMail_req.contents"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mail_NewMail_req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Mail_NewMail_req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 stype = 1;
  if (this->_internal_stype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_stype(), target);
  }

  // int64 receiver_iid = 2;
  if (this->_internal_receiver_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_receiver_iid(), target);
  }

  // int64 sender_iid = 3;
  if (this->_internal_sender_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_sender_iid(), target);
  }

  // int32 attachment = 4;
  if (this->_internal_attachment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_attachment(), target);
  }

  // string attachinfo = 5;
  if (!this->_internal_attachinfo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_attachinfo().data(), static_cast<int>(this->_internal_attachinfo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.Mail_NewMail_req.attachinfo");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_attachinfo(), target);
  }

  // string title = 6;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.Mail_NewMail_req.title");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_title(), target);
  }

  // string contents = 7;
  if (!this->_internal_contents().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contents().data(), static_cast<int>(this->_internal_contents().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.Mail_NewMail_req.contents");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_contents(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Mail_NewMail_req)
  return target;
}

size_t Mail_NewMail_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Mail_NewMail_req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string attachinfo = 5;
  if (!this->_internal_attachinfo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_attachinfo());
  }

  // string title = 6;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string contents = 7;
  if (!this->_internal_contents().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contents());
  }

  // int64 receiver_iid = 2;
  if (this->_internal_receiver_iid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_receiver_iid());
  }

  // int32 stype = 1;
  if (this->_internal_stype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_stype());
  }

  // int32 attachment = 4;
  if (this->_internal_attachment() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_attachment());
  }

  // int64 sender_iid = 3;
  if (this->_internal_sender_iid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_sender_iid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mail_NewMail_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Mail_NewMail_req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mail_NewMail_req::GetClassData() const { return &_class_data_; }

void Mail_NewMail_req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Mail_NewMail_req *>(to)->MergeFrom(
      static_cast<const Mail_NewMail_req &>(from));
}


void Mail_NewMail_req::MergeFrom(const Mail_NewMail_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Mail_NewMail_req)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_attachinfo().empty()) {
    _internal_set_attachinfo(from._internal_attachinfo());
  }
  if (!from._internal_title().empty()) {
    _internal_set_title(from._internal_title());
  }
  if (!from._internal_contents().empty()) {
    _internal_set_contents(from._internal_contents());
  }
  if (from._internal_receiver_iid() != 0) {
    _internal_set_receiver_iid(from._internal_receiver_iid());
  }
  if (from._internal_stype() != 0) {
    _internal_set_stype(from._internal_stype());
  }
  if (from._internal_attachment() != 0) {
    _internal_set_attachment(from._internal_attachment());
  }
  if (from._internal_sender_iid() != 0) {
    _internal_set_sender_iid(from._internal_sender_iid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mail_NewMail_req::CopyFrom(const Mail_NewMail_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Mail_NewMail_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mail_NewMail_req::IsInitialized() const {
  return true;
}

void Mail_NewMail_req::InternalSwap(Mail_NewMail_req* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attachinfo_, lhs_arena,
      &other->attachinfo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &contents_, lhs_arena,
      &other->contents_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Mail_NewMail_req, sender_iid_)
      + sizeof(Mail_NewMail_req::sender_iid_)
      - PROTOBUF_FIELD_OFFSET(Mail_NewMail_req, receiver_iid_)>(
          reinterpret_cast<char*>(&receiver_iid_),
          reinterpret_cast<char*>(&other->receiver_iid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Mail_NewMail_req::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mail_5fsystem_5finternal_2eproto_getter, &descriptor_table_mail_5fsystem_5finternal_2eproto_once,
      file_level_metadata_mail_5fsystem_5finternal_2eproto[3]);
}

// ===================================================================

class Mail_NewMail_ack::_Internal {
 public:
  using HasBits = decltype(std::declval<Mail_NewMail_ack>()._has_bits_);
  static const ::PRO::MailNormalItem& mail(const Mail_NewMail_ack* msg);
  static void set_has_mail(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PRO::MailNormalItem&
Mail_NewMail_ack::_Internal::mail(const Mail_NewMail_ack* msg) {
  return *msg->mail_;
}
void Mail_NewMail_ack::clear_mail() {
  if (mail_ != nullptr) mail_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Mail_NewMail_ack::Mail_NewMail_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Mail_NewMail_ack)
}
Mail_NewMail_ack::Mail_NewMail_ack(const Mail_NewMail_ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mail()) {
    mail_ = new ::PRO::MailNormalItem(*from.mail_);
  } else {
    mail_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:PRO.Mail_NewMail_ack)
}

inline void Mail_NewMail_ack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mail_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&mail_)) + sizeof(result_));
}

Mail_NewMail_ack::~Mail_NewMail_ack() {
  // @@protoc_insertion_point(destructor:PRO.Mail_NewMail_ack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Mail_NewMail_ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete mail_;
}

void Mail_NewMail_ack::ArenaDtor(void* object) {
  Mail_NewMail_ack* _this = reinterpret_cast< Mail_NewMail_ack* >(object);
  (void)_this;
}
void Mail_NewMail_ack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Mail_NewMail_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Mail_NewMail_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Mail_NewMail_ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(mail_ != nullptr);
    mail_->Clear();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mail_NewMail_ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PRO.MailNormalItem mail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mail_NewMail_ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Mail_NewMail_ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // optional .PRO.MailNormalItem mail = 2;
  if (_internal_has_mail()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mail(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Mail_NewMail_ack)
  return target;
}

size_t Mail_NewMail_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Mail_NewMail_ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PRO.MailNormalItem mail = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mail_);
  }

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mail_NewMail_ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Mail_NewMail_ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mail_NewMail_ack::GetClassData() const { return &_class_data_; }

void Mail_NewMail_ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Mail_NewMail_ack *>(to)->MergeFrom(
      static_cast<const Mail_NewMail_ack &>(from));
}


void Mail_NewMail_ack::MergeFrom(const Mail_NewMail_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Mail_NewMail_ack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mail()) {
    _internal_mutable_mail()->::PRO::MailNormalItem::MergeFrom(from._internal_mail());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mail_NewMail_ack::CopyFrom(const Mail_NewMail_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Mail_NewMail_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mail_NewMail_ack::IsInitialized() const {
  return true;
}

void Mail_NewMail_ack::InternalSwap(Mail_NewMail_ack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Mail_NewMail_ack, result_)
      + sizeof(Mail_NewMail_ack::result_)
      - PROTOBUF_FIELD_OFFSET(Mail_NewMail_ack, mail_)>(
          reinterpret_cast<char*>(&mail_),
          reinterpret_cast<char*>(&other->mail_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Mail_NewMail_ack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mail_5fsystem_5finternal_2eproto_getter, &descriptor_table_mail_5fsystem_5finternal_2eproto_once,
      file_level_metadata_mail_5fsystem_5finternal_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace PRO
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PRO::Mail_SystemMail_req* Arena::CreateMaybeMessage< ::PRO::Mail_SystemMail_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Mail_SystemMail_req >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Mail_SystemMail_ack* Arena::CreateMaybeMessage< ::PRO::Mail_SystemMail_ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Mail_SystemMail_ack >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Mail_SystemMail_ntf* Arena::CreateMaybeMessage< ::PRO::Mail_SystemMail_ntf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Mail_SystemMail_ntf >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Mail_NewMail_req* Arena::CreateMaybeMessage< ::PRO::Mail_NewMail_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Mail_NewMail_req >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Mail_NewMail_ack* Arena::CreateMaybeMessage< ::PRO::Mail_NewMail_ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Mail_NewMail_ack >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

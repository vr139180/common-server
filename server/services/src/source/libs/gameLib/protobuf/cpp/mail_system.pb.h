// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mail_system.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mail_5fsystem_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mail_5fsystem_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "global_internal.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mail_5fsystem_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mail_5fsystem_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mail_5fsystem_2eproto;
namespace PRO {
class MailUserBox;
struct MailUserBoxDefaultTypeInternal;
extern MailUserBoxDefaultTypeInternal _MailUserBox_default_instance_;
class Mail_DeleteMail_ack;
struct Mail_DeleteMail_ackDefaultTypeInternal;
extern Mail_DeleteMail_ackDefaultTypeInternal _Mail_DeleteMail_ack_default_instance_;
class Mail_DeleteMail_req;
struct Mail_DeleteMail_reqDefaultTypeInternal;
extern Mail_DeleteMail_reqDefaultTypeInternal _Mail_DeleteMail_req_default_instance_;
class Mail_MailGet_ack;
struct Mail_MailGet_ackDefaultTypeInternal;
extern Mail_MailGet_ackDefaultTypeInternal _Mail_MailGet_ack_default_instance_;
class Mail_MailGet_req;
struct Mail_MailGet_reqDefaultTypeInternal;
extern Mail_MailGet_reqDefaultTypeInternal _Mail_MailGet_req_default_instance_;
class Mail_NewMail_ntf;
struct Mail_NewMail_ntfDefaultTypeInternal;
extern Mail_NewMail_ntfDefaultTypeInternal _Mail_NewMail_ntf_default_instance_;
class Mail_ReadMail_ack;
struct Mail_ReadMail_ackDefaultTypeInternal;
extern Mail_ReadMail_ackDefaultTypeInternal _Mail_ReadMail_ack_default_instance_;
class Mail_ReadMail_req;
struct Mail_ReadMail_reqDefaultTypeInternal;
extern Mail_ReadMail_reqDefaultTypeInternal _Mail_ReadMail_req_default_instance_;
class Mail_UnBindAttachs_ack;
struct Mail_UnBindAttachs_ackDefaultTypeInternal;
extern Mail_UnBindAttachs_ackDefaultTypeInternal _Mail_UnBindAttachs_ack_default_instance_;
class Mail_UnBindAttachs_req;
struct Mail_UnBindAttachs_reqDefaultTypeInternal;
extern Mail_UnBindAttachs_reqDefaultTypeInternal _Mail_UnBindAttachs_req_default_instance_;
class Mail_UserOnline_active;
struct Mail_UserOnline_activeDefaultTypeInternal;
extern Mail_UserOnline_activeDefaultTypeInternal _Mail_UserOnline_active_default_instance_;
}  // namespace PRO
PROTOBUF_NAMESPACE_OPEN
template<> ::PRO::MailUserBox* Arena::CreateMaybeMessage<::PRO::MailUserBox>(Arena*);
template<> ::PRO::Mail_DeleteMail_ack* Arena::CreateMaybeMessage<::PRO::Mail_DeleteMail_ack>(Arena*);
template<> ::PRO::Mail_DeleteMail_req* Arena::CreateMaybeMessage<::PRO::Mail_DeleteMail_req>(Arena*);
template<> ::PRO::Mail_MailGet_ack* Arena::CreateMaybeMessage<::PRO::Mail_MailGet_ack>(Arena*);
template<> ::PRO::Mail_MailGet_req* Arena::CreateMaybeMessage<::PRO::Mail_MailGet_req>(Arena*);
template<> ::PRO::Mail_NewMail_ntf* Arena::CreateMaybeMessage<::PRO::Mail_NewMail_ntf>(Arena*);
template<> ::PRO::Mail_ReadMail_ack* Arena::CreateMaybeMessage<::PRO::Mail_ReadMail_ack>(Arena*);
template<> ::PRO::Mail_ReadMail_req* Arena::CreateMaybeMessage<::PRO::Mail_ReadMail_req>(Arena*);
template<> ::PRO::Mail_UnBindAttachs_ack* Arena::CreateMaybeMessage<::PRO::Mail_UnBindAttachs_ack>(Arena*);
template<> ::PRO::Mail_UnBindAttachs_req* Arena::CreateMaybeMessage<::PRO::Mail_UnBindAttachs_req>(Arena*);
template<> ::PRO::Mail_UserOnline_active* Arena::CreateMaybeMessage<::PRO::Mail_UserOnline_active>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PRO {

enum MailType : int {
  MailType_Init = 0,
  MailType_System = 1,
  MailType_Union = 2,
  MailType_Max = 3,
  MailType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MailType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MailType_IsValid(int value);
constexpr MailType MailType_MIN = MailType_Init;
constexpr MailType MailType_MAX = MailType_Max;
constexpr int MailType_ARRAYSIZE = MailType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MailType_descriptor();
template<typename T>
inline const std::string& MailType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MailType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MailType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MailType_descriptor(), enum_t_value);
}
inline bool MailType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MailType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MailType>(
    MailType_descriptor(), name, value);
}
// ===================================================================

class MailUserBox final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.MailUserBox) */ {
 public:
  inline MailUserBox() : MailUserBox(nullptr) {}
  ~MailUserBox() override;
  explicit constexpr MailUserBox(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MailUserBox(const MailUserBox& from);
  MailUserBox(MailUserBox&& from) noexcept
    : MailUserBox() {
    *this = ::std::move(from);
  }

  inline MailUserBox& operator=(const MailUserBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline MailUserBox& operator=(MailUserBox&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MailUserBox& default_instance() {
    return *internal_default_instance();
  }
  static inline const MailUserBox* internal_default_instance() {
    return reinterpret_cast<const MailUserBox*>(
               &_MailUserBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MailUserBox& a, MailUserBox& b) {
    a.Swap(&b);
  }
  inline void Swap(MailUserBox* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MailUserBox* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MailUserBox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MailUserBox>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MailUserBox& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MailUserBox& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MailUserBox* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.MailUserBox";
  }
  protected:
  explicit MailUserBox(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIidFieldNumber = 2,
    kSysmailSyncFieldNumber = 3,
    kLastlistMailFieldNumber = 4,
    kVerFieldNumber = 1,
  };
  // int64 role_iid = 2;
  void clear_role_iid();
  int64_t role_iid() const;
  void set_role_iid(int64_t value);
  private:
  int64_t _internal_role_iid() const;
  void _internal_set_role_iid(int64_t value);
  public:

  // int64 sysmail_sync = 3;
  void clear_sysmail_sync();
  int64_t sysmail_sync() const;
  void set_sysmail_sync(int64_t value);
  private:
  int64_t _internal_sysmail_sync() const;
  void _internal_set_sysmail_sync(int64_t value);
  public:

  // int64 lastlist_mail = 4;
  void clear_lastlist_mail();
  int64_t lastlist_mail() const;
  void set_lastlist_mail(int64_t value);
  private:
  int64_t _internal_lastlist_mail() const;
  void _internal_set_lastlist_mail(int64_t value);
  public:

  // int32 ver_ = 1;
  void clear_ver_();
  int32_t ver_() const;
  void set_ver_(int32_t value);
  private:
  int32_t _internal_ver_() const;
  void _internal_set_ver_(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.MailUserBox)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t role_iid_;
  int64_t sysmail_sync_;
  int64_t lastlist_mail_;
  int32_t ver__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mail_5fsystem_2eproto;
};
// -------------------------------------------------------------------

class Mail_NewMail_ntf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Mail_NewMail_ntf) */ {
 public:
  inline Mail_NewMail_ntf() : Mail_NewMail_ntf(nullptr) {}
  ~Mail_NewMail_ntf() override;
  explicit constexpr Mail_NewMail_ntf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mail_NewMail_ntf(const Mail_NewMail_ntf& from);
  Mail_NewMail_ntf(Mail_NewMail_ntf&& from) noexcept
    : Mail_NewMail_ntf() {
    *this = ::std::move(from);
  }

  inline Mail_NewMail_ntf& operator=(const Mail_NewMail_ntf& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mail_NewMail_ntf& operator=(Mail_NewMail_ntf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Mail_NewMail_ntf& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mail_NewMail_ntf* internal_default_instance() {
    return reinterpret_cast<const Mail_NewMail_ntf*>(
               &_Mail_NewMail_ntf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Mail_NewMail_ntf& a, Mail_NewMail_ntf& b) {
    a.Swap(&b);
  }
  inline void Swap(Mail_NewMail_ntf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mail_NewMail_ntf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mail_NewMail_ntf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Mail_NewMail_ntf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Mail_NewMail_ntf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Mail_NewMail_ntf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mail_NewMail_ntf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Mail_NewMail_ntf";
  }
  protected:
  explicit Mail_NewMail_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUtokenFieldNumber = 1,
  };
  // optional .PRO.UserToken utoken = 1;
  bool has_utoken() const;
  private:
  bool _internal_has_utoken() const;
  public:
  void clear_utoken();
  const ::PRO::UserToken& utoken() const;
  PROTOBUF_NODISCARD ::PRO::UserToken* release_utoken();
  ::PRO::UserToken* mutable_utoken();
  void set_allocated_utoken(::PRO::UserToken* utoken);
  private:
  const ::PRO::UserToken& _internal_utoken() const;
  ::PRO::UserToken* _internal_mutable_utoken();
  public:
  void unsafe_arena_set_allocated_utoken(
      ::PRO::UserToken* utoken);
  ::PRO::UserToken* unsafe_arena_release_utoken();

  // @@protoc_insertion_point(class_scope:PRO.Mail_NewMail_ntf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PRO::UserToken* utoken_;
  friend struct ::TableStruct_mail_5fsystem_2eproto;
};
// -------------------------------------------------------------------

class Mail_MailGet_req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Mail_MailGet_req) */ {
 public:
  inline Mail_MailGet_req() : Mail_MailGet_req(nullptr) {}
  ~Mail_MailGet_req() override;
  explicit constexpr Mail_MailGet_req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mail_MailGet_req(const Mail_MailGet_req& from);
  Mail_MailGet_req(Mail_MailGet_req&& from) noexcept
    : Mail_MailGet_req() {
    *this = ::std::move(from);
  }

  inline Mail_MailGet_req& operator=(const Mail_MailGet_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mail_MailGet_req& operator=(Mail_MailGet_req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Mail_MailGet_req& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mail_MailGet_req* internal_default_instance() {
    return reinterpret_cast<const Mail_MailGet_req*>(
               &_Mail_MailGet_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Mail_MailGet_req& a, Mail_MailGet_req& b) {
    a.Swap(&b);
  }
  inline void Swap(Mail_MailGet_req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mail_MailGet_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mail_MailGet_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Mail_MailGet_req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Mail_MailGet_req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Mail_MailGet_req& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mail_MailGet_req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Mail_MailGet_req";
  }
  protected:
  explicit Mail_MailGet_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUtokenFieldNumber = 1,
    kMailiidFieldNumber = 2,
    kNextFieldNumber = 3,
    kNumFieldNumber = 4,
  };
  // optional .PRO.UserToken utoken = 1;
  bool has_utoken() const;
  private:
  bool _internal_has_utoken() const;
  public:
  void clear_utoken();
  const ::PRO::UserToken& utoken() const;
  PROTOBUF_NODISCARD ::PRO::UserToken* release_utoken();
  ::PRO::UserToken* mutable_utoken();
  void set_allocated_utoken(::PRO::UserToken* utoken);
  private:
  const ::PRO::UserToken& _internal_utoken() const;
  ::PRO::UserToken* _internal_mutable_utoken();
  public:
  void unsafe_arena_set_allocated_utoken(
      ::PRO::UserToken* utoken);
  ::PRO::UserToken* unsafe_arena_release_utoken();

  // int64 mailiid = 2;
  void clear_mailiid();
  int64_t mailiid() const;
  void set_mailiid(int64_t value);
  private:
  int64_t _internal_mailiid() const;
  void _internal_set_mailiid(int64_t value);
  public:

  // bool next = 3;
  void clear_next();
  bool next() const;
  void set_next(bool value);
  private:
  bool _internal_next() const;
  void _internal_set_next(bool value);
  public:

  // int32 num = 4;
  void clear_num();
  int32_t num() const;
  void set_num(int32_t value);
  private:
  int32_t _internal_num() const;
  void _internal_set_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.Mail_MailGet_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PRO::UserToken* utoken_;
  int64_t mailiid_;
  bool next_;
  int32_t num_;
  friend struct ::TableStruct_mail_5fsystem_2eproto;
};
// -------------------------------------------------------------------

class Mail_MailGet_ack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Mail_MailGet_ack) */ {
 public:
  inline Mail_MailGet_ack() : Mail_MailGet_ack(nullptr) {}
  ~Mail_MailGet_ack() override;
  explicit constexpr Mail_MailGet_ack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mail_MailGet_ack(const Mail_MailGet_ack& from);
  Mail_MailGet_ack(Mail_MailGet_ack&& from) noexcept
    : Mail_MailGet_ack() {
    *this = ::std::move(from);
  }

  inline Mail_MailGet_ack& operator=(const Mail_MailGet_ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mail_MailGet_ack& operator=(Mail_MailGet_ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Mail_MailGet_ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mail_MailGet_ack* internal_default_instance() {
    return reinterpret_cast<const Mail_MailGet_ack*>(
               &_Mail_MailGet_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Mail_MailGet_ack& a, Mail_MailGet_ack& b) {
    a.Swap(&b);
  }
  inline void Swap(Mail_MailGet_ack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mail_MailGet_ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mail_MailGet_ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Mail_MailGet_ack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Mail_MailGet_ack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Mail_MailGet_ack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mail_MailGet_ack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Mail_MailGet_ack";
  }
  protected:
  explicit Mail_MailGet_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMailsFieldNumber = 2,
    kUtokenFieldNumber = 1,
    kTotleFieldNumber = 3,
  };
  // repeated .PRO.MailNormalItem mails = 2;
  int mails_size() const;
  private:
  int _internal_mails_size() const;
  public:
  void clear_mails();
  ::PRO::MailNormalItem* mutable_mails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::MailNormalItem >*
      mutable_mails();
  private:
  const ::PRO::MailNormalItem& _internal_mails(int index) const;
  ::PRO::MailNormalItem* _internal_add_mails();
  public:
  const ::PRO::MailNormalItem& mails(int index) const;
  ::PRO::MailNormalItem* add_mails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::MailNormalItem >&
      mails() const;

  // optional .PRO.UserToken utoken = 1;
  bool has_utoken() const;
  private:
  bool _internal_has_utoken() const;
  public:
  void clear_utoken();
  const ::PRO::UserToken& utoken() const;
  PROTOBUF_NODISCARD ::PRO::UserToken* release_utoken();
  ::PRO::UserToken* mutable_utoken();
  void set_allocated_utoken(::PRO::UserToken* utoken);
  private:
  const ::PRO::UserToken& _internal_utoken() const;
  ::PRO::UserToken* _internal_mutable_utoken();
  public:
  void unsafe_arena_set_allocated_utoken(
      ::PRO::UserToken* utoken);
  ::PRO::UserToken* unsafe_arena_release_utoken();

  // int32 totle = 3;
  void clear_totle();
  int32_t totle() const;
  void set_totle(int32_t value);
  private:
  int32_t _internal_totle() const;
  void _internal_set_totle(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.Mail_MailGet_ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::MailNormalItem > mails_;
  ::PRO::UserToken* utoken_;
  int32_t totle_;
  friend struct ::TableStruct_mail_5fsystem_2eproto;
};
// -------------------------------------------------------------------

class Mail_UserOnline_active final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Mail_UserOnline_active) */ {
 public:
  inline Mail_UserOnline_active() : Mail_UserOnline_active(nullptr) {}
  ~Mail_UserOnline_active() override;
  explicit constexpr Mail_UserOnline_active(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mail_UserOnline_active(const Mail_UserOnline_active& from);
  Mail_UserOnline_active(Mail_UserOnline_active&& from) noexcept
    : Mail_UserOnline_active() {
    *this = ::std::move(from);
  }

  inline Mail_UserOnline_active& operator=(const Mail_UserOnline_active& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mail_UserOnline_active& operator=(Mail_UserOnline_active&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Mail_UserOnline_active& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mail_UserOnline_active* internal_default_instance() {
    return reinterpret_cast<const Mail_UserOnline_active*>(
               &_Mail_UserOnline_active_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Mail_UserOnline_active& a, Mail_UserOnline_active& b) {
    a.Swap(&b);
  }
  inline void Swap(Mail_UserOnline_active* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mail_UserOnline_active* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mail_UserOnline_active* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Mail_UserOnline_active>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Mail_UserOnline_active& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Mail_UserOnline_active& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mail_UserOnline_active* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Mail_UserOnline_active";
  }
  protected:
  explicit Mail_UserOnline_active(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUtokenFieldNumber = 1,
    kLastMailiidFieldNumber = 2,
    kFirstactiveFieldNumber = 3,
  };
  // optional .PRO.UserToken utoken = 1;
  bool has_utoken() const;
  private:
  bool _internal_has_utoken() const;
  public:
  void clear_utoken();
  const ::PRO::UserToken& utoken() const;
  PROTOBUF_NODISCARD ::PRO::UserToken* release_utoken();
  ::PRO::UserToken* mutable_utoken();
  void set_allocated_utoken(::PRO::UserToken* utoken);
  private:
  const ::PRO::UserToken& _internal_utoken() const;
  ::PRO::UserToken* _internal_mutable_utoken();
  public:
  void unsafe_arena_set_allocated_utoken(
      ::PRO::UserToken* utoken);
  ::PRO::UserToken* unsafe_arena_release_utoken();

  // int64 last_mailiid = 2;
  void clear_last_mailiid();
  int64_t last_mailiid() const;
  void set_last_mailiid(int64_t value);
  private:
  int64_t _internal_last_mailiid() const;
  void _internal_set_last_mailiid(int64_t value);
  public:

  // bool firstactive = 3;
  void clear_firstactive();
  bool firstactive() const;
  void set_firstactive(bool value);
  private:
  bool _internal_firstactive() const;
  void _internal_set_firstactive(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.Mail_UserOnline_active)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PRO::UserToken* utoken_;
  int64_t last_mailiid_;
  bool firstactive_;
  friend struct ::TableStruct_mail_5fsystem_2eproto;
};
// -------------------------------------------------------------------

class Mail_ReadMail_req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Mail_ReadMail_req) */ {
 public:
  inline Mail_ReadMail_req() : Mail_ReadMail_req(nullptr) {}
  ~Mail_ReadMail_req() override;
  explicit constexpr Mail_ReadMail_req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mail_ReadMail_req(const Mail_ReadMail_req& from);
  Mail_ReadMail_req(Mail_ReadMail_req&& from) noexcept
    : Mail_ReadMail_req() {
    *this = ::std::move(from);
  }

  inline Mail_ReadMail_req& operator=(const Mail_ReadMail_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mail_ReadMail_req& operator=(Mail_ReadMail_req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Mail_ReadMail_req& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mail_ReadMail_req* internal_default_instance() {
    return reinterpret_cast<const Mail_ReadMail_req*>(
               &_Mail_ReadMail_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Mail_ReadMail_req& a, Mail_ReadMail_req& b) {
    a.Swap(&b);
  }
  inline void Swap(Mail_ReadMail_req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mail_ReadMail_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mail_ReadMail_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Mail_ReadMail_req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Mail_ReadMail_req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Mail_ReadMail_req& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mail_ReadMail_req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Mail_ReadMail_req";
  }
  protected:
  explicit Mail_ReadMail_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUtokenFieldNumber = 1,
    kMailIidFieldNumber = 2,
  };
  // optional .PRO.UserToken utoken = 1;
  bool has_utoken() const;
  private:
  bool _internal_has_utoken() const;
  public:
  void clear_utoken();
  const ::PRO::UserToken& utoken() const;
  PROTOBUF_NODISCARD ::PRO::UserToken* release_utoken();
  ::PRO::UserToken* mutable_utoken();
  void set_allocated_utoken(::PRO::UserToken* utoken);
  private:
  const ::PRO::UserToken& _internal_utoken() const;
  ::PRO::UserToken* _internal_mutable_utoken();
  public:
  void unsafe_arena_set_allocated_utoken(
      ::PRO::UserToken* utoken);
  ::PRO::UserToken* unsafe_arena_release_utoken();

  // int64 mail_iid = 2;
  void clear_mail_iid();
  int64_t mail_iid() const;
  void set_mail_iid(int64_t value);
  private:
  int64_t _internal_mail_iid() const;
  void _internal_set_mail_iid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.Mail_ReadMail_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PRO::UserToken* utoken_;
  int64_t mail_iid_;
  friend struct ::TableStruct_mail_5fsystem_2eproto;
};
// -------------------------------------------------------------------

class Mail_ReadMail_ack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Mail_ReadMail_ack) */ {
 public:
  inline Mail_ReadMail_ack() : Mail_ReadMail_ack(nullptr) {}
  ~Mail_ReadMail_ack() override;
  explicit constexpr Mail_ReadMail_ack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mail_ReadMail_ack(const Mail_ReadMail_ack& from);
  Mail_ReadMail_ack(Mail_ReadMail_ack&& from) noexcept
    : Mail_ReadMail_ack() {
    *this = ::std::move(from);
  }

  inline Mail_ReadMail_ack& operator=(const Mail_ReadMail_ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mail_ReadMail_ack& operator=(Mail_ReadMail_ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Mail_ReadMail_ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mail_ReadMail_ack* internal_default_instance() {
    return reinterpret_cast<const Mail_ReadMail_ack*>(
               &_Mail_ReadMail_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Mail_ReadMail_ack& a, Mail_ReadMail_ack& b) {
    a.Swap(&b);
  }
  inline void Swap(Mail_ReadMail_ack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mail_ReadMail_ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mail_ReadMail_ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Mail_ReadMail_ack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Mail_ReadMail_ack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Mail_ReadMail_ack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mail_ReadMail_ack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Mail_ReadMail_ack";
  }
  protected:
  explicit Mail_ReadMail_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUtokenFieldNumber = 1,
    kMailIidFieldNumber = 3,
    kResultFieldNumber = 2,
  };
  // optional .PRO.UserToken utoken = 1;
  bool has_utoken() const;
  private:
  bool _internal_has_utoken() const;
  public:
  void clear_utoken();
  const ::PRO::UserToken& utoken() const;
  PROTOBUF_NODISCARD ::PRO::UserToken* release_utoken();
  ::PRO::UserToken* mutable_utoken();
  void set_allocated_utoken(::PRO::UserToken* utoken);
  private:
  const ::PRO::UserToken& _internal_utoken() const;
  ::PRO::UserToken* _internal_mutable_utoken();
  public:
  void unsafe_arena_set_allocated_utoken(
      ::PRO::UserToken* utoken);
  ::PRO::UserToken* unsafe_arena_release_utoken();

  // int64 mail_iid = 3;
  void clear_mail_iid();
  int64_t mail_iid() const;
  void set_mail_iid(int64_t value);
  private:
  int64_t _internal_mail_iid() const;
  void _internal_set_mail_iid(int64_t value);
  public:

  // int32 result = 2;
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.Mail_ReadMail_ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PRO::UserToken* utoken_;
  int64_t mail_iid_;
  int32_t result_;
  friend struct ::TableStruct_mail_5fsystem_2eproto;
};
// -------------------------------------------------------------------

class Mail_DeleteMail_req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Mail_DeleteMail_req) */ {
 public:
  inline Mail_DeleteMail_req() : Mail_DeleteMail_req(nullptr) {}
  ~Mail_DeleteMail_req() override;
  explicit constexpr Mail_DeleteMail_req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mail_DeleteMail_req(const Mail_DeleteMail_req& from);
  Mail_DeleteMail_req(Mail_DeleteMail_req&& from) noexcept
    : Mail_DeleteMail_req() {
    *this = ::std::move(from);
  }

  inline Mail_DeleteMail_req& operator=(const Mail_DeleteMail_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mail_DeleteMail_req& operator=(Mail_DeleteMail_req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Mail_DeleteMail_req& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mail_DeleteMail_req* internal_default_instance() {
    return reinterpret_cast<const Mail_DeleteMail_req*>(
               &_Mail_DeleteMail_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Mail_DeleteMail_req& a, Mail_DeleteMail_req& b) {
    a.Swap(&b);
  }
  inline void Swap(Mail_DeleteMail_req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mail_DeleteMail_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mail_DeleteMail_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Mail_DeleteMail_req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Mail_DeleteMail_req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Mail_DeleteMail_req& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mail_DeleteMail_req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Mail_DeleteMail_req";
  }
  protected:
  explicit Mail_DeleteMail_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUtokenFieldNumber = 1,
    kMailIidFieldNumber = 2,
  };
  // optional .PRO.UserToken utoken = 1;
  bool has_utoken() const;
  private:
  bool _internal_has_utoken() const;
  public:
  void clear_utoken();
  const ::PRO::UserToken& utoken() const;
  PROTOBUF_NODISCARD ::PRO::UserToken* release_utoken();
  ::PRO::UserToken* mutable_utoken();
  void set_allocated_utoken(::PRO::UserToken* utoken);
  private:
  const ::PRO::UserToken& _internal_utoken() const;
  ::PRO::UserToken* _internal_mutable_utoken();
  public:
  void unsafe_arena_set_allocated_utoken(
      ::PRO::UserToken* utoken);
  ::PRO::UserToken* unsafe_arena_release_utoken();

  // int64 mail_iid = 2;
  void clear_mail_iid();
  int64_t mail_iid() const;
  void set_mail_iid(int64_t value);
  private:
  int64_t _internal_mail_iid() const;
  void _internal_set_mail_iid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.Mail_DeleteMail_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PRO::UserToken* utoken_;
  int64_t mail_iid_;
  friend struct ::TableStruct_mail_5fsystem_2eproto;
};
// -------------------------------------------------------------------

class Mail_DeleteMail_ack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Mail_DeleteMail_ack) */ {
 public:
  inline Mail_DeleteMail_ack() : Mail_DeleteMail_ack(nullptr) {}
  ~Mail_DeleteMail_ack() override;
  explicit constexpr Mail_DeleteMail_ack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mail_DeleteMail_ack(const Mail_DeleteMail_ack& from);
  Mail_DeleteMail_ack(Mail_DeleteMail_ack&& from) noexcept
    : Mail_DeleteMail_ack() {
    *this = ::std::move(from);
  }

  inline Mail_DeleteMail_ack& operator=(const Mail_DeleteMail_ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mail_DeleteMail_ack& operator=(Mail_DeleteMail_ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Mail_DeleteMail_ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mail_DeleteMail_ack* internal_default_instance() {
    return reinterpret_cast<const Mail_DeleteMail_ack*>(
               &_Mail_DeleteMail_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Mail_DeleteMail_ack& a, Mail_DeleteMail_ack& b) {
    a.Swap(&b);
  }
  inline void Swap(Mail_DeleteMail_ack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mail_DeleteMail_ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mail_DeleteMail_ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Mail_DeleteMail_ack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Mail_DeleteMail_ack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Mail_DeleteMail_ack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mail_DeleteMail_ack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Mail_DeleteMail_ack";
  }
  protected:
  explicit Mail_DeleteMail_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUtokenFieldNumber = 1,
    kMailIidFieldNumber = 3,
    kResultFieldNumber = 2,
  };
  // optional .PRO.UserToken utoken = 1;
  bool has_utoken() const;
  private:
  bool _internal_has_utoken() const;
  public:
  void clear_utoken();
  const ::PRO::UserToken& utoken() const;
  PROTOBUF_NODISCARD ::PRO::UserToken* release_utoken();
  ::PRO::UserToken* mutable_utoken();
  void set_allocated_utoken(::PRO::UserToken* utoken);
  private:
  const ::PRO::UserToken& _internal_utoken() const;
  ::PRO::UserToken* _internal_mutable_utoken();
  public:
  void unsafe_arena_set_allocated_utoken(
      ::PRO::UserToken* utoken);
  ::PRO::UserToken* unsafe_arena_release_utoken();

  // int64 mail_iid = 3;
  void clear_mail_iid();
  int64_t mail_iid() const;
  void set_mail_iid(int64_t value);
  private:
  int64_t _internal_mail_iid() const;
  void _internal_set_mail_iid(int64_t value);
  public:

  // int32 result = 2;
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.Mail_DeleteMail_ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PRO::UserToken* utoken_;
  int64_t mail_iid_;
  int32_t result_;
  friend struct ::TableStruct_mail_5fsystem_2eproto;
};
// -------------------------------------------------------------------

class Mail_UnBindAttachs_req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Mail_UnBindAttachs_req) */ {
 public:
  inline Mail_UnBindAttachs_req() : Mail_UnBindAttachs_req(nullptr) {}
  ~Mail_UnBindAttachs_req() override;
  explicit constexpr Mail_UnBindAttachs_req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mail_UnBindAttachs_req(const Mail_UnBindAttachs_req& from);
  Mail_UnBindAttachs_req(Mail_UnBindAttachs_req&& from) noexcept
    : Mail_UnBindAttachs_req() {
    *this = ::std::move(from);
  }

  inline Mail_UnBindAttachs_req& operator=(const Mail_UnBindAttachs_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mail_UnBindAttachs_req& operator=(Mail_UnBindAttachs_req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Mail_UnBindAttachs_req& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mail_UnBindAttachs_req* internal_default_instance() {
    return reinterpret_cast<const Mail_UnBindAttachs_req*>(
               &_Mail_UnBindAttachs_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Mail_UnBindAttachs_req& a, Mail_UnBindAttachs_req& b) {
    a.Swap(&b);
  }
  inline void Swap(Mail_UnBindAttachs_req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mail_UnBindAttachs_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mail_UnBindAttachs_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Mail_UnBindAttachs_req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Mail_UnBindAttachs_req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Mail_UnBindAttachs_req& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mail_UnBindAttachs_req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Mail_UnBindAttachs_req";
  }
  protected:
  explicit Mail_UnBindAttachs_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUtokenFieldNumber = 1,
    kMailIidFieldNumber = 2,
  };
  // optional .PRO.UserToken utoken = 1;
  bool has_utoken() const;
  private:
  bool _internal_has_utoken() const;
  public:
  void clear_utoken();
  const ::PRO::UserToken& utoken() const;
  PROTOBUF_NODISCARD ::PRO::UserToken* release_utoken();
  ::PRO::UserToken* mutable_utoken();
  void set_allocated_utoken(::PRO::UserToken* utoken);
  private:
  const ::PRO::UserToken& _internal_utoken() const;
  ::PRO::UserToken* _internal_mutable_utoken();
  public:
  void unsafe_arena_set_allocated_utoken(
      ::PRO::UserToken* utoken);
  ::PRO::UserToken* unsafe_arena_release_utoken();

  // int64 mail_iid = 2;
  void clear_mail_iid();
  int64_t mail_iid() const;
  void set_mail_iid(int64_t value);
  private:
  int64_t _internal_mail_iid() const;
  void _internal_set_mail_iid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.Mail_UnBindAttachs_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PRO::UserToken* utoken_;
  int64_t mail_iid_;
  friend struct ::TableStruct_mail_5fsystem_2eproto;
};
// -------------------------------------------------------------------

class Mail_UnBindAttachs_ack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Mail_UnBindAttachs_ack) */ {
 public:
  inline Mail_UnBindAttachs_ack() : Mail_UnBindAttachs_ack(nullptr) {}
  ~Mail_UnBindAttachs_ack() override;
  explicit constexpr Mail_UnBindAttachs_ack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mail_UnBindAttachs_ack(const Mail_UnBindAttachs_ack& from);
  Mail_UnBindAttachs_ack(Mail_UnBindAttachs_ack&& from) noexcept
    : Mail_UnBindAttachs_ack() {
    *this = ::std::move(from);
  }

  inline Mail_UnBindAttachs_ack& operator=(const Mail_UnBindAttachs_ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mail_UnBindAttachs_ack& operator=(Mail_UnBindAttachs_ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Mail_UnBindAttachs_ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mail_UnBindAttachs_ack* internal_default_instance() {
    return reinterpret_cast<const Mail_UnBindAttachs_ack*>(
               &_Mail_UnBindAttachs_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Mail_UnBindAttachs_ack& a, Mail_UnBindAttachs_ack& b) {
    a.Swap(&b);
  }
  inline void Swap(Mail_UnBindAttachs_ack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mail_UnBindAttachs_ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mail_UnBindAttachs_ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Mail_UnBindAttachs_ack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Mail_UnBindAttachs_ack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Mail_UnBindAttachs_ack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mail_UnBindAttachs_ack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Mail_UnBindAttachs_ack";
  }
  protected:
  explicit Mail_UnBindAttachs_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUtokenFieldNumber = 1,
    kMailIidFieldNumber = 3,
    kResultFieldNumber = 2,
  };
  // optional .PRO.UserToken utoken = 1;
  bool has_utoken() const;
  private:
  bool _internal_has_utoken() const;
  public:
  void clear_utoken();
  const ::PRO::UserToken& utoken() const;
  PROTOBUF_NODISCARD ::PRO::UserToken* release_utoken();
  ::PRO::UserToken* mutable_utoken();
  void set_allocated_utoken(::PRO::UserToken* utoken);
  private:
  const ::PRO::UserToken& _internal_utoken() const;
  ::PRO::UserToken* _internal_mutable_utoken();
  public:
  void unsafe_arena_set_allocated_utoken(
      ::PRO::UserToken* utoken);
  ::PRO::UserToken* unsafe_arena_release_utoken();

  // int64 mail_iid = 3;
  void clear_mail_iid();
  int64_t mail_iid() const;
  void set_mail_iid(int64_t value);
  private:
  int64_t _internal_mail_iid() const;
  void _internal_set_mail_iid(int64_t value);
  public:

  // int32 result = 2;
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.Mail_UnBindAttachs_ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PRO::UserToken* utoken_;
  int64_t mail_iid_;
  int32_t result_;
  friend struct ::TableStruct_mail_5fsystem_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MailUserBox

// int32 ver_ = 1;
inline void MailUserBox::clear_ver_() {
  ver__ = 0;
}
inline int32_t MailUserBox::_internal_ver_() const {
  return ver__;
}
inline int32_t MailUserBox::ver_() const {
  // @@protoc_insertion_point(field_get:PRO.MailUserBox.ver_)
  return _internal_ver_();
}
inline void MailUserBox::_internal_set_ver_(int32_t value) {
  
  ver__ = value;
}
inline void MailUserBox::set_ver_(int32_t value) {
  _internal_set_ver_(value);
  // @@protoc_insertion_point(field_set:PRO.MailUserBox.ver_)
}

// int64 role_iid = 2;
inline void MailUserBox::clear_role_iid() {
  role_iid_ = int64_t{0};
}
inline int64_t MailUserBox::_internal_role_iid() const {
  return role_iid_;
}
inline int64_t MailUserBox::role_iid() const {
  // @@protoc_insertion_point(field_get:PRO.MailUserBox.role_iid)
  return _internal_role_iid();
}
inline void MailUserBox::_internal_set_role_iid(int64_t value) {
  
  role_iid_ = value;
}
inline void MailUserBox::set_role_iid(int64_t value) {
  _internal_set_role_iid(value);
  // @@protoc_insertion_point(field_set:PRO.MailUserBox.role_iid)
}

// int64 sysmail_sync = 3;
inline void MailUserBox::clear_sysmail_sync() {
  sysmail_sync_ = int64_t{0};
}
inline int64_t MailUserBox::_internal_sysmail_sync() const {
  return sysmail_sync_;
}
inline int64_t MailUserBox::sysmail_sync() const {
  // @@protoc_insertion_point(field_get:PRO.MailUserBox.sysmail_sync)
  return _internal_sysmail_sync();
}
inline void MailUserBox::_internal_set_sysmail_sync(int64_t value) {
  
  sysmail_sync_ = value;
}
inline void MailUserBox::set_sysmail_sync(int64_t value) {
  _internal_set_sysmail_sync(value);
  // @@protoc_insertion_point(field_set:PRO.MailUserBox.sysmail_sync)
}

// int64 lastlist_mail = 4;
inline void MailUserBox::clear_lastlist_mail() {
  lastlist_mail_ = int64_t{0};
}
inline int64_t MailUserBox::_internal_lastlist_mail() const {
  return lastlist_mail_;
}
inline int64_t MailUserBox::lastlist_mail() const {
  // @@protoc_insertion_point(field_get:PRO.MailUserBox.lastlist_mail)
  return _internal_lastlist_mail();
}
inline void MailUserBox::_internal_set_lastlist_mail(int64_t value) {
  
  lastlist_mail_ = value;
}
inline void MailUserBox::set_lastlist_mail(int64_t value) {
  _internal_set_lastlist_mail(value);
  // @@protoc_insertion_point(field_set:PRO.MailUserBox.lastlist_mail)
}

// -------------------------------------------------------------------

// Mail_NewMail_ntf

// optional .PRO.UserToken utoken = 1;
inline bool Mail_NewMail_ntf::_internal_has_utoken() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || utoken_ != nullptr);
  return value;
}
inline bool Mail_NewMail_ntf::has_utoken() const {
  return _internal_has_utoken();
}
inline const ::PRO::UserToken& Mail_NewMail_ntf::_internal_utoken() const {
  const ::PRO::UserToken* p = utoken_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::UserToken&>(
      ::PRO::_UserToken_default_instance_);
}
inline const ::PRO::UserToken& Mail_NewMail_ntf::utoken() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_NewMail_ntf.utoken)
  return _internal_utoken();
}
inline void Mail_NewMail_ntf::unsafe_arena_set_allocated_utoken(
    ::PRO::UserToken* utoken) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  utoken_ = utoken;
  if (utoken) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.Mail_NewMail_ntf.utoken)
}
inline ::PRO::UserToken* Mail_NewMail_ntf::release_utoken() {
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::UserToken* Mail_NewMail_ntf::unsafe_arena_release_utoken() {
  // @@protoc_insertion_point(field_release:PRO.Mail_NewMail_ntf.utoken)
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
  return temp;
}
inline ::PRO::UserToken* Mail_NewMail_ntf::_internal_mutable_utoken() {
  _has_bits_[0] |= 0x00000001u;
  if (utoken_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::UserToken>(GetArenaForAllocation());
    utoken_ = p;
  }
  return utoken_;
}
inline ::PRO::UserToken* Mail_NewMail_ntf::mutable_utoken() {
  ::PRO::UserToken* _msg = _internal_mutable_utoken();
  // @@protoc_insertion_point(field_mutable:PRO.Mail_NewMail_ntf.utoken)
  return _msg;
}
inline void Mail_NewMail_ntf::set_allocated_utoken(::PRO::UserToken* utoken) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  if (utoken) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken));
    if (message_arena != submessage_arena) {
      utoken = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, utoken, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  utoken_ = utoken;
  // @@protoc_insertion_point(field_set_allocated:PRO.Mail_NewMail_ntf.utoken)
}

// -------------------------------------------------------------------

// Mail_MailGet_req

// optional .PRO.UserToken utoken = 1;
inline bool Mail_MailGet_req::_internal_has_utoken() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || utoken_ != nullptr);
  return value;
}
inline bool Mail_MailGet_req::has_utoken() const {
  return _internal_has_utoken();
}
inline const ::PRO::UserToken& Mail_MailGet_req::_internal_utoken() const {
  const ::PRO::UserToken* p = utoken_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::UserToken&>(
      ::PRO::_UserToken_default_instance_);
}
inline const ::PRO::UserToken& Mail_MailGet_req::utoken() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_MailGet_req.utoken)
  return _internal_utoken();
}
inline void Mail_MailGet_req::unsafe_arena_set_allocated_utoken(
    ::PRO::UserToken* utoken) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  utoken_ = utoken;
  if (utoken) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.Mail_MailGet_req.utoken)
}
inline ::PRO::UserToken* Mail_MailGet_req::release_utoken() {
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::UserToken* Mail_MailGet_req::unsafe_arena_release_utoken() {
  // @@protoc_insertion_point(field_release:PRO.Mail_MailGet_req.utoken)
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
  return temp;
}
inline ::PRO::UserToken* Mail_MailGet_req::_internal_mutable_utoken() {
  _has_bits_[0] |= 0x00000001u;
  if (utoken_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::UserToken>(GetArenaForAllocation());
    utoken_ = p;
  }
  return utoken_;
}
inline ::PRO::UserToken* Mail_MailGet_req::mutable_utoken() {
  ::PRO::UserToken* _msg = _internal_mutable_utoken();
  // @@protoc_insertion_point(field_mutable:PRO.Mail_MailGet_req.utoken)
  return _msg;
}
inline void Mail_MailGet_req::set_allocated_utoken(::PRO::UserToken* utoken) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  if (utoken) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken));
    if (message_arena != submessage_arena) {
      utoken = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, utoken, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  utoken_ = utoken;
  // @@protoc_insertion_point(field_set_allocated:PRO.Mail_MailGet_req.utoken)
}

// int64 mailiid = 2;
inline void Mail_MailGet_req::clear_mailiid() {
  mailiid_ = int64_t{0};
}
inline int64_t Mail_MailGet_req::_internal_mailiid() const {
  return mailiid_;
}
inline int64_t Mail_MailGet_req::mailiid() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_MailGet_req.mailiid)
  return _internal_mailiid();
}
inline void Mail_MailGet_req::_internal_set_mailiid(int64_t value) {
  
  mailiid_ = value;
}
inline void Mail_MailGet_req::set_mailiid(int64_t value) {
  _internal_set_mailiid(value);
  // @@protoc_insertion_point(field_set:PRO.Mail_MailGet_req.mailiid)
}

// bool next = 3;
inline void Mail_MailGet_req::clear_next() {
  next_ = false;
}
inline bool Mail_MailGet_req::_internal_next() const {
  return next_;
}
inline bool Mail_MailGet_req::next() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_MailGet_req.next)
  return _internal_next();
}
inline void Mail_MailGet_req::_internal_set_next(bool value) {
  
  next_ = value;
}
inline void Mail_MailGet_req::set_next(bool value) {
  _internal_set_next(value);
  // @@protoc_insertion_point(field_set:PRO.Mail_MailGet_req.next)
}

// int32 num = 4;
inline void Mail_MailGet_req::clear_num() {
  num_ = 0;
}
inline int32_t Mail_MailGet_req::_internal_num() const {
  return num_;
}
inline int32_t Mail_MailGet_req::num() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_MailGet_req.num)
  return _internal_num();
}
inline void Mail_MailGet_req::_internal_set_num(int32_t value) {
  
  num_ = value;
}
inline void Mail_MailGet_req::set_num(int32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:PRO.Mail_MailGet_req.num)
}

// -------------------------------------------------------------------

// Mail_MailGet_ack

// optional .PRO.UserToken utoken = 1;
inline bool Mail_MailGet_ack::_internal_has_utoken() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || utoken_ != nullptr);
  return value;
}
inline bool Mail_MailGet_ack::has_utoken() const {
  return _internal_has_utoken();
}
inline const ::PRO::UserToken& Mail_MailGet_ack::_internal_utoken() const {
  const ::PRO::UserToken* p = utoken_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::UserToken&>(
      ::PRO::_UserToken_default_instance_);
}
inline const ::PRO::UserToken& Mail_MailGet_ack::utoken() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_MailGet_ack.utoken)
  return _internal_utoken();
}
inline void Mail_MailGet_ack::unsafe_arena_set_allocated_utoken(
    ::PRO::UserToken* utoken) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  utoken_ = utoken;
  if (utoken) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.Mail_MailGet_ack.utoken)
}
inline ::PRO::UserToken* Mail_MailGet_ack::release_utoken() {
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::UserToken* Mail_MailGet_ack::unsafe_arena_release_utoken() {
  // @@protoc_insertion_point(field_release:PRO.Mail_MailGet_ack.utoken)
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
  return temp;
}
inline ::PRO::UserToken* Mail_MailGet_ack::_internal_mutable_utoken() {
  _has_bits_[0] |= 0x00000001u;
  if (utoken_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::UserToken>(GetArenaForAllocation());
    utoken_ = p;
  }
  return utoken_;
}
inline ::PRO::UserToken* Mail_MailGet_ack::mutable_utoken() {
  ::PRO::UserToken* _msg = _internal_mutable_utoken();
  // @@protoc_insertion_point(field_mutable:PRO.Mail_MailGet_ack.utoken)
  return _msg;
}
inline void Mail_MailGet_ack::set_allocated_utoken(::PRO::UserToken* utoken) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  if (utoken) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken));
    if (message_arena != submessage_arena) {
      utoken = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, utoken, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  utoken_ = utoken;
  // @@protoc_insertion_point(field_set_allocated:PRO.Mail_MailGet_ack.utoken)
}

// repeated .PRO.MailNormalItem mails = 2;
inline int Mail_MailGet_ack::_internal_mails_size() const {
  return mails_.size();
}
inline int Mail_MailGet_ack::mails_size() const {
  return _internal_mails_size();
}
inline ::PRO::MailNormalItem* Mail_MailGet_ack::mutable_mails(int index) {
  // @@protoc_insertion_point(field_mutable:PRO.Mail_MailGet_ack.mails)
  return mails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::MailNormalItem >*
Mail_MailGet_ack::mutable_mails() {
  // @@protoc_insertion_point(field_mutable_list:PRO.Mail_MailGet_ack.mails)
  return &mails_;
}
inline const ::PRO::MailNormalItem& Mail_MailGet_ack::_internal_mails(int index) const {
  return mails_.Get(index);
}
inline const ::PRO::MailNormalItem& Mail_MailGet_ack::mails(int index) const {
  // @@protoc_insertion_point(field_get:PRO.Mail_MailGet_ack.mails)
  return _internal_mails(index);
}
inline ::PRO::MailNormalItem* Mail_MailGet_ack::_internal_add_mails() {
  return mails_.Add();
}
inline ::PRO::MailNormalItem* Mail_MailGet_ack::add_mails() {
  ::PRO::MailNormalItem* _add = _internal_add_mails();
  // @@protoc_insertion_point(field_add:PRO.Mail_MailGet_ack.mails)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::MailNormalItem >&
Mail_MailGet_ack::mails() const {
  // @@protoc_insertion_point(field_list:PRO.Mail_MailGet_ack.mails)
  return mails_;
}

// int32 totle = 3;
inline void Mail_MailGet_ack::clear_totle() {
  totle_ = 0;
}
inline int32_t Mail_MailGet_ack::_internal_totle() const {
  return totle_;
}
inline int32_t Mail_MailGet_ack::totle() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_MailGet_ack.totle)
  return _internal_totle();
}
inline void Mail_MailGet_ack::_internal_set_totle(int32_t value) {
  
  totle_ = value;
}
inline void Mail_MailGet_ack::set_totle(int32_t value) {
  _internal_set_totle(value);
  // @@protoc_insertion_point(field_set:PRO.Mail_MailGet_ack.totle)
}

// -------------------------------------------------------------------

// Mail_UserOnline_active

// optional .PRO.UserToken utoken = 1;
inline bool Mail_UserOnline_active::_internal_has_utoken() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || utoken_ != nullptr);
  return value;
}
inline bool Mail_UserOnline_active::has_utoken() const {
  return _internal_has_utoken();
}
inline const ::PRO::UserToken& Mail_UserOnline_active::_internal_utoken() const {
  const ::PRO::UserToken* p = utoken_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::UserToken&>(
      ::PRO::_UserToken_default_instance_);
}
inline const ::PRO::UserToken& Mail_UserOnline_active::utoken() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_UserOnline_active.utoken)
  return _internal_utoken();
}
inline void Mail_UserOnline_active::unsafe_arena_set_allocated_utoken(
    ::PRO::UserToken* utoken) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  utoken_ = utoken;
  if (utoken) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.Mail_UserOnline_active.utoken)
}
inline ::PRO::UserToken* Mail_UserOnline_active::release_utoken() {
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::UserToken* Mail_UserOnline_active::unsafe_arena_release_utoken() {
  // @@protoc_insertion_point(field_release:PRO.Mail_UserOnline_active.utoken)
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
  return temp;
}
inline ::PRO::UserToken* Mail_UserOnline_active::_internal_mutable_utoken() {
  _has_bits_[0] |= 0x00000001u;
  if (utoken_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::UserToken>(GetArenaForAllocation());
    utoken_ = p;
  }
  return utoken_;
}
inline ::PRO::UserToken* Mail_UserOnline_active::mutable_utoken() {
  ::PRO::UserToken* _msg = _internal_mutable_utoken();
  // @@protoc_insertion_point(field_mutable:PRO.Mail_UserOnline_active.utoken)
  return _msg;
}
inline void Mail_UserOnline_active::set_allocated_utoken(::PRO::UserToken* utoken) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  if (utoken) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken));
    if (message_arena != submessage_arena) {
      utoken = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, utoken, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  utoken_ = utoken;
  // @@protoc_insertion_point(field_set_allocated:PRO.Mail_UserOnline_active.utoken)
}

// int64 last_mailiid = 2;
inline void Mail_UserOnline_active::clear_last_mailiid() {
  last_mailiid_ = int64_t{0};
}
inline int64_t Mail_UserOnline_active::_internal_last_mailiid() const {
  return last_mailiid_;
}
inline int64_t Mail_UserOnline_active::last_mailiid() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_UserOnline_active.last_mailiid)
  return _internal_last_mailiid();
}
inline void Mail_UserOnline_active::_internal_set_last_mailiid(int64_t value) {
  
  last_mailiid_ = value;
}
inline void Mail_UserOnline_active::set_last_mailiid(int64_t value) {
  _internal_set_last_mailiid(value);
  // @@protoc_insertion_point(field_set:PRO.Mail_UserOnline_active.last_mailiid)
}

// bool firstactive = 3;
inline void Mail_UserOnline_active::clear_firstactive() {
  firstactive_ = false;
}
inline bool Mail_UserOnline_active::_internal_firstactive() const {
  return firstactive_;
}
inline bool Mail_UserOnline_active::firstactive() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_UserOnline_active.firstactive)
  return _internal_firstactive();
}
inline void Mail_UserOnline_active::_internal_set_firstactive(bool value) {
  
  firstactive_ = value;
}
inline void Mail_UserOnline_active::set_firstactive(bool value) {
  _internal_set_firstactive(value);
  // @@protoc_insertion_point(field_set:PRO.Mail_UserOnline_active.firstactive)
}

// -------------------------------------------------------------------

// Mail_ReadMail_req

// optional .PRO.UserToken utoken = 1;
inline bool Mail_ReadMail_req::_internal_has_utoken() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || utoken_ != nullptr);
  return value;
}
inline bool Mail_ReadMail_req::has_utoken() const {
  return _internal_has_utoken();
}
inline const ::PRO::UserToken& Mail_ReadMail_req::_internal_utoken() const {
  const ::PRO::UserToken* p = utoken_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::UserToken&>(
      ::PRO::_UserToken_default_instance_);
}
inline const ::PRO::UserToken& Mail_ReadMail_req::utoken() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_ReadMail_req.utoken)
  return _internal_utoken();
}
inline void Mail_ReadMail_req::unsafe_arena_set_allocated_utoken(
    ::PRO::UserToken* utoken) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  utoken_ = utoken;
  if (utoken) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.Mail_ReadMail_req.utoken)
}
inline ::PRO::UserToken* Mail_ReadMail_req::release_utoken() {
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::UserToken* Mail_ReadMail_req::unsafe_arena_release_utoken() {
  // @@protoc_insertion_point(field_release:PRO.Mail_ReadMail_req.utoken)
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
  return temp;
}
inline ::PRO::UserToken* Mail_ReadMail_req::_internal_mutable_utoken() {
  _has_bits_[0] |= 0x00000001u;
  if (utoken_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::UserToken>(GetArenaForAllocation());
    utoken_ = p;
  }
  return utoken_;
}
inline ::PRO::UserToken* Mail_ReadMail_req::mutable_utoken() {
  ::PRO::UserToken* _msg = _internal_mutable_utoken();
  // @@protoc_insertion_point(field_mutable:PRO.Mail_ReadMail_req.utoken)
  return _msg;
}
inline void Mail_ReadMail_req::set_allocated_utoken(::PRO::UserToken* utoken) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  if (utoken) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken));
    if (message_arena != submessage_arena) {
      utoken = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, utoken, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  utoken_ = utoken;
  // @@protoc_insertion_point(field_set_allocated:PRO.Mail_ReadMail_req.utoken)
}

// int64 mail_iid = 2;
inline void Mail_ReadMail_req::clear_mail_iid() {
  mail_iid_ = int64_t{0};
}
inline int64_t Mail_ReadMail_req::_internal_mail_iid() const {
  return mail_iid_;
}
inline int64_t Mail_ReadMail_req::mail_iid() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_ReadMail_req.mail_iid)
  return _internal_mail_iid();
}
inline void Mail_ReadMail_req::_internal_set_mail_iid(int64_t value) {
  
  mail_iid_ = value;
}
inline void Mail_ReadMail_req::set_mail_iid(int64_t value) {
  _internal_set_mail_iid(value);
  // @@protoc_insertion_point(field_set:PRO.Mail_ReadMail_req.mail_iid)
}

// -------------------------------------------------------------------

// Mail_ReadMail_ack

// optional .PRO.UserToken utoken = 1;
inline bool Mail_ReadMail_ack::_internal_has_utoken() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || utoken_ != nullptr);
  return value;
}
inline bool Mail_ReadMail_ack::has_utoken() const {
  return _internal_has_utoken();
}
inline const ::PRO::UserToken& Mail_ReadMail_ack::_internal_utoken() const {
  const ::PRO::UserToken* p = utoken_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::UserToken&>(
      ::PRO::_UserToken_default_instance_);
}
inline const ::PRO::UserToken& Mail_ReadMail_ack::utoken() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_ReadMail_ack.utoken)
  return _internal_utoken();
}
inline void Mail_ReadMail_ack::unsafe_arena_set_allocated_utoken(
    ::PRO::UserToken* utoken) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  utoken_ = utoken;
  if (utoken) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.Mail_ReadMail_ack.utoken)
}
inline ::PRO::UserToken* Mail_ReadMail_ack::release_utoken() {
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::UserToken* Mail_ReadMail_ack::unsafe_arena_release_utoken() {
  // @@protoc_insertion_point(field_release:PRO.Mail_ReadMail_ack.utoken)
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
  return temp;
}
inline ::PRO::UserToken* Mail_ReadMail_ack::_internal_mutable_utoken() {
  _has_bits_[0] |= 0x00000001u;
  if (utoken_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::UserToken>(GetArenaForAllocation());
    utoken_ = p;
  }
  return utoken_;
}
inline ::PRO::UserToken* Mail_ReadMail_ack::mutable_utoken() {
  ::PRO::UserToken* _msg = _internal_mutable_utoken();
  // @@protoc_insertion_point(field_mutable:PRO.Mail_ReadMail_ack.utoken)
  return _msg;
}
inline void Mail_ReadMail_ack::set_allocated_utoken(::PRO::UserToken* utoken) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  if (utoken) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken));
    if (message_arena != submessage_arena) {
      utoken = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, utoken, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  utoken_ = utoken;
  // @@protoc_insertion_point(field_set_allocated:PRO.Mail_ReadMail_ack.utoken)
}

// int32 result = 2;
inline void Mail_ReadMail_ack::clear_result() {
  result_ = 0;
}
inline int32_t Mail_ReadMail_ack::_internal_result() const {
  return result_;
}
inline int32_t Mail_ReadMail_ack::result() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_ReadMail_ack.result)
  return _internal_result();
}
inline void Mail_ReadMail_ack::_internal_set_result(int32_t value) {
  
  result_ = value;
}
inline void Mail_ReadMail_ack::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:PRO.Mail_ReadMail_ack.result)
}

// int64 mail_iid = 3;
inline void Mail_ReadMail_ack::clear_mail_iid() {
  mail_iid_ = int64_t{0};
}
inline int64_t Mail_ReadMail_ack::_internal_mail_iid() const {
  return mail_iid_;
}
inline int64_t Mail_ReadMail_ack::mail_iid() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_ReadMail_ack.mail_iid)
  return _internal_mail_iid();
}
inline void Mail_ReadMail_ack::_internal_set_mail_iid(int64_t value) {
  
  mail_iid_ = value;
}
inline void Mail_ReadMail_ack::set_mail_iid(int64_t value) {
  _internal_set_mail_iid(value);
  // @@protoc_insertion_point(field_set:PRO.Mail_ReadMail_ack.mail_iid)
}

// -------------------------------------------------------------------

// Mail_DeleteMail_req

// optional .PRO.UserToken utoken = 1;
inline bool Mail_DeleteMail_req::_internal_has_utoken() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || utoken_ != nullptr);
  return value;
}
inline bool Mail_DeleteMail_req::has_utoken() const {
  return _internal_has_utoken();
}
inline const ::PRO::UserToken& Mail_DeleteMail_req::_internal_utoken() const {
  const ::PRO::UserToken* p = utoken_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::UserToken&>(
      ::PRO::_UserToken_default_instance_);
}
inline const ::PRO::UserToken& Mail_DeleteMail_req::utoken() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_DeleteMail_req.utoken)
  return _internal_utoken();
}
inline void Mail_DeleteMail_req::unsafe_arena_set_allocated_utoken(
    ::PRO::UserToken* utoken) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  utoken_ = utoken;
  if (utoken) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.Mail_DeleteMail_req.utoken)
}
inline ::PRO::UserToken* Mail_DeleteMail_req::release_utoken() {
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::UserToken* Mail_DeleteMail_req::unsafe_arena_release_utoken() {
  // @@protoc_insertion_point(field_release:PRO.Mail_DeleteMail_req.utoken)
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
  return temp;
}
inline ::PRO::UserToken* Mail_DeleteMail_req::_internal_mutable_utoken() {
  _has_bits_[0] |= 0x00000001u;
  if (utoken_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::UserToken>(GetArenaForAllocation());
    utoken_ = p;
  }
  return utoken_;
}
inline ::PRO::UserToken* Mail_DeleteMail_req::mutable_utoken() {
  ::PRO::UserToken* _msg = _internal_mutable_utoken();
  // @@protoc_insertion_point(field_mutable:PRO.Mail_DeleteMail_req.utoken)
  return _msg;
}
inline void Mail_DeleteMail_req::set_allocated_utoken(::PRO::UserToken* utoken) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  if (utoken) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken));
    if (message_arena != submessage_arena) {
      utoken = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, utoken, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  utoken_ = utoken;
  // @@protoc_insertion_point(field_set_allocated:PRO.Mail_DeleteMail_req.utoken)
}

// int64 mail_iid = 2;
inline void Mail_DeleteMail_req::clear_mail_iid() {
  mail_iid_ = int64_t{0};
}
inline int64_t Mail_DeleteMail_req::_internal_mail_iid() const {
  return mail_iid_;
}
inline int64_t Mail_DeleteMail_req::mail_iid() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_DeleteMail_req.mail_iid)
  return _internal_mail_iid();
}
inline void Mail_DeleteMail_req::_internal_set_mail_iid(int64_t value) {
  
  mail_iid_ = value;
}
inline void Mail_DeleteMail_req::set_mail_iid(int64_t value) {
  _internal_set_mail_iid(value);
  // @@protoc_insertion_point(field_set:PRO.Mail_DeleteMail_req.mail_iid)
}

// -------------------------------------------------------------------

// Mail_DeleteMail_ack

// optional .PRO.UserToken utoken = 1;
inline bool Mail_DeleteMail_ack::_internal_has_utoken() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || utoken_ != nullptr);
  return value;
}
inline bool Mail_DeleteMail_ack::has_utoken() const {
  return _internal_has_utoken();
}
inline const ::PRO::UserToken& Mail_DeleteMail_ack::_internal_utoken() const {
  const ::PRO::UserToken* p = utoken_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::UserToken&>(
      ::PRO::_UserToken_default_instance_);
}
inline const ::PRO::UserToken& Mail_DeleteMail_ack::utoken() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_DeleteMail_ack.utoken)
  return _internal_utoken();
}
inline void Mail_DeleteMail_ack::unsafe_arena_set_allocated_utoken(
    ::PRO::UserToken* utoken) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  utoken_ = utoken;
  if (utoken) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.Mail_DeleteMail_ack.utoken)
}
inline ::PRO::UserToken* Mail_DeleteMail_ack::release_utoken() {
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::UserToken* Mail_DeleteMail_ack::unsafe_arena_release_utoken() {
  // @@protoc_insertion_point(field_release:PRO.Mail_DeleteMail_ack.utoken)
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
  return temp;
}
inline ::PRO::UserToken* Mail_DeleteMail_ack::_internal_mutable_utoken() {
  _has_bits_[0] |= 0x00000001u;
  if (utoken_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::UserToken>(GetArenaForAllocation());
    utoken_ = p;
  }
  return utoken_;
}
inline ::PRO::UserToken* Mail_DeleteMail_ack::mutable_utoken() {
  ::PRO::UserToken* _msg = _internal_mutable_utoken();
  // @@protoc_insertion_point(field_mutable:PRO.Mail_DeleteMail_ack.utoken)
  return _msg;
}
inline void Mail_DeleteMail_ack::set_allocated_utoken(::PRO::UserToken* utoken) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  if (utoken) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken));
    if (message_arena != submessage_arena) {
      utoken = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, utoken, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  utoken_ = utoken;
  // @@protoc_insertion_point(field_set_allocated:PRO.Mail_DeleteMail_ack.utoken)
}

// int32 result = 2;
inline void Mail_DeleteMail_ack::clear_result() {
  result_ = 0;
}
inline int32_t Mail_DeleteMail_ack::_internal_result() const {
  return result_;
}
inline int32_t Mail_DeleteMail_ack::result() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_DeleteMail_ack.result)
  return _internal_result();
}
inline void Mail_DeleteMail_ack::_internal_set_result(int32_t value) {
  
  result_ = value;
}
inline void Mail_DeleteMail_ack::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:PRO.Mail_DeleteMail_ack.result)
}

// int64 mail_iid = 3;
inline void Mail_DeleteMail_ack::clear_mail_iid() {
  mail_iid_ = int64_t{0};
}
inline int64_t Mail_DeleteMail_ack::_internal_mail_iid() const {
  return mail_iid_;
}
inline int64_t Mail_DeleteMail_ack::mail_iid() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_DeleteMail_ack.mail_iid)
  return _internal_mail_iid();
}
inline void Mail_DeleteMail_ack::_internal_set_mail_iid(int64_t value) {
  
  mail_iid_ = value;
}
inline void Mail_DeleteMail_ack::set_mail_iid(int64_t value) {
  _internal_set_mail_iid(value);
  // @@protoc_insertion_point(field_set:PRO.Mail_DeleteMail_ack.mail_iid)
}

// -------------------------------------------------------------------

// Mail_UnBindAttachs_req

// optional .PRO.UserToken utoken = 1;
inline bool Mail_UnBindAttachs_req::_internal_has_utoken() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || utoken_ != nullptr);
  return value;
}
inline bool Mail_UnBindAttachs_req::has_utoken() const {
  return _internal_has_utoken();
}
inline const ::PRO::UserToken& Mail_UnBindAttachs_req::_internal_utoken() const {
  const ::PRO::UserToken* p = utoken_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::UserToken&>(
      ::PRO::_UserToken_default_instance_);
}
inline const ::PRO::UserToken& Mail_UnBindAttachs_req::utoken() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_UnBindAttachs_req.utoken)
  return _internal_utoken();
}
inline void Mail_UnBindAttachs_req::unsafe_arena_set_allocated_utoken(
    ::PRO::UserToken* utoken) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  utoken_ = utoken;
  if (utoken) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.Mail_UnBindAttachs_req.utoken)
}
inline ::PRO::UserToken* Mail_UnBindAttachs_req::release_utoken() {
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::UserToken* Mail_UnBindAttachs_req::unsafe_arena_release_utoken() {
  // @@protoc_insertion_point(field_release:PRO.Mail_UnBindAttachs_req.utoken)
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
  return temp;
}
inline ::PRO::UserToken* Mail_UnBindAttachs_req::_internal_mutable_utoken() {
  _has_bits_[0] |= 0x00000001u;
  if (utoken_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::UserToken>(GetArenaForAllocation());
    utoken_ = p;
  }
  return utoken_;
}
inline ::PRO::UserToken* Mail_UnBindAttachs_req::mutable_utoken() {
  ::PRO::UserToken* _msg = _internal_mutable_utoken();
  // @@protoc_insertion_point(field_mutable:PRO.Mail_UnBindAttachs_req.utoken)
  return _msg;
}
inline void Mail_UnBindAttachs_req::set_allocated_utoken(::PRO::UserToken* utoken) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  if (utoken) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken));
    if (message_arena != submessage_arena) {
      utoken = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, utoken, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  utoken_ = utoken;
  // @@protoc_insertion_point(field_set_allocated:PRO.Mail_UnBindAttachs_req.utoken)
}

// int64 mail_iid = 2;
inline void Mail_UnBindAttachs_req::clear_mail_iid() {
  mail_iid_ = int64_t{0};
}
inline int64_t Mail_UnBindAttachs_req::_internal_mail_iid() const {
  return mail_iid_;
}
inline int64_t Mail_UnBindAttachs_req::mail_iid() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_UnBindAttachs_req.mail_iid)
  return _internal_mail_iid();
}
inline void Mail_UnBindAttachs_req::_internal_set_mail_iid(int64_t value) {
  
  mail_iid_ = value;
}
inline void Mail_UnBindAttachs_req::set_mail_iid(int64_t value) {
  _internal_set_mail_iid(value);
  // @@protoc_insertion_point(field_set:PRO.Mail_UnBindAttachs_req.mail_iid)
}

// -------------------------------------------------------------------

// Mail_UnBindAttachs_ack

// optional .PRO.UserToken utoken = 1;
inline bool Mail_UnBindAttachs_ack::_internal_has_utoken() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || utoken_ != nullptr);
  return value;
}
inline bool Mail_UnBindAttachs_ack::has_utoken() const {
  return _internal_has_utoken();
}
inline const ::PRO::UserToken& Mail_UnBindAttachs_ack::_internal_utoken() const {
  const ::PRO::UserToken* p = utoken_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::UserToken&>(
      ::PRO::_UserToken_default_instance_);
}
inline const ::PRO::UserToken& Mail_UnBindAttachs_ack::utoken() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_UnBindAttachs_ack.utoken)
  return _internal_utoken();
}
inline void Mail_UnBindAttachs_ack::unsafe_arena_set_allocated_utoken(
    ::PRO::UserToken* utoken) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  utoken_ = utoken;
  if (utoken) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.Mail_UnBindAttachs_ack.utoken)
}
inline ::PRO::UserToken* Mail_UnBindAttachs_ack::release_utoken() {
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::UserToken* Mail_UnBindAttachs_ack::unsafe_arena_release_utoken() {
  // @@protoc_insertion_point(field_release:PRO.Mail_UnBindAttachs_ack.utoken)
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
  return temp;
}
inline ::PRO::UserToken* Mail_UnBindAttachs_ack::_internal_mutable_utoken() {
  _has_bits_[0] |= 0x00000001u;
  if (utoken_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::UserToken>(GetArenaForAllocation());
    utoken_ = p;
  }
  return utoken_;
}
inline ::PRO::UserToken* Mail_UnBindAttachs_ack::mutable_utoken() {
  ::PRO::UserToken* _msg = _internal_mutable_utoken();
  // @@protoc_insertion_point(field_mutable:PRO.Mail_UnBindAttachs_ack.utoken)
  return _msg;
}
inline void Mail_UnBindAttachs_ack::set_allocated_utoken(::PRO::UserToken* utoken) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  if (utoken) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken));
    if (message_arena != submessage_arena) {
      utoken = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, utoken, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  utoken_ = utoken;
  // @@protoc_insertion_point(field_set_allocated:PRO.Mail_UnBindAttachs_ack.utoken)
}

// int32 result = 2;
inline void Mail_UnBindAttachs_ack::clear_result() {
  result_ = 0;
}
inline int32_t Mail_UnBindAttachs_ack::_internal_result() const {
  return result_;
}
inline int32_t Mail_UnBindAttachs_ack::result() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_UnBindAttachs_ack.result)
  return _internal_result();
}
inline void Mail_UnBindAttachs_ack::_internal_set_result(int32_t value) {
  
  result_ = value;
}
inline void Mail_UnBindAttachs_ack::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:PRO.Mail_UnBindAttachs_ack.result)
}

// int64 mail_iid = 3;
inline void Mail_UnBindAttachs_ack::clear_mail_iid() {
  mail_iid_ = int64_t{0};
}
inline int64_t Mail_UnBindAttachs_ack::_internal_mail_iid() const {
  return mail_iid_;
}
inline int64_t Mail_UnBindAttachs_ack::mail_iid() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_UnBindAttachs_ack.mail_iid)
  return _internal_mail_iid();
}
inline void Mail_UnBindAttachs_ack::_internal_set_mail_iid(int64_t value) {
  
  mail_iid_ = value;
}
inline void Mail_UnBindAttachs_ack::set_mail_iid(int64_t value) {
  _internal_set_mail_iid(value);
  // @@protoc_insertion_point(field_set:PRO.Mail_UnBindAttachs_ack.mail_iid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PRO

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::PRO::MailType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PRO::MailType>() {
  return ::PRO::MailType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mail_5fsystem_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eureka_internal.proto

#include "eureka_internal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace PRO {
constexpr EurekaServerNode::EurekaServerNode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , iid_(int64_t{0})
  , token_(int64_t{0})
  , port_(0){}
struct EurekaServerNodeDefaultTypeInternal {
  constexpr EurekaServerNodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EurekaServerNodeDefaultTypeInternal() {}
  union {
    EurekaServerNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EurekaServerNodeDefaultTypeInternal _EurekaServerNode_default_instance_;
constexpr Erk_EurekaBind_req::Erk_EurekaBind_req(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , iid_(int64_t{0})
  , token_(int64_t{0})
  , port_(0){}
struct Erk_EurekaBind_reqDefaultTypeInternal {
  constexpr Erk_EurekaBind_reqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Erk_EurekaBind_reqDefaultTypeInternal() {}
  union {
    Erk_EurekaBind_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Erk_EurekaBind_reqDefaultTypeInternal _Erk_EurekaBind_req_default_instance_;
constexpr Erk_EurekaBind_ack::Erk_EurekaBind_ack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0){}
struct Erk_EurekaBind_ackDefaultTypeInternal {
  constexpr Erk_EurekaBind_ackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Erk_EurekaBind_ackDefaultTypeInternal() {}
  union {
    Erk_EurekaBind_ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Erk_EurekaBind_ackDefaultTypeInternal _Erk_EurekaBind_ack_default_instance_;
constexpr Erk_EurekaUpdate_ntf::Erk_EurekaUpdate_ntf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : online_()
  , offline_()
  , _offline_cached_byte_size_(0)
  , myiid_(int64_t{0}){}
struct Erk_EurekaUpdate_ntfDefaultTypeInternal {
  constexpr Erk_EurekaUpdate_ntfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Erk_EurekaUpdate_ntfDefaultTypeInternal() {}
  union {
    Erk_EurekaUpdate_ntf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Erk_EurekaUpdate_ntfDefaultTypeInternal _Erk_EurekaUpdate_ntf_default_instance_;
constexpr Erk_Eureka_sync::Erk_Eureka_sync(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : exists_()
  , _exists_cached_byte_size_(0)
  , myiid_(int64_t{0}){}
struct Erk_Eureka_syncDefaultTypeInternal {
  constexpr Erk_Eureka_syncDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Erk_Eureka_syncDefaultTypeInternal() {}
  union {
    Erk_Eureka_sync _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Erk_Eureka_syncDefaultTypeInternal _Erk_Eureka_sync_default_instance_;
constexpr ServerNode_ExtsEntry_DoNotUse::ServerNode_ExtsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ServerNode_ExtsEntry_DoNotUseDefaultTypeInternal {
  constexpr ServerNode_ExtsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerNode_ExtsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ServerNode_ExtsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerNode_ExtsEntry_DoNotUseDefaultTypeInternal _ServerNode_ExtsEntry_DoNotUse_default_instance_;
constexpr ServerNode::ServerNode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : exts_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , iid_(int64_t{0})
  , token_(int64_t{0})
  , port_(0){}
struct ServerNodeDefaultTypeInternal {
  constexpr ServerNodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerNodeDefaultTypeInternal() {}
  union {
    ServerNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerNodeDefaultTypeInternal _ServerNode_default_instance_;
constexpr Erk_ServiceRegist_req_ExtsEntry_DoNotUse::Erk_ServiceRegist_req_ExtsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Erk_ServiceRegist_req_ExtsEntry_DoNotUseDefaultTypeInternal {
  constexpr Erk_ServiceRegist_req_ExtsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Erk_ServiceRegist_req_ExtsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Erk_ServiceRegist_req_ExtsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Erk_ServiceRegist_req_ExtsEntry_DoNotUseDefaultTypeInternal _Erk_ServiceRegist_req_ExtsEntry_DoNotUse_default_instance_;
constexpr Erk_ServiceRegist_req::Erk_ServiceRegist_req(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : exts_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , svr_type_(0)
  , port_(0){}
struct Erk_ServiceRegist_reqDefaultTypeInternal {
  constexpr Erk_ServiceRegist_reqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Erk_ServiceRegist_reqDefaultTypeInternal() {}
  union {
    Erk_ServiceRegist_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Erk_ServiceRegist_reqDefaultTypeInternal _Erk_ServiceRegist_req_default_instance_;
constexpr Erk_ServiceRegist_ack::Erk_ServiceRegist_ack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : iid_(int64_t{0})
  , token_(int64_t{0})
  , eurekaiid_(int64_t{0})
  , eurekatoken_(int64_t{0})
  , result_(0){}
struct Erk_ServiceRegist_ackDefaultTypeInternal {
  constexpr Erk_ServiceRegist_ackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Erk_ServiceRegist_ackDefaultTypeInternal() {}
  union {
    Erk_ServiceRegist_ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Erk_ServiceRegist_ackDefaultTypeInternal _Erk_ServiceRegist_ack_default_instance_;
constexpr Erk_ServiceRegist_Confirm::Erk_ServiceRegist_Confirm(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : iid_(int64_t{0})
  , token_(int64_t{0}){}
struct Erk_ServiceRegist_ConfirmDefaultTypeInternal {
  constexpr Erk_ServiceRegist_ConfirmDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Erk_ServiceRegist_ConfirmDefaultTypeInternal() {}
  union {
    Erk_ServiceRegist_Confirm _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Erk_ServiceRegist_ConfirmDefaultTypeInternal _Erk_ServiceRegist_Confirm_default_instance_;
constexpr Erk_ServiceBind_req::Erk_ServiceBind_req(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : iid_(int64_t{0})
  , token_(int64_t{0})
  , svr_type_(0){}
struct Erk_ServiceBind_reqDefaultTypeInternal {
  constexpr Erk_ServiceBind_reqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Erk_ServiceBind_reqDefaultTypeInternal() {}
  union {
    Erk_ServiceBind_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Erk_ServiceBind_reqDefaultTypeInternal _Erk_ServiceBind_req_default_instance_;
constexpr Erk_ServiceBind_ack::Erk_ServiceBind_ack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0){}
struct Erk_ServiceBind_ackDefaultTypeInternal {
  constexpr Erk_ServiceBind_ackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Erk_ServiceBind_ackDefaultTypeInternal() {}
  union {
    Erk_ServiceBind_ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Erk_ServiceBind_ackDefaultTypeInternal _Erk_ServiceBind_ack_default_instance_;
constexpr Erk_ServiceSubscribe_req_svrinfo::Erk_ServiceSubscribe_req_svrinfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : exits_()
  , _exits_cached_byte_size_(0)
  , svr_type_(0){}
struct Erk_ServiceSubscribe_req_svrinfoDefaultTypeInternal {
  constexpr Erk_ServiceSubscribe_req_svrinfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Erk_ServiceSubscribe_req_svrinfoDefaultTypeInternal() {}
  union {
    Erk_ServiceSubscribe_req_svrinfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Erk_ServiceSubscribe_req_svrinfoDefaultTypeInternal _Erk_ServiceSubscribe_req_svrinfo_default_instance_;
constexpr Erk_ServiceSubscribe_req::Erk_ServiceSubscribe_req(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : svr_type_()
  , myip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , myiid_(int64_t{0})
  , mysvrtype_(0)
  , myport_(0){}
struct Erk_ServiceSubscribe_reqDefaultTypeInternal {
  constexpr Erk_ServiceSubscribe_reqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Erk_ServiceSubscribe_reqDefaultTypeInternal() {}
  union {
    Erk_ServiceSubscribe_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Erk_ServiceSubscribe_reqDefaultTypeInternal _Erk_ServiceSubscribe_req_default_instance_;
constexpr Erk_ServiceSubscribe_ack::Erk_ServiceSubscribe_ack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : online_()
  , offline_()
  , _offline_cached_byte_size_(0)
  , myiid_(int64_t{0})
  , svr_type_(0){}
struct Erk_ServiceSubscribe_ackDefaultTypeInternal {
  constexpr Erk_ServiceSubscribe_ackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Erk_ServiceSubscribe_ackDefaultTypeInternal() {}
  union {
    Erk_ServiceSubscribe_ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Erk_ServiceSubscribe_ackDefaultTypeInternal _Erk_ServiceSubscribe_ack_default_instance_;
constexpr Erk_ServiceShutdown_ntf::Erk_ServiceShutdown_ntf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : service_(int64_t{0})
  , svr_type_(0){}
struct Erk_ServiceShutdown_ntfDefaultTypeInternal {
  constexpr Erk_ServiceShutdown_ntfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Erk_ServiceShutdown_ntfDefaultTypeInternal() {}
  union {
    Erk_ServiceShutdown_ntf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Erk_ServiceShutdown_ntfDefaultTypeInternal _Erk_ServiceShutdown_ntf_default_instance_;
constexpr Svr_LiveTick_ntf::Svr_LiveTick_ntf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Svr_LiveTick_ntfDefaultTypeInternal {
  constexpr Svr_LiveTick_ntfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Svr_LiveTick_ntfDefaultTypeInternal() {}
  union {
    Svr_LiveTick_ntf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Svr_LiveTick_ntfDefaultTypeInternal _Svr_LiveTick_ntf_default_instance_;
constexpr Svr_ServiceBindService_req_MyextsEntry_DoNotUse::Svr_ServiceBindService_req_MyextsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Svr_ServiceBindService_req_MyextsEntry_DoNotUseDefaultTypeInternal {
  constexpr Svr_ServiceBindService_req_MyextsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Svr_ServiceBindService_req_MyextsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Svr_ServiceBindService_req_MyextsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Svr_ServiceBindService_req_MyextsEntry_DoNotUseDefaultTypeInternal _Svr_ServiceBindService_req_MyextsEntry_DoNotUse_default_instance_;
constexpr Svr_ServiceBindService_req::Svr_ServiceBindService_req(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : myexts_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , myiid_(int64_t{0})
  , mytoken_(int64_t{0})
  , svr_type_(0)
  , toiid_(int64_t{0})
  , totoken_(int64_t{0}){}
struct Svr_ServiceBindService_reqDefaultTypeInternal {
  constexpr Svr_ServiceBindService_reqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Svr_ServiceBindService_reqDefaultTypeInternal() {}
  union {
    Svr_ServiceBindService_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Svr_ServiceBindService_reqDefaultTypeInternal _Svr_ServiceBindService_req_default_instance_;
constexpr Svr_ServiceBindService_ack::Svr_ServiceBindService_ack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
  , svr_type_(0)
  , toiid_(int64_t{0})
  , totoken_(int64_t{0}){}
struct Svr_ServiceBindService_ackDefaultTypeInternal {
  constexpr Svr_ServiceBindService_ackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Svr_ServiceBindService_ackDefaultTypeInternal() {}
  union {
    Svr_ServiceBindService_ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Svr_ServiceBindService_ackDefaultTypeInternal _Svr_ServiceBindService_ack_default_instance_;
}  // namespace PRO
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_eureka_5finternal_2eproto[21];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_eureka_5finternal_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_eureka_5finternal_2eproto = nullptr;

const uint32_t TableStruct_eureka_5finternal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::EurekaServerNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::EurekaServerNode, iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::EurekaServerNode, token_),
  PROTOBUF_FIELD_OFFSET(::PRO::EurekaServerNode, ip_),
  PROTOBUF_FIELD_OFFSET(::PRO::EurekaServerNode, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_EurekaBind_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_EurekaBind_req, iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_EurekaBind_req, token_),
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_EurekaBind_req, ip_),
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_EurekaBind_req, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_EurekaBind_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_EurekaBind_ack, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_EurekaUpdate_ntf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_EurekaUpdate_ntf, myiid_),
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_EurekaUpdate_ntf, online_),
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_EurekaUpdate_ntf, offline_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_Eureka_sync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_Eureka_sync, myiid_),
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_Eureka_sync, exists_),
  PROTOBUF_FIELD_OFFSET(::PRO::ServerNode_ExtsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PRO::ServerNode_ExtsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::ServerNode_ExtsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::PRO::ServerNode_ExtsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::ServerNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::ServerNode, iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::ServerNode, token_),
  PROTOBUF_FIELD_OFFSET(::PRO::ServerNode, ip_),
  PROTOBUF_FIELD_OFFSET(::PRO::ServerNode, port_),
  PROTOBUF_FIELD_OFFSET(::PRO::ServerNode, exts_),
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceRegist_req_ExtsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceRegist_req_ExtsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceRegist_req_ExtsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceRegist_req_ExtsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceRegist_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceRegist_req, svr_type_),
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceRegist_req, ip_),
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceRegist_req, port_),
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceRegist_req, exts_),
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceRegist_ack, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceRegist_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceRegist_ack, result_),
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceRegist_ack, iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceRegist_ack, token_),
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceRegist_ack, eurekaiid_),
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceRegist_ack, eurekatoken_),
  ~0u,
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceRegist_Confirm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceRegist_Confirm, iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceRegist_Confirm, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceBind_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceBind_req, svr_type_),
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceBind_req, iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceBind_req, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceBind_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceBind_ack, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceSubscribe_req_svrinfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceSubscribe_req_svrinfo, svr_type_),
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceSubscribe_req_svrinfo, exits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceSubscribe_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceSubscribe_req, myiid_),
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceSubscribe_req, mysvrtype_),
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceSubscribe_req, myip_),
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceSubscribe_req, myport_),
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceSubscribe_req, svr_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceSubscribe_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceSubscribe_ack, myiid_),
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceSubscribe_ack, svr_type_),
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceSubscribe_ack, online_),
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceSubscribe_ack, offline_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceShutdown_ntf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceShutdown_ntf, svr_type_),
  PROTOBUF_FIELD_OFFSET(::PRO::Erk_ServiceShutdown_ntf, service_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Svr_LiveTick_ntf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Svr_ServiceBindService_req_MyextsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PRO::Svr_ServiceBindService_req_MyextsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Svr_ServiceBindService_req_MyextsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::PRO::Svr_ServiceBindService_req_MyextsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Svr_ServiceBindService_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Svr_ServiceBindService_req, svr_type_),
  PROTOBUF_FIELD_OFFSET(::PRO::Svr_ServiceBindService_req, myiid_),
  PROTOBUF_FIELD_OFFSET(::PRO::Svr_ServiceBindService_req, mytoken_),
  PROTOBUF_FIELD_OFFSET(::PRO::Svr_ServiceBindService_req, myexts_),
  PROTOBUF_FIELD_OFFSET(::PRO::Svr_ServiceBindService_req, toiid_),
  PROTOBUF_FIELD_OFFSET(::PRO::Svr_ServiceBindService_req, totoken_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Svr_ServiceBindService_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Svr_ServiceBindService_ack, result_),
  PROTOBUF_FIELD_OFFSET(::PRO::Svr_ServiceBindService_ack, svr_type_),
  PROTOBUF_FIELD_OFFSET(::PRO::Svr_ServiceBindService_ack, toiid_),
  PROTOBUF_FIELD_OFFSET(::PRO::Svr_ServiceBindService_ack, totoken_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::PRO::EurekaServerNode)},
  { 10, -1, -1, sizeof(::PRO::Erk_EurekaBind_req)},
  { 20, -1, -1, sizeof(::PRO::Erk_EurekaBind_ack)},
  { 27, -1, -1, sizeof(::PRO::Erk_EurekaUpdate_ntf)},
  { 36, -1, -1, sizeof(::PRO::Erk_Eureka_sync)},
  { 44, 52, -1, sizeof(::PRO::ServerNode_ExtsEntry_DoNotUse)},
  { 54, -1, -1, sizeof(::PRO::ServerNode)},
  { 65, 73, -1, sizeof(::PRO::Erk_ServiceRegist_req_ExtsEntry_DoNotUse)},
  { 75, -1, -1, sizeof(::PRO::Erk_ServiceRegist_req)},
  { 85, 96, -1, sizeof(::PRO::Erk_ServiceRegist_ack)},
  { 101, -1, -1, sizeof(::PRO::Erk_ServiceRegist_Confirm)},
  { 109, -1, -1, sizeof(::PRO::Erk_ServiceBind_req)},
  { 118, -1, -1, sizeof(::PRO::Erk_ServiceBind_ack)},
  { 125, -1, -1, sizeof(::PRO::Erk_ServiceSubscribe_req_svrinfo)},
  { 133, -1, -1, sizeof(::PRO::Erk_ServiceSubscribe_req)},
  { 144, -1, -1, sizeof(::PRO::Erk_ServiceSubscribe_ack)},
  { 154, -1, -1, sizeof(::PRO::Erk_ServiceShutdown_ntf)},
  { 162, -1, -1, sizeof(::PRO::Svr_LiveTick_ntf)},
  { 168, 176, -1, sizeof(::PRO::Svr_ServiceBindService_req_MyextsEntry_DoNotUse)},
  { 178, -1, -1, sizeof(::PRO::Svr_ServiceBindService_req)},
  { 190, -1, -1, sizeof(::PRO::Svr_ServiceBindService_ack)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_EurekaServerNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Erk_EurekaBind_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Erk_EurekaBind_ack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Erk_EurekaUpdate_ntf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Erk_Eureka_sync_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_ServerNode_ExtsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_ServerNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Erk_ServiceRegist_req_ExtsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Erk_ServiceRegist_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Erk_ServiceRegist_ack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Erk_ServiceRegist_Confirm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Erk_ServiceBind_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Erk_ServiceBind_ack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Erk_ServiceSubscribe_req_svrinfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Erk_ServiceSubscribe_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Erk_ServiceSubscribe_ack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Erk_ServiceShutdown_ntf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Svr_LiveTick_ntf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Svr_ServiceBindService_req_MyextsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Svr_ServiceBindService_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Svr_ServiceBindService_ack_default_instance_),
};

const char descriptor_table_protodef_eureka_5finternal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025eureka_internal.proto\022\003PRO\"H\n\020EurekaSe"
  "rverNode\022\013\n\003iid\030\001 \001(\003\022\r\n\005token\030\002 \001(\003\022\n\n\002"
  "ip\030\003 \001(\t\022\014\n\004port\030\004 \001(\005\"J\n\022Erk_EurekaBind"
  "_req\022\013\n\003iid\030\001 \001(\003\022\r\n\005token\030\002 \001(\003\022\n\n\002ip\030\003"
  " \001(\t\022\014\n\004port\030\004 \001(\005\"$\n\022Erk_EurekaBind_ack"
  "\022\016\n\006result\030\001 \001(\005\"]\n\024Erk_EurekaUpdate_ntf"
  "\022\r\n\005myiid\030\001 \001(\003\022%\n\006online\030\002 \003(\0132\025.PRO.Eu"
  "rekaServerNode\022\017\n\007offline\030\003 \003(\003\"0\n\017Erk_E"
  "ureka_sync\022\r\n\005myiid\030\001 \001(\003\022\016\n\006exists\030\002 \003("
  "\003\"\230\001\n\nServerNode\022\013\n\003iid\030\001 \001(\003\022\r\n\005token\030\002"
  " \001(\003\022\n\n\002ip\030\003 \001(\t\022\014\n\004port\030\004 \001(\005\022\'\n\004exts\030\005"
  " \003(\0132\031.PRO.ServerNode.ExtsEntry\032+\n\tExtsE"
  "ntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\244\001\n"
  "\025Erk_ServiceRegist_req\022\020\n\010svr_type\030\001 \001(\005"
  "\022\n\n\002ip\030\002 \001(\t\022\014\n\004port\030\003 \001(\005\0222\n\004exts\030\004 \003(\013"
  "2$.PRO.Erk_ServiceRegist_req.ExtsEntry\032+"
  "\n\tExtsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:"
  "\0028\001\"\257\001\n\025Erk_ServiceRegist_ack\022\016\n\006result\030"
  "\001 \001(\005\022\020\n\003iid\030\002 \001(\003H\000\210\001\001\022\022\n\005token\030\003 \001(\003H\001"
  "\210\001\001\022\026\n\teurekaiid\030\004 \001(\003H\002\210\001\001\022\030\n\013eurekatok"
  "en\030\005 \001(\003H\003\210\001\001B\006\n\004_iidB\010\n\006_tokenB\014\n\n_eure"
  "kaiidB\016\n\014_eurekatoken\"7\n\031Erk_ServiceRegi"
  "st_Confirm\022\013\n\003iid\030\001 \001(\003\022\r\n\005token\030\002 \001(\003\"C"
  "\n\023Erk_ServiceBind_req\022\020\n\010svr_type\030\001 \001(\005\022"
  "\013\n\003iid\030\002 \001(\003\022\r\n\005token\030\003 \001(\003\"%\n\023Erk_Servi"
  "ceBind_ack\022\016\n\006result\030\001 \001(\005\"\277\001\n\030Erk_Servi"
  "ceSubscribe_req\022\r\n\005myiid\030\001 \001(\003\022\021\n\tmysvrt"
  "ype\030\002 \001(\005\022\014\n\004myip\030\003 \001(\t\022\016\n\006myport\030\004 \001(\005\022"
  "7\n\010svr_type\030\005 \003(\0132%.PRO.Erk_ServiceSubsc"
  "ribe_req.svrinfo\032*\n\007svrinfo\022\020\n\010svr_type\030"
  "\001 \001(\005\022\r\n\005exits\030\002 \003(\003\"m\n\030Erk_ServiceSubsc"
  "ribe_ack\022\r\n\005myiid\030\001 \001(\003\022\020\n\010svr_type\030\002 \001("
  "\005\022\037\n\006online\030\003 \003(\0132\017.PRO.ServerNode\022\017\n\007of"
  "fline\030\004 \003(\003\"<\n\027Erk_ServiceShutdown_ntf\022\020"
  "\n\010svr_type\030\001 \001(\005\022\017\n\007service\030\002 \001(\003\"\022\n\020Svr"
  "_LiveTick_ntf\"\332\001\n\032Svr_ServiceBindService"
  "_req\022\020\n\010svr_type\030\001 \001(\005\022\r\n\005myiid\030\002 \001(\003\022\017\n"
  "\007mytoken\030\003 \001(\003\022;\n\006myexts\030\004 \003(\0132+.PRO.Svr"
  "_ServiceBindService_req.MyextsEntry\022\r\n\005t"
  "oiid\030\n \001(\003\022\017\n\007totoken\030\013 \001(\003\032-\n\013MyextsEnt"
  "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"^\n\032Sv"
  "r_ServiceBindService_ack\022\016\n\006result\030\001 \001(\005"
  "\022\020\n\010svr_type\030\002 \001(\005\022\r\n\005toiid\030\003 \001(\003\022\017\n\007tot"
  "oken\030\004 \001(\003*\250\003\n\017ERK_SERVICETYPE\022\024\n\020ERK_SE"
  "RVICE_NONE\020\000\022\026\n\022ERK_SERVICE_EUREKA\020\001\022\032\n\026"
  "ERK_SERVICE_DATAROUTER\020\002\022\023\n\017ERK_SERVICE_"
  "RES\020\003\022\024\n\020ERK_SERVICE_GATE\020\004\022\024\n\020ERK_SERVI"
  "CE_HOME\020\005\022\025\n\021ERK_SERVICE_LOGIN\020\006\022\031\n\025ERK_"
  "SERVICE_SVRROUTER\020\007\022\025\n\021ERK_SERVICE_UNION"
  "\020\010\022\024\n\020ERK_SERVICE_CHAT\020\t\022\024\n\020ERK_SERVICE_"
  "MAIL\020\n\022\026\n\022ERK_SERVICE_FRIEND\020\013\022\033\n\027ERK_SE"
  "RVICE_FIGHTROUTER\020\014\022\033\n\027ERK_SERVICE_MATCH"
  "MAKING\020\r\022\024\n\020ERK_SERVICE_GAME\020\016\022\030\n\024ERK_SE"
  "RVICE_DATASYNC\020\017\022\023\n\017ERK_SERVICE_MAX\020\020BT\n"
  "\033com.cms.client.network.gproP\001Z\025gamelib/"
  "protobuf/gpro\252\002\033com.cms.client.network.g"
  "prob\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_eureka_5finternal_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_eureka_5finternal_2eproto = {
  false, false, 2251, descriptor_table_protodef_eureka_5finternal_2eproto, "eureka_internal.proto", 
  &descriptor_table_eureka_5finternal_2eproto_once, nullptr, 0, 21,
  schemas, file_default_instances, TableStruct_eureka_5finternal_2eproto::offsets,
  file_level_metadata_eureka_5finternal_2eproto, file_level_enum_descriptors_eureka_5finternal_2eproto, file_level_service_descriptors_eureka_5finternal_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_eureka_5finternal_2eproto_getter() {
  return &descriptor_table_eureka_5finternal_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_eureka_5finternal_2eproto(&descriptor_table_eureka_5finternal_2eproto);
namespace PRO {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ERK_SERVICETYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_eureka_5finternal_2eproto);
  return file_level_enum_descriptors_eureka_5finternal_2eproto[0];
}
bool ERK_SERVICETYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class EurekaServerNode::_Internal {
 public:
};

EurekaServerNode::EurekaServerNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.EurekaServerNode)
}
EurekaServerNode::EurekaServerNode(const EurekaServerNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&iid_, &from.iid_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&iid_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:PRO.EurekaServerNode)
}

inline void EurekaServerNode::SharedCtor() {
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&iid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&iid_)) + sizeof(port_));
}

EurekaServerNode::~EurekaServerNode() {
  // @@protoc_insertion_point(destructor:PRO.EurekaServerNode)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EurekaServerNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EurekaServerNode::ArenaDtor(void* object) {
  EurekaServerNode* _this = reinterpret_cast< EurekaServerNode* >(object);
  (void)_this;
}
void EurekaServerNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EurekaServerNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EurekaServerNode::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.EurekaServerNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty();
  ::memset(&iid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&iid_)) + sizeof(port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EurekaServerNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.EurekaServerNode.ip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EurekaServerNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.EurekaServerNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 iid = 1;
  if (this->_internal_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_iid(), target);
  }

  // int64 token = 2;
  if (this->_internal_token() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_token(), target);
  }

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.EurekaServerNode.ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip(), target);
  }

  // int32 port = 4;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.EurekaServerNode)
  return target;
}

size_t EurekaServerNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.EurekaServerNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // int64 iid = 1;
  if (this->_internal_iid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_iid());
  }

  // int64 token = 2;
  if (this->_internal_token() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_token());
  }

  // int32 port = 4;
  if (this->_internal_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EurekaServerNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EurekaServerNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EurekaServerNode::GetClassData() const { return &_class_data_; }

void EurekaServerNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EurekaServerNode *>(to)->MergeFrom(
      static_cast<const EurekaServerNode &>(from));
}


void EurekaServerNode::MergeFrom(const EurekaServerNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.EurekaServerNode)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (from._internal_iid() != 0) {
    _internal_set_iid(from._internal_iid());
  }
  if (from._internal_token() != 0) {
    _internal_set_token(from._internal_token());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EurekaServerNode::CopyFrom(const EurekaServerNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.EurekaServerNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EurekaServerNode::IsInitialized() const {
  return true;
}

void EurekaServerNode::InternalSwap(EurekaServerNode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, lhs_arena,
      &other->ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EurekaServerNode, port_)
      + sizeof(EurekaServerNode::port_)
      - PROTOBUF_FIELD_OFFSET(EurekaServerNode, iid_)>(
          reinterpret_cast<char*>(&iid_),
          reinterpret_cast<char*>(&other->iid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EurekaServerNode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_eureka_5finternal_2eproto_getter, &descriptor_table_eureka_5finternal_2eproto_once,
      file_level_metadata_eureka_5finternal_2eproto[0]);
}

// ===================================================================

class Erk_EurekaBind_req::_Internal {
 public:
};

Erk_EurekaBind_req::Erk_EurekaBind_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Erk_EurekaBind_req)
}
Erk_EurekaBind_req::Erk_EurekaBind_req(const Erk_EurekaBind_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&iid_, &from.iid_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&iid_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:PRO.Erk_EurekaBind_req)
}

inline void Erk_EurekaBind_req::SharedCtor() {
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&iid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&iid_)) + sizeof(port_));
}

Erk_EurekaBind_req::~Erk_EurekaBind_req() {
  // @@protoc_insertion_point(destructor:PRO.Erk_EurekaBind_req)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Erk_EurekaBind_req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Erk_EurekaBind_req::ArenaDtor(void* object) {
  Erk_EurekaBind_req* _this = reinterpret_cast< Erk_EurekaBind_req* >(object);
  (void)_this;
}
void Erk_EurekaBind_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Erk_EurekaBind_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Erk_EurekaBind_req::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Erk_EurekaBind_req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty();
  ::memset(&iid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&iid_)) + sizeof(port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Erk_EurekaBind_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.Erk_EurekaBind_req.ip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Erk_EurekaBind_req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Erk_EurekaBind_req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 iid = 1;
  if (this->_internal_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_iid(), target);
  }

  // int64 token = 2;
  if (this->_internal_token() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_token(), target);
  }

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.Erk_EurekaBind_req.ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip(), target);
  }

  // int32 port = 4;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Erk_EurekaBind_req)
  return target;
}

size_t Erk_EurekaBind_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Erk_EurekaBind_req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // int64 iid = 1;
  if (this->_internal_iid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_iid());
  }

  // int64 token = 2;
  if (this->_internal_token() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_token());
  }

  // int32 port = 4;
  if (this->_internal_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Erk_EurekaBind_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Erk_EurekaBind_req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Erk_EurekaBind_req::GetClassData() const { return &_class_data_; }

void Erk_EurekaBind_req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Erk_EurekaBind_req *>(to)->MergeFrom(
      static_cast<const Erk_EurekaBind_req &>(from));
}


void Erk_EurekaBind_req::MergeFrom(const Erk_EurekaBind_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Erk_EurekaBind_req)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (from._internal_iid() != 0) {
    _internal_set_iid(from._internal_iid());
  }
  if (from._internal_token() != 0) {
    _internal_set_token(from._internal_token());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Erk_EurekaBind_req::CopyFrom(const Erk_EurekaBind_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Erk_EurekaBind_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Erk_EurekaBind_req::IsInitialized() const {
  return true;
}

void Erk_EurekaBind_req::InternalSwap(Erk_EurekaBind_req* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, lhs_arena,
      &other->ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Erk_EurekaBind_req, port_)
      + sizeof(Erk_EurekaBind_req::port_)
      - PROTOBUF_FIELD_OFFSET(Erk_EurekaBind_req, iid_)>(
          reinterpret_cast<char*>(&iid_),
          reinterpret_cast<char*>(&other->iid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Erk_EurekaBind_req::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_eureka_5finternal_2eproto_getter, &descriptor_table_eureka_5finternal_2eproto_once,
      file_level_metadata_eureka_5finternal_2eproto[1]);
}

// ===================================================================

class Erk_EurekaBind_ack::_Internal {
 public:
};

Erk_EurekaBind_ack::Erk_EurekaBind_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Erk_EurekaBind_ack)
}
Erk_EurekaBind_ack::Erk_EurekaBind_ack(const Erk_EurekaBind_ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:PRO.Erk_EurekaBind_ack)
}

inline void Erk_EurekaBind_ack::SharedCtor() {
result_ = 0;
}

Erk_EurekaBind_ack::~Erk_EurekaBind_ack() {
  // @@protoc_insertion_point(destructor:PRO.Erk_EurekaBind_ack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Erk_EurekaBind_ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Erk_EurekaBind_ack::ArenaDtor(void* object) {
  Erk_EurekaBind_ack* _this = reinterpret_cast< Erk_EurekaBind_ack* >(object);
  (void)_this;
}
void Erk_EurekaBind_ack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Erk_EurekaBind_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Erk_EurekaBind_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Erk_EurekaBind_ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Erk_EurekaBind_ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Erk_EurekaBind_ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Erk_EurekaBind_ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Erk_EurekaBind_ack)
  return target;
}

size_t Erk_EurekaBind_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Erk_EurekaBind_ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Erk_EurekaBind_ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Erk_EurekaBind_ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Erk_EurekaBind_ack::GetClassData() const { return &_class_data_; }

void Erk_EurekaBind_ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Erk_EurekaBind_ack *>(to)->MergeFrom(
      static_cast<const Erk_EurekaBind_ack &>(from));
}


void Erk_EurekaBind_ack::MergeFrom(const Erk_EurekaBind_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Erk_EurekaBind_ack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Erk_EurekaBind_ack::CopyFrom(const Erk_EurekaBind_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Erk_EurekaBind_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Erk_EurekaBind_ack::IsInitialized() const {
  return true;
}

void Erk_EurekaBind_ack::InternalSwap(Erk_EurekaBind_ack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Erk_EurekaBind_ack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_eureka_5finternal_2eproto_getter, &descriptor_table_eureka_5finternal_2eproto_once,
      file_level_metadata_eureka_5finternal_2eproto[2]);
}

// ===================================================================

class Erk_EurekaUpdate_ntf::_Internal {
 public:
};

Erk_EurekaUpdate_ntf::Erk_EurekaUpdate_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  online_(arena),
  offline_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Erk_EurekaUpdate_ntf)
}
Erk_EurekaUpdate_ntf::Erk_EurekaUpdate_ntf(const Erk_EurekaUpdate_ntf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      online_(from.online_),
      offline_(from.offline_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  myiid_ = from.myiid_;
  // @@protoc_insertion_point(copy_constructor:PRO.Erk_EurekaUpdate_ntf)
}

inline void Erk_EurekaUpdate_ntf::SharedCtor() {
myiid_ = int64_t{0};
}

Erk_EurekaUpdate_ntf::~Erk_EurekaUpdate_ntf() {
  // @@protoc_insertion_point(destructor:PRO.Erk_EurekaUpdate_ntf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Erk_EurekaUpdate_ntf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Erk_EurekaUpdate_ntf::ArenaDtor(void* object) {
  Erk_EurekaUpdate_ntf* _this = reinterpret_cast< Erk_EurekaUpdate_ntf* >(object);
  (void)_this;
}
void Erk_EurekaUpdate_ntf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Erk_EurekaUpdate_ntf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Erk_EurekaUpdate_ntf::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Erk_EurekaUpdate_ntf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  online_.Clear();
  offline_.Clear();
  myiid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Erk_EurekaUpdate_ntf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 myiid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          myiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PRO.EurekaServerNode online = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_online(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 offline = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_offline(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_offline(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Erk_EurekaUpdate_ntf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Erk_EurekaUpdate_ntf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 myiid = 1;
  if (this->_internal_myiid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_myiid(), target);
  }

  // repeated .PRO.EurekaServerNode online = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_online_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_online(i), target, stream);
  }

  // repeated int64 offline = 3;
  {
    int byte_size = _offline_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_offline(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Erk_EurekaUpdate_ntf)
  return target;
}

size_t Erk_EurekaUpdate_ntf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Erk_EurekaUpdate_ntf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PRO.EurekaServerNode online = 2;
  total_size += 1UL * this->_internal_online_size();
  for (const auto& msg : this->online_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 offline = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->offline_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _offline_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 myiid = 1;
  if (this->_internal_myiid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_myiid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Erk_EurekaUpdate_ntf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Erk_EurekaUpdate_ntf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Erk_EurekaUpdate_ntf::GetClassData() const { return &_class_data_; }

void Erk_EurekaUpdate_ntf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Erk_EurekaUpdate_ntf *>(to)->MergeFrom(
      static_cast<const Erk_EurekaUpdate_ntf &>(from));
}


void Erk_EurekaUpdate_ntf::MergeFrom(const Erk_EurekaUpdate_ntf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Erk_EurekaUpdate_ntf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  online_.MergeFrom(from.online_);
  offline_.MergeFrom(from.offline_);
  if (from._internal_myiid() != 0) {
    _internal_set_myiid(from._internal_myiid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Erk_EurekaUpdate_ntf::CopyFrom(const Erk_EurekaUpdate_ntf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Erk_EurekaUpdate_ntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Erk_EurekaUpdate_ntf::IsInitialized() const {
  return true;
}

void Erk_EurekaUpdate_ntf::InternalSwap(Erk_EurekaUpdate_ntf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  online_.InternalSwap(&other->online_);
  offline_.InternalSwap(&other->offline_);
  swap(myiid_, other->myiid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Erk_EurekaUpdate_ntf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_eureka_5finternal_2eproto_getter, &descriptor_table_eureka_5finternal_2eproto_once,
      file_level_metadata_eureka_5finternal_2eproto[3]);
}

// ===================================================================

class Erk_Eureka_sync::_Internal {
 public:
};

Erk_Eureka_sync::Erk_Eureka_sync(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  exists_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Erk_Eureka_sync)
}
Erk_Eureka_sync::Erk_Eureka_sync(const Erk_Eureka_sync& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      exists_(from.exists_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  myiid_ = from.myiid_;
  // @@protoc_insertion_point(copy_constructor:PRO.Erk_Eureka_sync)
}

inline void Erk_Eureka_sync::SharedCtor() {
myiid_ = int64_t{0};
}

Erk_Eureka_sync::~Erk_Eureka_sync() {
  // @@protoc_insertion_point(destructor:PRO.Erk_Eureka_sync)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Erk_Eureka_sync::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Erk_Eureka_sync::ArenaDtor(void* object) {
  Erk_Eureka_sync* _this = reinterpret_cast< Erk_Eureka_sync* >(object);
  (void)_this;
}
void Erk_Eureka_sync::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Erk_Eureka_sync::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Erk_Eureka_sync::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Erk_Eureka_sync)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exists_.Clear();
  myiid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Erk_Eureka_sync::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 myiid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          myiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 exists = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_exists(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_exists(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Erk_Eureka_sync::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Erk_Eureka_sync)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 myiid = 1;
  if (this->_internal_myiid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_myiid(), target);
  }

  // repeated int64 exists = 2;
  {
    int byte_size = _exists_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_exists(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Erk_Eureka_sync)
  return target;
}

size_t Erk_Eureka_sync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Erk_Eureka_sync)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 exists = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->exists_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _exists_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 myiid = 1;
  if (this->_internal_myiid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_myiid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Erk_Eureka_sync::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Erk_Eureka_sync::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Erk_Eureka_sync::GetClassData() const { return &_class_data_; }

void Erk_Eureka_sync::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Erk_Eureka_sync *>(to)->MergeFrom(
      static_cast<const Erk_Eureka_sync &>(from));
}


void Erk_Eureka_sync::MergeFrom(const Erk_Eureka_sync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Erk_Eureka_sync)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  exists_.MergeFrom(from.exists_);
  if (from._internal_myiid() != 0) {
    _internal_set_myiid(from._internal_myiid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Erk_Eureka_sync::CopyFrom(const Erk_Eureka_sync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Erk_Eureka_sync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Erk_Eureka_sync::IsInitialized() const {
  return true;
}

void Erk_Eureka_sync::InternalSwap(Erk_Eureka_sync* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  exists_.InternalSwap(&other->exists_);
  swap(myiid_, other->myiid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Erk_Eureka_sync::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_eureka_5finternal_2eproto_getter, &descriptor_table_eureka_5finternal_2eproto_once,
      file_level_metadata_eureka_5finternal_2eproto[4]);
}

// ===================================================================

ServerNode_ExtsEntry_DoNotUse::ServerNode_ExtsEntry_DoNotUse() {}
ServerNode_ExtsEntry_DoNotUse::ServerNode_ExtsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ServerNode_ExtsEntry_DoNotUse::MergeFrom(const ServerNode_ExtsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ServerNode_ExtsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_eureka_5finternal_2eproto_getter, &descriptor_table_eureka_5finternal_2eproto_once,
      file_level_metadata_eureka_5finternal_2eproto[5]);
}

// ===================================================================

class ServerNode::_Internal {
 public:
};

ServerNode::ServerNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  exts_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.ServerNode)
}
ServerNode::ServerNode(const ServerNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  exts_.MergeFrom(from.exts_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&iid_, &from.iid_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&iid_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:PRO.ServerNode)
}

inline void ServerNode::SharedCtor() {
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&iid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&iid_)) + sizeof(port_));
}

ServerNode::~ServerNode() {
  // @@protoc_insertion_point(destructor:PRO.ServerNode)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServerNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerNode::ArenaDtor(void* object) {
  ServerNode* _this = reinterpret_cast< ServerNode* >(object);
  (void)_this;
  _this->exts_. ~MapField();
}
inline void ServerNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &ServerNode::ArenaDtor);
  }
}
void ServerNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerNode::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.ServerNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exts_.Clear();
  ip_.ClearToEmpty();
  ::memset(&iid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&iid_)) + sizeof(port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.ServerNode.ip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> exts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&exts_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.ServerNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 iid = 1;
  if (this->_internal_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_iid(), target);
  }

  // int64 token = 2;
  if (this->_internal_token() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_token(), target);
  }

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.ServerNode.ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip(), target);
  }

  // int32 port = 4;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_port(), target);
  }

  // map<string, string> exts = 5;
  if (!this->_internal_exts().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "PRO.ServerNode.ExtsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "PRO.ServerNode.ExtsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_exts().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_exts().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_exts().begin();
          it != this->_internal_exts().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ServerNode_ExtsEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_exts().begin();
          it != this->_internal_exts().end(); ++it) {
        target = ServerNode_ExtsEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.ServerNode)
  return target;
}

size_t ServerNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.ServerNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> exts = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_exts_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_exts().begin();
      it != this->_internal_exts().end(); ++it) {
    total_size += ServerNode_ExtsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // int64 iid = 1;
  if (this->_internal_iid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_iid());
  }

  // int64 token = 2;
  if (this->_internal_token() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_token());
  }

  // int32 port = 4;
  if (this->_internal_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServerNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerNode::GetClassData() const { return &_class_data_; }

void ServerNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServerNode *>(to)->MergeFrom(
      static_cast<const ServerNode &>(from));
}


void ServerNode::MergeFrom(const ServerNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.ServerNode)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  exts_.MergeFrom(from.exts_);
  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (from._internal_iid() != 0) {
    _internal_set_iid(from._internal_iid());
  }
  if (from._internal_token() != 0) {
    _internal_set_token(from._internal_token());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerNode::CopyFrom(const ServerNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.ServerNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerNode::IsInitialized() const {
  return true;
}

void ServerNode::InternalSwap(ServerNode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  exts_.InternalSwap(&other->exts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, lhs_arena,
      &other->ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerNode, port_)
      + sizeof(ServerNode::port_)
      - PROTOBUF_FIELD_OFFSET(ServerNode, iid_)>(
          reinterpret_cast<char*>(&iid_),
          reinterpret_cast<char*>(&other->iid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerNode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_eureka_5finternal_2eproto_getter, &descriptor_table_eureka_5finternal_2eproto_once,
      file_level_metadata_eureka_5finternal_2eproto[6]);
}

// ===================================================================

Erk_ServiceRegist_req_ExtsEntry_DoNotUse::Erk_ServiceRegist_req_ExtsEntry_DoNotUse() {}
Erk_ServiceRegist_req_ExtsEntry_DoNotUse::Erk_ServiceRegist_req_ExtsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Erk_ServiceRegist_req_ExtsEntry_DoNotUse::MergeFrom(const Erk_ServiceRegist_req_ExtsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Erk_ServiceRegist_req_ExtsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_eureka_5finternal_2eproto_getter, &descriptor_table_eureka_5finternal_2eproto_once,
      file_level_metadata_eureka_5finternal_2eproto[7]);
}

// ===================================================================

class Erk_ServiceRegist_req::_Internal {
 public:
};

Erk_ServiceRegist_req::Erk_ServiceRegist_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  exts_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Erk_ServiceRegist_req)
}
Erk_ServiceRegist_req::Erk_ServiceRegist_req(const Erk_ServiceRegist_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  exts_.MergeFrom(from.exts_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&svr_type_, &from.svr_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&svr_type_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:PRO.Erk_ServiceRegist_req)
}

inline void Erk_ServiceRegist_req::SharedCtor() {
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&svr_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&svr_type_)) + sizeof(port_));
}

Erk_ServiceRegist_req::~Erk_ServiceRegist_req() {
  // @@protoc_insertion_point(destructor:PRO.Erk_ServiceRegist_req)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Erk_ServiceRegist_req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Erk_ServiceRegist_req::ArenaDtor(void* object) {
  Erk_ServiceRegist_req* _this = reinterpret_cast< Erk_ServiceRegist_req* >(object);
  (void)_this;
  _this->exts_. ~MapField();
}
inline void Erk_ServiceRegist_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Erk_ServiceRegist_req::ArenaDtor);
  }
}
void Erk_ServiceRegist_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Erk_ServiceRegist_req::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Erk_ServiceRegist_req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exts_.Clear();
  ip_.ClearToEmpty();
  ::memset(&svr_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&svr_type_)) + sizeof(port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Erk_ServiceRegist_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 svr_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          svr_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.Erk_ServiceRegist_req.ip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> exts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&exts_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Erk_ServiceRegist_req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Erk_ServiceRegist_req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 svr_type = 1;
  if (this->_internal_svr_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_svr_type(), target);
  }

  // string ip = 2;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.Erk_ServiceRegist_req.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // int32 port = 3;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_port(), target);
  }

  // map<string, string> exts = 4;
  if (!this->_internal_exts().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "PRO.Erk_ServiceRegist_req.ExtsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "PRO.Erk_ServiceRegist_req.ExtsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_exts().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_exts().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_exts().begin();
          it != this->_internal_exts().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Erk_ServiceRegist_req_ExtsEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_exts().begin();
          it != this->_internal_exts().end(); ++it) {
        target = Erk_ServiceRegist_req_ExtsEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Erk_ServiceRegist_req)
  return target;
}

size_t Erk_ServiceRegist_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Erk_ServiceRegist_req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> exts = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_exts_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_exts().begin();
      it != this->_internal_exts().end(); ++it) {
    total_size += Erk_ServiceRegist_req_ExtsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string ip = 2;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // int32 svr_type = 1;
  if (this->_internal_svr_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_svr_type());
  }

  // int32 port = 3;
  if (this->_internal_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Erk_ServiceRegist_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Erk_ServiceRegist_req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Erk_ServiceRegist_req::GetClassData() const { return &_class_data_; }

void Erk_ServiceRegist_req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Erk_ServiceRegist_req *>(to)->MergeFrom(
      static_cast<const Erk_ServiceRegist_req &>(from));
}


void Erk_ServiceRegist_req::MergeFrom(const Erk_ServiceRegist_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Erk_ServiceRegist_req)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  exts_.MergeFrom(from.exts_);
  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (from._internal_svr_type() != 0) {
    _internal_set_svr_type(from._internal_svr_type());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Erk_ServiceRegist_req::CopyFrom(const Erk_ServiceRegist_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Erk_ServiceRegist_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Erk_ServiceRegist_req::IsInitialized() const {
  return true;
}

void Erk_ServiceRegist_req::InternalSwap(Erk_ServiceRegist_req* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  exts_.InternalSwap(&other->exts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, lhs_arena,
      &other->ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Erk_ServiceRegist_req, port_)
      + sizeof(Erk_ServiceRegist_req::port_)
      - PROTOBUF_FIELD_OFFSET(Erk_ServiceRegist_req, svr_type_)>(
          reinterpret_cast<char*>(&svr_type_),
          reinterpret_cast<char*>(&other->svr_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Erk_ServiceRegist_req::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_eureka_5finternal_2eproto_getter, &descriptor_table_eureka_5finternal_2eproto_once,
      file_level_metadata_eureka_5finternal_2eproto[8]);
}

// ===================================================================

class Erk_ServiceRegist_ack::_Internal {
 public:
  using HasBits = decltype(std::declval<Erk_ServiceRegist_ack>()._has_bits_);
  static void set_has_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_eurekaiid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_eurekatoken(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Erk_ServiceRegist_ack::Erk_ServiceRegist_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Erk_ServiceRegist_ack)
}
Erk_ServiceRegist_ack::Erk_ServiceRegist_ack(const Erk_ServiceRegist_ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&iid_, &from.iid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&iid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:PRO.Erk_ServiceRegist_ack)
}

inline void Erk_ServiceRegist_ack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&iid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&iid_)) + sizeof(result_));
}

Erk_ServiceRegist_ack::~Erk_ServiceRegist_ack() {
  // @@protoc_insertion_point(destructor:PRO.Erk_ServiceRegist_ack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Erk_ServiceRegist_ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Erk_ServiceRegist_ack::ArenaDtor(void* object) {
  Erk_ServiceRegist_ack* _this = reinterpret_cast< Erk_ServiceRegist_ack* >(object);
  (void)_this;
}
void Erk_ServiceRegist_ack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Erk_ServiceRegist_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Erk_ServiceRegist_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Erk_ServiceRegist_ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&iid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&eurekatoken_) -
        reinterpret_cast<char*>(&iid_)) + sizeof(eurekatoken_));
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Erk_ServiceRegist_ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 iid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_iid(&has_bits);
          iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_token(&has_bits);
          token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 eurekaiid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_eurekaiid(&has_bits);
          eurekaiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 eurekatoken = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_eurekatoken(&has_bits);
          eurekatoken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Erk_ServiceRegist_ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Erk_ServiceRegist_ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // optional int64 iid = 2;
  if (_internal_has_iid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_iid(), target);
  }

  // optional int64 token = 3;
  if (_internal_has_token()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_token(), target);
  }

  // optional int64 eurekaiid = 4;
  if (_internal_has_eurekaiid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_eurekaiid(), target);
  }

  // optional int64 eurekatoken = 5;
  if (_internal_has_eurekatoken()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_eurekatoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Erk_ServiceRegist_ack)
  return target;
}

size_t Erk_ServiceRegist_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Erk_ServiceRegist_ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int64 iid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_iid());
    }

    // optional int64 token = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_token());
    }

    // optional int64 eurekaiid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_eurekaiid());
    }

    // optional int64 eurekatoken = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_eurekatoken());
    }

  }
  // int32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Erk_ServiceRegist_ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Erk_ServiceRegist_ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Erk_ServiceRegist_ack::GetClassData() const { return &_class_data_; }

void Erk_ServiceRegist_ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Erk_ServiceRegist_ack *>(to)->MergeFrom(
      static_cast<const Erk_ServiceRegist_ack &>(from));
}


void Erk_ServiceRegist_ack::MergeFrom(const Erk_ServiceRegist_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Erk_ServiceRegist_ack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      iid_ = from.iid_;
    }
    if (cached_has_bits & 0x00000002u) {
      token_ = from.token_;
    }
    if (cached_has_bits & 0x00000004u) {
      eurekaiid_ = from.eurekaiid_;
    }
    if (cached_has_bits & 0x00000008u) {
      eurekatoken_ = from.eurekatoken_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Erk_ServiceRegist_ack::CopyFrom(const Erk_ServiceRegist_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Erk_ServiceRegist_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Erk_ServiceRegist_ack::IsInitialized() const {
  return true;
}

void Erk_ServiceRegist_ack::InternalSwap(Erk_ServiceRegist_ack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Erk_ServiceRegist_ack, result_)
      + sizeof(Erk_ServiceRegist_ack::result_)
      - PROTOBUF_FIELD_OFFSET(Erk_ServiceRegist_ack, iid_)>(
          reinterpret_cast<char*>(&iid_),
          reinterpret_cast<char*>(&other->iid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Erk_ServiceRegist_ack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_eureka_5finternal_2eproto_getter, &descriptor_table_eureka_5finternal_2eproto_once,
      file_level_metadata_eureka_5finternal_2eproto[9]);
}

// ===================================================================

class Erk_ServiceRegist_Confirm::_Internal {
 public:
};

Erk_ServiceRegist_Confirm::Erk_ServiceRegist_Confirm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Erk_ServiceRegist_Confirm)
}
Erk_ServiceRegist_Confirm::Erk_ServiceRegist_Confirm(const Erk_ServiceRegist_Confirm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&iid_, &from.iid_,
    static_cast<size_t>(reinterpret_cast<char*>(&token_) -
    reinterpret_cast<char*>(&iid_)) + sizeof(token_));
  // @@protoc_insertion_point(copy_constructor:PRO.Erk_ServiceRegist_Confirm)
}

inline void Erk_ServiceRegist_Confirm::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&iid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&token_) -
    reinterpret_cast<char*>(&iid_)) + sizeof(token_));
}

Erk_ServiceRegist_Confirm::~Erk_ServiceRegist_Confirm() {
  // @@protoc_insertion_point(destructor:PRO.Erk_ServiceRegist_Confirm)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Erk_ServiceRegist_Confirm::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Erk_ServiceRegist_Confirm::ArenaDtor(void* object) {
  Erk_ServiceRegist_Confirm* _this = reinterpret_cast< Erk_ServiceRegist_Confirm* >(object);
  (void)_this;
}
void Erk_ServiceRegist_Confirm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Erk_ServiceRegist_Confirm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Erk_ServiceRegist_Confirm::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Erk_ServiceRegist_Confirm)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&iid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&token_) -
      reinterpret_cast<char*>(&iid_)) + sizeof(token_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Erk_ServiceRegist_Confirm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Erk_ServiceRegist_Confirm::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Erk_ServiceRegist_Confirm)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 iid = 1;
  if (this->_internal_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_iid(), target);
  }

  // int64 token = 2;
  if (this->_internal_token() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Erk_ServiceRegist_Confirm)
  return target;
}

size_t Erk_ServiceRegist_Confirm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Erk_ServiceRegist_Confirm)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 iid = 1;
  if (this->_internal_iid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_iid());
  }

  // int64 token = 2;
  if (this->_internal_token() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Erk_ServiceRegist_Confirm::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Erk_ServiceRegist_Confirm::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Erk_ServiceRegist_Confirm::GetClassData() const { return &_class_data_; }

void Erk_ServiceRegist_Confirm::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Erk_ServiceRegist_Confirm *>(to)->MergeFrom(
      static_cast<const Erk_ServiceRegist_Confirm &>(from));
}


void Erk_ServiceRegist_Confirm::MergeFrom(const Erk_ServiceRegist_Confirm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Erk_ServiceRegist_Confirm)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_iid() != 0) {
    _internal_set_iid(from._internal_iid());
  }
  if (from._internal_token() != 0) {
    _internal_set_token(from._internal_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Erk_ServiceRegist_Confirm::CopyFrom(const Erk_ServiceRegist_Confirm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Erk_ServiceRegist_Confirm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Erk_ServiceRegist_Confirm::IsInitialized() const {
  return true;
}

void Erk_ServiceRegist_Confirm::InternalSwap(Erk_ServiceRegist_Confirm* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Erk_ServiceRegist_Confirm, token_)
      + sizeof(Erk_ServiceRegist_Confirm::token_)
      - PROTOBUF_FIELD_OFFSET(Erk_ServiceRegist_Confirm, iid_)>(
          reinterpret_cast<char*>(&iid_),
          reinterpret_cast<char*>(&other->iid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Erk_ServiceRegist_Confirm::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_eureka_5finternal_2eproto_getter, &descriptor_table_eureka_5finternal_2eproto_once,
      file_level_metadata_eureka_5finternal_2eproto[10]);
}

// ===================================================================

class Erk_ServiceBind_req::_Internal {
 public:
};

Erk_ServiceBind_req::Erk_ServiceBind_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Erk_ServiceBind_req)
}
Erk_ServiceBind_req::Erk_ServiceBind_req(const Erk_ServiceBind_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&iid_, &from.iid_,
    static_cast<size_t>(reinterpret_cast<char*>(&svr_type_) -
    reinterpret_cast<char*>(&iid_)) + sizeof(svr_type_));
  // @@protoc_insertion_point(copy_constructor:PRO.Erk_ServiceBind_req)
}

inline void Erk_ServiceBind_req::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&iid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&svr_type_) -
    reinterpret_cast<char*>(&iid_)) + sizeof(svr_type_));
}

Erk_ServiceBind_req::~Erk_ServiceBind_req() {
  // @@protoc_insertion_point(destructor:PRO.Erk_ServiceBind_req)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Erk_ServiceBind_req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Erk_ServiceBind_req::ArenaDtor(void* object) {
  Erk_ServiceBind_req* _this = reinterpret_cast< Erk_ServiceBind_req* >(object);
  (void)_this;
}
void Erk_ServiceBind_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Erk_ServiceBind_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Erk_ServiceBind_req::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Erk_ServiceBind_req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&iid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&svr_type_) -
      reinterpret_cast<char*>(&iid_)) + sizeof(svr_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Erk_ServiceBind_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 svr_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          svr_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 iid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Erk_ServiceBind_req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Erk_ServiceBind_req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 svr_type = 1;
  if (this->_internal_svr_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_svr_type(), target);
  }

  // int64 iid = 2;
  if (this->_internal_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_iid(), target);
  }

  // int64 token = 3;
  if (this->_internal_token() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Erk_ServiceBind_req)
  return target;
}

size_t Erk_ServiceBind_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Erk_ServiceBind_req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 iid = 2;
  if (this->_internal_iid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_iid());
  }

  // int64 token = 3;
  if (this->_internal_token() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_token());
  }

  // int32 svr_type = 1;
  if (this->_internal_svr_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_svr_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Erk_ServiceBind_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Erk_ServiceBind_req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Erk_ServiceBind_req::GetClassData() const { return &_class_data_; }

void Erk_ServiceBind_req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Erk_ServiceBind_req *>(to)->MergeFrom(
      static_cast<const Erk_ServiceBind_req &>(from));
}


void Erk_ServiceBind_req::MergeFrom(const Erk_ServiceBind_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Erk_ServiceBind_req)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_iid() != 0) {
    _internal_set_iid(from._internal_iid());
  }
  if (from._internal_token() != 0) {
    _internal_set_token(from._internal_token());
  }
  if (from._internal_svr_type() != 0) {
    _internal_set_svr_type(from._internal_svr_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Erk_ServiceBind_req::CopyFrom(const Erk_ServiceBind_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Erk_ServiceBind_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Erk_ServiceBind_req::IsInitialized() const {
  return true;
}

void Erk_ServiceBind_req::InternalSwap(Erk_ServiceBind_req* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Erk_ServiceBind_req, svr_type_)
      + sizeof(Erk_ServiceBind_req::svr_type_)
      - PROTOBUF_FIELD_OFFSET(Erk_ServiceBind_req, iid_)>(
          reinterpret_cast<char*>(&iid_),
          reinterpret_cast<char*>(&other->iid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Erk_ServiceBind_req::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_eureka_5finternal_2eproto_getter, &descriptor_table_eureka_5finternal_2eproto_once,
      file_level_metadata_eureka_5finternal_2eproto[11]);
}

// ===================================================================

class Erk_ServiceBind_ack::_Internal {
 public:
};

Erk_ServiceBind_ack::Erk_ServiceBind_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Erk_ServiceBind_ack)
}
Erk_ServiceBind_ack::Erk_ServiceBind_ack(const Erk_ServiceBind_ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:PRO.Erk_ServiceBind_ack)
}

inline void Erk_ServiceBind_ack::SharedCtor() {
result_ = 0;
}

Erk_ServiceBind_ack::~Erk_ServiceBind_ack() {
  // @@protoc_insertion_point(destructor:PRO.Erk_ServiceBind_ack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Erk_ServiceBind_ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Erk_ServiceBind_ack::ArenaDtor(void* object) {
  Erk_ServiceBind_ack* _this = reinterpret_cast< Erk_ServiceBind_ack* >(object);
  (void)_this;
}
void Erk_ServiceBind_ack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Erk_ServiceBind_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Erk_ServiceBind_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Erk_ServiceBind_ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Erk_ServiceBind_ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Erk_ServiceBind_ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Erk_ServiceBind_ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Erk_ServiceBind_ack)
  return target;
}

size_t Erk_ServiceBind_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Erk_ServiceBind_ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Erk_ServiceBind_ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Erk_ServiceBind_ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Erk_ServiceBind_ack::GetClassData() const { return &_class_data_; }

void Erk_ServiceBind_ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Erk_ServiceBind_ack *>(to)->MergeFrom(
      static_cast<const Erk_ServiceBind_ack &>(from));
}


void Erk_ServiceBind_ack::MergeFrom(const Erk_ServiceBind_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Erk_ServiceBind_ack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Erk_ServiceBind_ack::CopyFrom(const Erk_ServiceBind_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Erk_ServiceBind_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Erk_ServiceBind_ack::IsInitialized() const {
  return true;
}

void Erk_ServiceBind_ack::InternalSwap(Erk_ServiceBind_ack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Erk_ServiceBind_ack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_eureka_5finternal_2eproto_getter, &descriptor_table_eureka_5finternal_2eproto_once,
      file_level_metadata_eureka_5finternal_2eproto[12]);
}

// ===================================================================

class Erk_ServiceSubscribe_req_svrinfo::_Internal {
 public:
};

Erk_ServiceSubscribe_req_svrinfo::Erk_ServiceSubscribe_req_svrinfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  exits_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Erk_ServiceSubscribe_req.svrinfo)
}
Erk_ServiceSubscribe_req_svrinfo::Erk_ServiceSubscribe_req_svrinfo(const Erk_ServiceSubscribe_req_svrinfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      exits_(from.exits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  svr_type_ = from.svr_type_;
  // @@protoc_insertion_point(copy_constructor:PRO.Erk_ServiceSubscribe_req.svrinfo)
}

inline void Erk_ServiceSubscribe_req_svrinfo::SharedCtor() {
svr_type_ = 0;
}

Erk_ServiceSubscribe_req_svrinfo::~Erk_ServiceSubscribe_req_svrinfo() {
  // @@protoc_insertion_point(destructor:PRO.Erk_ServiceSubscribe_req.svrinfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Erk_ServiceSubscribe_req_svrinfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Erk_ServiceSubscribe_req_svrinfo::ArenaDtor(void* object) {
  Erk_ServiceSubscribe_req_svrinfo* _this = reinterpret_cast< Erk_ServiceSubscribe_req_svrinfo* >(object);
  (void)_this;
}
void Erk_ServiceSubscribe_req_svrinfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Erk_ServiceSubscribe_req_svrinfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Erk_ServiceSubscribe_req_svrinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Erk_ServiceSubscribe_req.svrinfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exits_.Clear();
  svr_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Erk_ServiceSubscribe_req_svrinfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 svr_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          svr_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 exits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_exits(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_exits(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Erk_ServiceSubscribe_req_svrinfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Erk_ServiceSubscribe_req.svrinfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 svr_type = 1;
  if (this->_internal_svr_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_svr_type(), target);
  }

  // repeated int64 exits = 2;
  {
    int byte_size = _exits_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_exits(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Erk_ServiceSubscribe_req.svrinfo)
  return target;
}

size_t Erk_ServiceSubscribe_req_svrinfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Erk_ServiceSubscribe_req.svrinfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 exits = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->exits_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _exits_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 svr_type = 1;
  if (this->_internal_svr_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_svr_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Erk_ServiceSubscribe_req_svrinfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Erk_ServiceSubscribe_req_svrinfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Erk_ServiceSubscribe_req_svrinfo::GetClassData() const { return &_class_data_; }

void Erk_ServiceSubscribe_req_svrinfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Erk_ServiceSubscribe_req_svrinfo *>(to)->MergeFrom(
      static_cast<const Erk_ServiceSubscribe_req_svrinfo &>(from));
}


void Erk_ServiceSubscribe_req_svrinfo::MergeFrom(const Erk_ServiceSubscribe_req_svrinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Erk_ServiceSubscribe_req.svrinfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  exits_.MergeFrom(from.exits_);
  if (from._internal_svr_type() != 0) {
    _internal_set_svr_type(from._internal_svr_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Erk_ServiceSubscribe_req_svrinfo::CopyFrom(const Erk_ServiceSubscribe_req_svrinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Erk_ServiceSubscribe_req.svrinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Erk_ServiceSubscribe_req_svrinfo::IsInitialized() const {
  return true;
}

void Erk_ServiceSubscribe_req_svrinfo::InternalSwap(Erk_ServiceSubscribe_req_svrinfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  exits_.InternalSwap(&other->exits_);
  swap(svr_type_, other->svr_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Erk_ServiceSubscribe_req_svrinfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_eureka_5finternal_2eproto_getter, &descriptor_table_eureka_5finternal_2eproto_once,
      file_level_metadata_eureka_5finternal_2eproto[13]);
}

// ===================================================================

class Erk_ServiceSubscribe_req::_Internal {
 public:
};

Erk_ServiceSubscribe_req::Erk_ServiceSubscribe_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  svr_type_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Erk_ServiceSubscribe_req)
}
Erk_ServiceSubscribe_req::Erk_ServiceSubscribe_req(const Erk_ServiceSubscribe_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      svr_type_(from.svr_type_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  myip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    myip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_myip().empty()) {
    myip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_myip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&myiid_, &from.myiid_,
    static_cast<size_t>(reinterpret_cast<char*>(&myport_) -
    reinterpret_cast<char*>(&myiid_)) + sizeof(myport_));
  // @@protoc_insertion_point(copy_constructor:PRO.Erk_ServiceSubscribe_req)
}

inline void Erk_ServiceSubscribe_req::SharedCtor() {
myip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  myip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&myiid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&myport_) -
    reinterpret_cast<char*>(&myiid_)) + sizeof(myport_));
}

Erk_ServiceSubscribe_req::~Erk_ServiceSubscribe_req() {
  // @@protoc_insertion_point(destructor:PRO.Erk_ServiceSubscribe_req)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Erk_ServiceSubscribe_req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  myip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Erk_ServiceSubscribe_req::ArenaDtor(void* object) {
  Erk_ServiceSubscribe_req* _this = reinterpret_cast< Erk_ServiceSubscribe_req* >(object);
  (void)_this;
}
void Erk_ServiceSubscribe_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Erk_ServiceSubscribe_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Erk_ServiceSubscribe_req::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Erk_ServiceSubscribe_req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  svr_type_.Clear();
  myip_.ClearToEmpty();
  ::memset(&myiid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&myport_) -
      reinterpret_cast<char*>(&myiid_)) + sizeof(myport_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Erk_ServiceSubscribe_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 myiid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          myiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mysvrtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          mysvrtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string myip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_myip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.Erk_ServiceSubscribe_req.myip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 myport = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          myport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PRO.Erk_ServiceSubscribe_req.svrinfo svr_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_svr_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Erk_ServiceSubscribe_req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Erk_ServiceSubscribe_req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 myiid = 1;
  if (this->_internal_myiid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_myiid(), target);
  }

  // int32 mysvrtype = 2;
  if (this->_internal_mysvrtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mysvrtype(), target);
  }

  // string myip = 3;
  if (!this->_internal_myip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_myip().data(), static_cast<int>(this->_internal_myip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.Erk_ServiceSubscribe_req.myip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_myip(), target);
  }

  // int32 myport = 4;
  if (this->_internal_myport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_myport(), target);
  }

  // repeated .PRO.Erk_ServiceSubscribe_req.svrinfo svr_type = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_svr_type_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_svr_type(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Erk_ServiceSubscribe_req)
  return target;
}

size_t Erk_ServiceSubscribe_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Erk_ServiceSubscribe_req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PRO.Erk_ServiceSubscribe_req.svrinfo svr_type = 5;
  total_size += 1UL * this->_internal_svr_type_size();
  for (const auto& msg : this->svr_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string myip = 3;
  if (!this->_internal_myip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_myip());
  }

  // int64 myiid = 1;
  if (this->_internal_myiid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_myiid());
  }

  // int32 mysvrtype = 2;
  if (this->_internal_mysvrtype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mysvrtype());
  }

  // int32 myport = 4;
  if (this->_internal_myport() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_myport());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Erk_ServiceSubscribe_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Erk_ServiceSubscribe_req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Erk_ServiceSubscribe_req::GetClassData() const { return &_class_data_; }

void Erk_ServiceSubscribe_req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Erk_ServiceSubscribe_req *>(to)->MergeFrom(
      static_cast<const Erk_ServiceSubscribe_req &>(from));
}


void Erk_ServiceSubscribe_req::MergeFrom(const Erk_ServiceSubscribe_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Erk_ServiceSubscribe_req)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  svr_type_.MergeFrom(from.svr_type_);
  if (!from._internal_myip().empty()) {
    _internal_set_myip(from._internal_myip());
  }
  if (from._internal_myiid() != 0) {
    _internal_set_myiid(from._internal_myiid());
  }
  if (from._internal_mysvrtype() != 0) {
    _internal_set_mysvrtype(from._internal_mysvrtype());
  }
  if (from._internal_myport() != 0) {
    _internal_set_myport(from._internal_myport());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Erk_ServiceSubscribe_req::CopyFrom(const Erk_ServiceSubscribe_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Erk_ServiceSubscribe_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Erk_ServiceSubscribe_req::IsInitialized() const {
  return true;
}

void Erk_ServiceSubscribe_req::InternalSwap(Erk_ServiceSubscribe_req* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  svr_type_.InternalSwap(&other->svr_type_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &myip_, lhs_arena,
      &other->myip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Erk_ServiceSubscribe_req, myport_)
      + sizeof(Erk_ServiceSubscribe_req::myport_)
      - PROTOBUF_FIELD_OFFSET(Erk_ServiceSubscribe_req, myiid_)>(
          reinterpret_cast<char*>(&myiid_),
          reinterpret_cast<char*>(&other->myiid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Erk_ServiceSubscribe_req::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_eureka_5finternal_2eproto_getter, &descriptor_table_eureka_5finternal_2eproto_once,
      file_level_metadata_eureka_5finternal_2eproto[14]);
}

// ===================================================================

class Erk_ServiceSubscribe_ack::_Internal {
 public:
};

Erk_ServiceSubscribe_ack::Erk_ServiceSubscribe_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  online_(arena),
  offline_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Erk_ServiceSubscribe_ack)
}
Erk_ServiceSubscribe_ack::Erk_ServiceSubscribe_ack(const Erk_ServiceSubscribe_ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      online_(from.online_),
      offline_(from.offline_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&myiid_, &from.myiid_,
    static_cast<size_t>(reinterpret_cast<char*>(&svr_type_) -
    reinterpret_cast<char*>(&myiid_)) + sizeof(svr_type_));
  // @@protoc_insertion_point(copy_constructor:PRO.Erk_ServiceSubscribe_ack)
}

inline void Erk_ServiceSubscribe_ack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&myiid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&svr_type_) -
    reinterpret_cast<char*>(&myiid_)) + sizeof(svr_type_));
}

Erk_ServiceSubscribe_ack::~Erk_ServiceSubscribe_ack() {
  // @@protoc_insertion_point(destructor:PRO.Erk_ServiceSubscribe_ack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Erk_ServiceSubscribe_ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Erk_ServiceSubscribe_ack::ArenaDtor(void* object) {
  Erk_ServiceSubscribe_ack* _this = reinterpret_cast< Erk_ServiceSubscribe_ack* >(object);
  (void)_this;
}
void Erk_ServiceSubscribe_ack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Erk_ServiceSubscribe_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Erk_ServiceSubscribe_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Erk_ServiceSubscribe_ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  online_.Clear();
  offline_.Clear();
  ::memset(&myiid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&svr_type_) -
      reinterpret_cast<char*>(&myiid_)) + sizeof(svr_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Erk_ServiceSubscribe_ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 myiid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          myiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 svr_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          svr_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PRO.ServerNode online = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_online(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 offline = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_offline(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_offline(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Erk_ServiceSubscribe_ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Erk_ServiceSubscribe_ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 myiid = 1;
  if (this->_internal_myiid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_myiid(), target);
  }

  // int32 svr_type = 2;
  if (this->_internal_svr_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_svr_type(), target);
  }

  // repeated .PRO.ServerNode online = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_online_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_online(i), target, stream);
  }

  // repeated int64 offline = 4;
  {
    int byte_size = _offline_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_offline(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Erk_ServiceSubscribe_ack)
  return target;
}

size_t Erk_ServiceSubscribe_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Erk_ServiceSubscribe_ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PRO.ServerNode online = 3;
  total_size += 1UL * this->_internal_online_size();
  for (const auto& msg : this->online_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 offline = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->offline_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _offline_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 myiid = 1;
  if (this->_internal_myiid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_myiid());
  }

  // int32 svr_type = 2;
  if (this->_internal_svr_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_svr_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Erk_ServiceSubscribe_ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Erk_ServiceSubscribe_ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Erk_ServiceSubscribe_ack::GetClassData() const { return &_class_data_; }

void Erk_ServiceSubscribe_ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Erk_ServiceSubscribe_ack *>(to)->MergeFrom(
      static_cast<const Erk_ServiceSubscribe_ack &>(from));
}


void Erk_ServiceSubscribe_ack::MergeFrom(const Erk_ServiceSubscribe_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Erk_ServiceSubscribe_ack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  online_.MergeFrom(from.online_);
  offline_.MergeFrom(from.offline_);
  if (from._internal_myiid() != 0) {
    _internal_set_myiid(from._internal_myiid());
  }
  if (from._internal_svr_type() != 0) {
    _internal_set_svr_type(from._internal_svr_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Erk_ServiceSubscribe_ack::CopyFrom(const Erk_ServiceSubscribe_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Erk_ServiceSubscribe_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Erk_ServiceSubscribe_ack::IsInitialized() const {
  return true;
}

void Erk_ServiceSubscribe_ack::InternalSwap(Erk_ServiceSubscribe_ack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  online_.InternalSwap(&other->online_);
  offline_.InternalSwap(&other->offline_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Erk_ServiceSubscribe_ack, svr_type_)
      + sizeof(Erk_ServiceSubscribe_ack::svr_type_)
      - PROTOBUF_FIELD_OFFSET(Erk_ServiceSubscribe_ack, myiid_)>(
          reinterpret_cast<char*>(&myiid_),
          reinterpret_cast<char*>(&other->myiid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Erk_ServiceSubscribe_ack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_eureka_5finternal_2eproto_getter, &descriptor_table_eureka_5finternal_2eproto_once,
      file_level_metadata_eureka_5finternal_2eproto[15]);
}

// ===================================================================

class Erk_ServiceShutdown_ntf::_Internal {
 public:
};

Erk_ServiceShutdown_ntf::Erk_ServiceShutdown_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Erk_ServiceShutdown_ntf)
}
Erk_ServiceShutdown_ntf::Erk_ServiceShutdown_ntf(const Erk_ServiceShutdown_ntf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&service_, &from.service_,
    static_cast<size_t>(reinterpret_cast<char*>(&svr_type_) -
    reinterpret_cast<char*>(&service_)) + sizeof(svr_type_));
  // @@protoc_insertion_point(copy_constructor:PRO.Erk_ServiceShutdown_ntf)
}

inline void Erk_ServiceShutdown_ntf::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&service_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&svr_type_) -
    reinterpret_cast<char*>(&service_)) + sizeof(svr_type_));
}

Erk_ServiceShutdown_ntf::~Erk_ServiceShutdown_ntf() {
  // @@protoc_insertion_point(destructor:PRO.Erk_ServiceShutdown_ntf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Erk_ServiceShutdown_ntf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Erk_ServiceShutdown_ntf::ArenaDtor(void* object) {
  Erk_ServiceShutdown_ntf* _this = reinterpret_cast< Erk_ServiceShutdown_ntf* >(object);
  (void)_this;
}
void Erk_ServiceShutdown_ntf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Erk_ServiceShutdown_ntf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Erk_ServiceShutdown_ntf::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Erk_ServiceShutdown_ntf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&service_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&svr_type_) -
      reinterpret_cast<char*>(&service_)) + sizeof(svr_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Erk_ServiceShutdown_ntf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 svr_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          svr_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 service = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          service_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Erk_ServiceShutdown_ntf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Erk_ServiceShutdown_ntf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 svr_type = 1;
  if (this->_internal_svr_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_svr_type(), target);
  }

  // int64 service = 2;
  if (this->_internal_service() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_service(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Erk_ServiceShutdown_ntf)
  return target;
}

size_t Erk_ServiceShutdown_ntf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Erk_ServiceShutdown_ntf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 service = 2;
  if (this->_internal_service() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_service());
  }

  // int32 svr_type = 1;
  if (this->_internal_svr_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_svr_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Erk_ServiceShutdown_ntf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Erk_ServiceShutdown_ntf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Erk_ServiceShutdown_ntf::GetClassData() const { return &_class_data_; }

void Erk_ServiceShutdown_ntf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Erk_ServiceShutdown_ntf *>(to)->MergeFrom(
      static_cast<const Erk_ServiceShutdown_ntf &>(from));
}


void Erk_ServiceShutdown_ntf::MergeFrom(const Erk_ServiceShutdown_ntf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Erk_ServiceShutdown_ntf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_service() != 0) {
    _internal_set_service(from._internal_service());
  }
  if (from._internal_svr_type() != 0) {
    _internal_set_svr_type(from._internal_svr_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Erk_ServiceShutdown_ntf::CopyFrom(const Erk_ServiceShutdown_ntf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Erk_ServiceShutdown_ntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Erk_ServiceShutdown_ntf::IsInitialized() const {
  return true;
}

void Erk_ServiceShutdown_ntf::InternalSwap(Erk_ServiceShutdown_ntf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Erk_ServiceShutdown_ntf, svr_type_)
      + sizeof(Erk_ServiceShutdown_ntf::svr_type_)
      - PROTOBUF_FIELD_OFFSET(Erk_ServiceShutdown_ntf, service_)>(
          reinterpret_cast<char*>(&service_),
          reinterpret_cast<char*>(&other->service_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Erk_ServiceShutdown_ntf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_eureka_5finternal_2eproto_getter, &descriptor_table_eureka_5finternal_2eproto_once,
      file_level_metadata_eureka_5finternal_2eproto[16]);
}

// ===================================================================

class Svr_LiveTick_ntf::_Internal {
 public:
};

Svr_LiveTick_ntf::Svr_LiveTick_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:PRO.Svr_LiveTick_ntf)
}
Svr_LiveTick_ntf::Svr_LiveTick_ntf(const Svr_LiveTick_ntf& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PRO.Svr_LiveTick_ntf)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Svr_LiveTick_ntf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Svr_LiveTick_ntf::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Svr_LiveTick_ntf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_eureka_5finternal_2eproto_getter, &descriptor_table_eureka_5finternal_2eproto_once,
      file_level_metadata_eureka_5finternal_2eproto[17]);
}

// ===================================================================

Svr_ServiceBindService_req_MyextsEntry_DoNotUse::Svr_ServiceBindService_req_MyextsEntry_DoNotUse() {}
Svr_ServiceBindService_req_MyextsEntry_DoNotUse::Svr_ServiceBindService_req_MyextsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Svr_ServiceBindService_req_MyextsEntry_DoNotUse::MergeFrom(const Svr_ServiceBindService_req_MyextsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Svr_ServiceBindService_req_MyextsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_eureka_5finternal_2eproto_getter, &descriptor_table_eureka_5finternal_2eproto_once,
      file_level_metadata_eureka_5finternal_2eproto[18]);
}

// ===================================================================

class Svr_ServiceBindService_req::_Internal {
 public:
};

Svr_ServiceBindService_req::Svr_ServiceBindService_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  myexts_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Svr_ServiceBindService_req)
}
Svr_ServiceBindService_req::Svr_ServiceBindService_req(const Svr_ServiceBindService_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  myexts_.MergeFrom(from.myexts_);
  ::memcpy(&myiid_, &from.myiid_,
    static_cast<size_t>(reinterpret_cast<char*>(&totoken_) -
    reinterpret_cast<char*>(&myiid_)) + sizeof(totoken_));
  // @@protoc_insertion_point(copy_constructor:PRO.Svr_ServiceBindService_req)
}

inline void Svr_ServiceBindService_req::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&myiid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&totoken_) -
    reinterpret_cast<char*>(&myiid_)) + sizeof(totoken_));
}

Svr_ServiceBindService_req::~Svr_ServiceBindService_req() {
  // @@protoc_insertion_point(destructor:PRO.Svr_ServiceBindService_req)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Svr_ServiceBindService_req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Svr_ServiceBindService_req::ArenaDtor(void* object) {
  Svr_ServiceBindService_req* _this = reinterpret_cast< Svr_ServiceBindService_req* >(object);
  (void)_this;
  _this->myexts_. ~MapField();
}
inline void Svr_ServiceBindService_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Svr_ServiceBindService_req::ArenaDtor);
  }
}
void Svr_ServiceBindService_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Svr_ServiceBindService_req::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Svr_ServiceBindService_req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  myexts_.Clear();
  ::memset(&myiid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&totoken_) -
      reinterpret_cast<char*>(&myiid_)) + sizeof(totoken_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Svr_ServiceBindService_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 svr_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          svr_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 myiid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          myiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 mytoken = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          mytoken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> myexts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&myexts_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 toiid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          toiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 totoken = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          totoken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Svr_ServiceBindService_req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Svr_ServiceBindService_req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 svr_type = 1;
  if (this->_internal_svr_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_svr_type(), target);
  }

  // int64 myiid = 2;
  if (this->_internal_myiid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_myiid(), target);
  }

  // int64 mytoken = 3;
  if (this->_internal_mytoken() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_mytoken(), target);
  }

  // map<string, string> myexts = 4;
  if (!this->_internal_myexts().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "PRO.Svr_ServiceBindService_req.MyextsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "PRO.Svr_ServiceBindService_req.MyextsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_myexts().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_myexts().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_myexts().begin();
          it != this->_internal_myexts().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Svr_ServiceBindService_req_MyextsEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_myexts().begin();
          it != this->_internal_myexts().end(); ++it) {
        target = Svr_ServiceBindService_req_MyextsEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int64 toiid = 10;
  if (this->_internal_toiid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_toiid(), target);
  }

  // int64 totoken = 11;
  if (this->_internal_totoken() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_totoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Svr_ServiceBindService_req)
  return target;
}

size_t Svr_ServiceBindService_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Svr_ServiceBindService_req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> myexts = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_myexts_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_myexts().begin();
      it != this->_internal_myexts().end(); ++it) {
    total_size += Svr_ServiceBindService_req_MyextsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int64 myiid = 2;
  if (this->_internal_myiid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_myiid());
  }

  // int64 mytoken = 3;
  if (this->_internal_mytoken() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_mytoken());
  }

  // int32 svr_type = 1;
  if (this->_internal_svr_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_svr_type());
  }

  // int64 toiid = 10;
  if (this->_internal_toiid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_toiid());
  }

  // int64 totoken = 11;
  if (this->_internal_totoken() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_totoken());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Svr_ServiceBindService_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Svr_ServiceBindService_req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Svr_ServiceBindService_req::GetClassData() const { return &_class_data_; }

void Svr_ServiceBindService_req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Svr_ServiceBindService_req *>(to)->MergeFrom(
      static_cast<const Svr_ServiceBindService_req &>(from));
}


void Svr_ServiceBindService_req::MergeFrom(const Svr_ServiceBindService_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Svr_ServiceBindService_req)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  myexts_.MergeFrom(from.myexts_);
  if (from._internal_myiid() != 0) {
    _internal_set_myiid(from._internal_myiid());
  }
  if (from._internal_mytoken() != 0) {
    _internal_set_mytoken(from._internal_mytoken());
  }
  if (from._internal_svr_type() != 0) {
    _internal_set_svr_type(from._internal_svr_type());
  }
  if (from._internal_toiid() != 0) {
    _internal_set_toiid(from._internal_toiid());
  }
  if (from._internal_totoken() != 0) {
    _internal_set_totoken(from._internal_totoken());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Svr_ServiceBindService_req::CopyFrom(const Svr_ServiceBindService_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Svr_ServiceBindService_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Svr_ServiceBindService_req::IsInitialized() const {
  return true;
}

void Svr_ServiceBindService_req::InternalSwap(Svr_ServiceBindService_req* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  myexts_.InternalSwap(&other->myexts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Svr_ServiceBindService_req, totoken_)
      + sizeof(Svr_ServiceBindService_req::totoken_)
      - PROTOBUF_FIELD_OFFSET(Svr_ServiceBindService_req, myiid_)>(
          reinterpret_cast<char*>(&myiid_),
          reinterpret_cast<char*>(&other->myiid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Svr_ServiceBindService_req::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_eureka_5finternal_2eproto_getter, &descriptor_table_eureka_5finternal_2eproto_once,
      file_level_metadata_eureka_5finternal_2eproto[19]);
}

// ===================================================================

class Svr_ServiceBindService_ack::_Internal {
 public:
};

Svr_ServiceBindService_ack::Svr_ServiceBindService_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Svr_ServiceBindService_ack)
}
Svr_ServiceBindService_ack::Svr_ServiceBindService_ack(const Svr_ServiceBindService_ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&totoken_) -
    reinterpret_cast<char*>(&result_)) + sizeof(totoken_));
  // @@protoc_insertion_point(copy_constructor:PRO.Svr_ServiceBindService_ack)
}

inline void Svr_ServiceBindService_ack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&totoken_) -
    reinterpret_cast<char*>(&result_)) + sizeof(totoken_));
}

Svr_ServiceBindService_ack::~Svr_ServiceBindService_ack() {
  // @@protoc_insertion_point(destructor:PRO.Svr_ServiceBindService_ack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Svr_ServiceBindService_ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Svr_ServiceBindService_ack::ArenaDtor(void* object) {
  Svr_ServiceBindService_ack* _this = reinterpret_cast< Svr_ServiceBindService_ack* >(object);
  (void)_this;
}
void Svr_ServiceBindService_ack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Svr_ServiceBindService_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Svr_ServiceBindService_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Svr_ServiceBindService_ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&totoken_) -
      reinterpret_cast<char*>(&result_)) + sizeof(totoken_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Svr_ServiceBindService_ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 svr_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          svr_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 toiid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          toiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 totoken = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          totoken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Svr_ServiceBindService_ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Svr_ServiceBindService_ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // int32 svr_type = 2;
  if (this->_internal_svr_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_svr_type(), target);
  }

  // int64 toiid = 3;
  if (this->_internal_toiid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_toiid(), target);
  }

  // int64 totoken = 4;
  if (this->_internal_totoken() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_totoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Svr_ServiceBindService_ack)
  return target;
}

size_t Svr_ServiceBindService_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Svr_ServiceBindService_ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  // int32 svr_type = 2;
  if (this->_internal_svr_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_svr_type());
  }

  // int64 toiid = 3;
  if (this->_internal_toiid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_toiid());
  }

  // int64 totoken = 4;
  if (this->_internal_totoken() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_totoken());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Svr_ServiceBindService_ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Svr_ServiceBindService_ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Svr_ServiceBindService_ack::GetClassData() const { return &_class_data_; }

void Svr_ServiceBindService_ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Svr_ServiceBindService_ack *>(to)->MergeFrom(
      static_cast<const Svr_ServiceBindService_ack &>(from));
}


void Svr_ServiceBindService_ack::MergeFrom(const Svr_ServiceBindService_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Svr_ServiceBindService_ack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from._internal_svr_type() != 0) {
    _internal_set_svr_type(from._internal_svr_type());
  }
  if (from._internal_toiid() != 0) {
    _internal_set_toiid(from._internal_toiid());
  }
  if (from._internal_totoken() != 0) {
    _internal_set_totoken(from._internal_totoken());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Svr_ServiceBindService_ack::CopyFrom(const Svr_ServiceBindService_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Svr_ServiceBindService_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Svr_ServiceBindService_ack::IsInitialized() const {
  return true;
}

void Svr_ServiceBindService_ack::InternalSwap(Svr_ServiceBindService_ack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Svr_ServiceBindService_ack, totoken_)
      + sizeof(Svr_ServiceBindService_ack::totoken_)
      - PROTOBUF_FIELD_OFFSET(Svr_ServiceBindService_ack, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Svr_ServiceBindService_ack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_eureka_5finternal_2eproto_getter, &descriptor_table_eureka_5finternal_2eproto_once,
      file_level_metadata_eureka_5finternal_2eproto[20]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace PRO
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PRO::EurekaServerNode* Arena::CreateMaybeMessage< ::PRO::EurekaServerNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::EurekaServerNode >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Erk_EurekaBind_req* Arena::CreateMaybeMessage< ::PRO::Erk_EurekaBind_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Erk_EurekaBind_req >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Erk_EurekaBind_ack* Arena::CreateMaybeMessage< ::PRO::Erk_EurekaBind_ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Erk_EurekaBind_ack >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Erk_EurekaUpdate_ntf* Arena::CreateMaybeMessage< ::PRO::Erk_EurekaUpdate_ntf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Erk_EurekaUpdate_ntf >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Erk_Eureka_sync* Arena::CreateMaybeMessage< ::PRO::Erk_Eureka_sync >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Erk_Eureka_sync >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::ServerNode_ExtsEntry_DoNotUse* Arena::CreateMaybeMessage< ::PRO::ServerNode_ExtsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::ServerNode_ExtsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::ServerNode* Arena::CreateMaybeMessage< ::PRO::ServerNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::ServerNode >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Erk_ServiceRegist_req_ExtsEntry_DoNotUse* Arena::CreateMaybeMessage< ::PRO::Erk_ServiceRegist_req_ExtsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Erk_ServiceRegist_req_ExtsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Erk_ServiceRegist_req* Arena::CreateMaybeMessage< ::PRO::Erk_ServiceRegist_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Erk_ServiceRegist_req >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Erk_ServiceRegist_ack* Arena::CreateMaybeMessage< ::PRO::Erk_ServiceRegist_ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Erk_ServiceRegist_ack >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Erk_ServiceRegist_Confirm* Arena::CreateMaybeMessage< ::PRO::Erk_ServiceRegist_Confirm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Erk_ServiceRegist_Confirm >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Erk_ServiceBind_req* Arena::CreateMaybeMessage< ::PRO::Erk_ServiceBind_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Erk_ServiceBind_req >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Erk_ServiceBind_ack* Arena::CreateMaybeMessage< ::PRO::Erk_ServiceBind_ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Erk_ServiceBind_ack >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Erk_ServiceSubscribe_req_svrinfo* Arena::CreateMaybeMessage< ::PRO::Erk_ServiceSubscribe_req_svrinfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Erk_ServiceSubscribe_req_svrinfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Erk_ServiceSubscribe_req* Arena::CreateMaybeMessage< ::PRO::Erk_ServiceSubscribe_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Erk_ServiceSubscribe_req >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Erk_ServiceSubscribe_ack* Arena::CreateMaybeMessage< ::PRO::Erk_ServiceSubscribe_ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Erk_ServiceSubscribe_ack >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Erk_ServiceShutdown_ntf* Arena::CreateMaybeMessage< ::PRO::Erk_ServiceShutdown_ntf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Erk_ServiceShutdown_ntf >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Svr_LiveTick_ntf* Arena::CreateMaybeMessage< ::PRO::Svr_LiveTick_ntf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Svr_LiveTick_ntf >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Svr_ServiceBindService_req_MyextsEntry_DoNotUse* Arena::CreateMaybeMessage< ::PRO::Svr_ServiceBindService_req_MyextsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Svr_ServiceBindService_req_MyextsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Svr_ServiceBindService_req* Arena::CreateMaybeMessage< ::PRO::Svr_ServiceBindService_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Svr_ServiceBindService_req >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Svr_ServiceBindService_ack* Arena::CreateMaybeMessage< ::PRO::Svr_ServiceBindService_ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Svr_ServiceBindService_ack >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db_internal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_db_5finternal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_db_5finternal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_db_5finternal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_db_5finternal_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_db_5finternal_2eproto;
namespace PRO {
class DBPetCategory;
struct DBPetCategoryDefaultTypeInternal;
extern DBPetCategoryDefaultTypeInternal _DBPetCategory_default_instance_;
class DBRoleBaseInfo;
struct DBRoleBaseInfoDefaultTypeInternal;
extern DBRoleBaseInfoDefaultTypeInternal _DBRoleBaseInfo_default_instance_;
class DBRowDel;
struct DBRowDelDefaultTypeInternal;
extern DBRowDelDefaultTypeInternal _DBRowDel_default_instance_;
class DBRowDeletes;
struct DBRowDeletesDefaultTypeInternal;
extern DBRowDeletesDefaultTypeInternal _DBRowDeletes_default_instance_;
class DBUserHome;
struct DBUserHomeDefaultTypeInternal;
extern DBUserHomeDefaultTypeInternal _DBUserHome_default_instance_;
class DBUserHomeStructure;
struct DBUserHomeStructureDefaultTypeInternal;
extern DBUserHomeStructureDefaultTypeInternal _DBUserHomeStructure_default_instance_;
class DBUserHomeStructureItem;
struct DBUserHomeStructureItemDefaultTypeInternal;
extern DBUserHomeStructureItemDefaultTypeInternal _DBUserHomeStructureItem_default_instance_;
class DBUserPetItem;
struct DBUserPetItemDefaultTypeInternal;
extern DBUserPetItemDefaultTypeInternal _DBUserPetItem_default_instance_;
class DBUserPets;
struct DBUserPetsDefaultTypeInternal;
extern DBUserPetsDefaultTypeInternal _DBUserPets_default_instance_;
class DBUserRoles;
struct DBUserRolesDefaultTypeInternal;
extern DBUserRolesDefaultTypeInternal _DBUserRoles_default_instance_;
}  // namespace PRO
PROTOBUF_NAMESPACE_OPEN
template<> ::PRO::DBPetCategory* Arena::CreateMaybeMessage<::PRO::DBPetCategory>(Arena*);
template<> ::PRO::DBRoleBaseInfo* Arena::CreateMaybeMessage<::PRO::DBRoleBaseInfo>(Arena*);
template<> ::PRO::DBRowDel* Arena::CreateMaybeMessage<::PRO::DBRowDel>(Arena*);
template<> ::PRO::DBRowDeletes* Arena::CreateMaybeMessage<::PRO::DBRowDeletes>(Arena*);
template<> ::PRO::DBUserHome* Arena::CreateMaybeMessage<::PRO::DBUserHome>(Arena*);
template<> ::PRO::DBUserHomeStructure* Arena::CreateMaybeMessage<::PRO::DBUserHomeStructure>(Arena*);
template<> ::PRO::DBUserHomeStructureItem* Arena::CreateMaybeMessage<::PRO::DBUserHomeStructureItem>(Arena*);
template<> ::PRO::DBUserPetItem* Arena::CreateMaybeMessage<::PRO::DBUserPetItem>(Arena*);
template<> ::PRO::DBUserPets* Arena::CreateMaybeMessage<::PRO::DBUserPets>(Arena*);
template<> ::PRO::DBUserRoles* Arena::CreateMaybeMessage<::PRO::DBUserRoles>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PRO {

// ===================================================================

class DBRowDel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.DBRowDel) */ {
 public:
  inline DBRowDel() : DBRowDel(nullptr) {}
  ~DBRowDel() override;
  explicit constexpr DBRowDel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBRowDel(const DBRowDel& from);
  DBRowDel(DBRowDel&& from) noexcept
    : DBRowDel() {
    *this = ::std::move(from);
  }

  inline DBRowDel& operator=(const DBRowDel& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBRowDel& operator=(DBRowDel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBRowDel& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBRowDel* internal_default_instance() {
    return reinterpret_cast<const DBRowDel*>(
               &_DBRowDel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DBRowDel& a, DBRowDel& b) {
    a.Swap(&b);
  }
  inline void Swap(DBRowDel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBRowDel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBRowDel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBRowDel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBRowDel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBRowDel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBRowDel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.DBRowDel";
  }
  protected:
  explicit DBRowDel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kVerFieldNumber = 1,
  };
  // int64 id = 2;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // uint32 ver_ = 1;
  void clear_ver_();
  uint32_t ver_() const;
  void set_ver_(uint32_t value);
  private:
  uint32_t _internal_ver_() const;
  void _internal_set_ver_(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.DBRowDel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t id_;
  uint32_t ver__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_5finternal_2eproto;
};
// -------------------------------------------------------------------

class DBRowDeletes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.DBRowDeletes) */ {
 public:
  inline DBRowDeletes() : DBRowDeletes(nullptr) {}
  ~DBRowDeletes() override;
  explicit constexpr DBRowDeletes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBRowDeletes(const DBRowDeletes& from);
  DBRowDeletes(DBRowDeletes&& from) noexcept
    : DBRowDeletes() {
    *this = ::std::move(from);
  }

  inline DBRowDeletes& operator=(const DBRowDeletes& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBRowDeletes& operator=(DBRowDeletes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBRowDeletes& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBRowDeletes* internal_default_instance() {
    return reinterpret_cast<const DBRowDeletes*>(
               &_DBRowDeletes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DBRowDeletes& a, DBRowDeletes& b) {
    a.Swap(&b);
  }
  inline void Swap(DBRowDeletes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBRowDeletes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBRowDeletes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBRowDeletes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBRowDeletes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBRowDeletes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBRowDeletes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.DBRowDeletes";
  }
  protected:
  explicit DBRowDeletes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelsFieldNumber = 1,
  };
  // repeated .PRO.DBRowDel dels = 1;
  int dels_size() const;
  private:
  int _internal_dels_size() const;
  public:
  void clear_dels();
  ::PRO::DBRowDel* mutable_dels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::DBRowDel >*
      mutable_dels();
  private:
  const ::PRO::DBRowDel& _internal_dels(int index) const;
  ::PRO::DBRowDel* _internal_add_dels();
  public:
  const ::PRO::DBRowDel& dels(int index) const;
  ::PRO::DBRowDel* add_dels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::DBRowDel >&
      dels() const;

  // @@protoc_insertion_point(class_scope:PRO.DBRowDeletes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::DBRowDel > dels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_5finternal_2eproto;
};
// -------------------------------------------------------------------

class DBRoleBaseInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.DBRoleBaseInfo) */ {
 public:
  inline DBRoleBaseInfo() : DBRoleBaseInfo(nullptr) {}
  ~DBRoleBaseInfo() override;
  explicit constexpr DBRoleBaseInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBRoleBaseInfo(const DBRoleBaseInfo& from);
  DBRoleBaseInfo(DBRoleBaseInfo&& from) noexcept
    : DBRoleBaseInfo() {
    *this = ::std::move(from);
  }

  inline DBRoleBaseInfo& operator=(const DBRoleBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBRoleBaseInfo& operator=(DBRoleBaseInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBRoleBaseInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBRoleBaseInfo* internal_default_instance() {
    return reinterpret_cast<const DBRoleBaseInfo*>(
               &_DBRoleBaseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DBRoleBaseInfo& a, DBRoleBaseInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DBRoleBaseInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBRoleBaseInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBRoleBaseInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBRoleBaseInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBRoleBaseInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBRoleBaseInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBRoleBaseInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.DBRoleBaseInfo";
  }
  protected:
  explicit DBRoleBaseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 4,
    kRoleIidFieldNumber = 2,
    kUserIidFieldNumber = 3,
    kVerFieldNumber = 1,
    kRegistimeFieldNumber = 5,
  };
  // string nickname = 4;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // int64 role_iid = 2;
  void clear_role_iid();
  int64_t role_iid() const;
  void set_role_iid(int64_t value);
  private:
  int64_t _internal_role_iid() const;
  void _internal_set_role_iid(int64_t value);
  public:

  // int64 user_iid = 3;
  void clear_user_iid();
  int64_t user_iid() const;
  void set_user_iid(int64_t value);
  private:
  int64_t _internal_user_iid() const;
  void _internal_set_user_iid(int64_t value);
  public:

  // uint32 ver_ = 1;
  void clear_ver_();
  uint32_t ver_() const;
  void set_ver_(uint32_t value);
  private:
  uint32_t _internal_ver_() const;
  void _internal_set_ver_(uint32_t value);
  public:

  // int32 registime = 5;
  void clear_registime();
  int32_t registime() const;
  void set_registime(int32_t value);
  private:
  int32_t _internal_registime() const;
  void _internal_set_registime(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.DBRoleBaseInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  int64_t role_iid_;
  int64_t user_iid_;
  uint32_t ver__;
  int32_t registime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_5finternal_2eproto;
};
// -------------------------------------------------------------------

class DBUserRoles final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.DBUserRoles) */ {
 public:
  inline DBUserRoles() : DBUserRoles(nullptr) {}
  ~DBUserRoles() override;
  explicit constexpr DBUserRoles(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBUserRoles(const DBUserRoles& from);
  DBUserRoles(DBUserRoles&& from) noexcept
    : DBUserRoles() {
    *this = ::std::move(from);
  }

  inline DBUserRoles& operator=(const DBUserRoles& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBUserRoles& operator=(DBUserRoles&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBUserRoles& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBUserRoles* internal_default_instance() {
    return reinterpret_cast<const DBUserRoles*>(
               &_DBUserRoles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DBUserRoles& a, DBUserRoles& b) {
    a.Swap(&b);
  }
  inline void Swap(DBUserRoles* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBUserRoles* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBUserRoles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBUserRoles>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBUserRoles& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBUserRoles& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBUserRoles* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.DBUserRoles";
  }
  protected:
  explicit DBUserRoles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolesFieldNumber = 1,
  };
  // repeated .PRO.DBRoleBaseInfo roles = 1;
  int roles_size() const;
  private:
  int _internal_roles_size() const;
  public:
  void clear_roles();
  ::PRO::DBRoleBaseInfo* mutable_roles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::DBRoleBaseInfo >*
      mutable_roles();
  private:
  const ::PRO::DBRoleBaseInfo& _internal_roles(int index) const;
  ::PRO::DBRoleBaseInfo* _internal_add_roles();
  public:
  const ::PRO::DBRoleBaseInfo& roles(int index) const;
  ::PRO::DBRoleBaseInfo* add_roles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::DBRoleBaseInfo >&
      roles() const;

  // @@protoc_insertion_point(class_scope:PRO.DBUserRoles)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::DBRoleBaseInfo > roles_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_5finternal_2eproto;
};
// -------------------------------------------------------------------

class DBUserHome final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.DBUserHome) */ {
 public:
  inline DBUserHome() : DBUserHome(nullptr) {}
  ~DBUserHome() override;
  explicit constexpr DBUserHome(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBUserHome(const DBUserHome& from);
  DBUserHome(DBUserHome&& from) noexcept
    : DBUserHome() {
    *this = ::std::move(from);
  }

  inline DBUserHome& operator=(const DBUserHome& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBUserHome& operator=(DBUserHome&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBUserHome& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBUserHome* internal_default_instance() {
    return reinterpret_cast<const DBUserHome*>(
               &_DBUserHome_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DBUserHome& a, DBUserHome& b) {
    a.Swap(&b);
  }
  inline void Swap(DBUserHome* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBUserHome* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBUserHome* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBUserHome>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBUserHome& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBUserHome& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBUserHome* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.DBUserHome";
  }
  protected:
  explicit DBUserHome(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHomeNameFieldNumber = 3,
    kLookAtFieldNumber = 5,
    kGeoPosFieldNumber = 6,
    kRoleIidFieldNumber = 2,
    kGroundResidFieldNumber = 4,
    kVerFieldNumber = 1,
    kResideTimeFieldNumber = 7,
    kLastResidedateFieldNumber = 8,
  };
  // string home_name = 3;
  void clear_home_name();
  const std::string& home_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_home_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_home_name();
  PROTOBUF_NODISCARD std::string* release_home_name();
  void set_allocated_home_name(std::string* home_name);
  private:
  const std::string& _internal_home_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_home_name(const std::string& value);
  std::string* _internal_mutable_home_name();
  public:

  // string look_at = 5;
  void clear_look_at();
  const std::string& look_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_look_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_look_at();
  PROTOBUF_NODISCARD std::string* release_look_at();
  void set_allocated_look_at(std::string* look_at);
  private:
  const std::string& _internal_look_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_look_at(const std::string& value);
  std::string* _internal_mutable_look_at();
  public:

  // string geo_pos = 6;
  void clear_geo_pos();
  const std::string& geo_pos() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_geo_pos(ArgT0&& arg0, ArgT... args);
  std::string* mutable_geo_pos();
  PROTOBUF_NODISCARD std::string* release_geo_pos();
  void set_allocated_geo_pos(std::string* geo_pos);
  private:
  const std::string& _internal_geo_pos() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_geo_pos(const std::string& value);
  std::string* _internal_mutable_geo_pos();
  public:

  // int64 role_iid = 2;
  void clear_role_iid();
  int64_t role_iid() const;
  void set_role_iid(int64_t value);
  private:
  int64_t _internal_role_iid() const;
  void _internal_set_role_iid(int64_t value);
  public:

  // int64 ground_resid = 4;
  void clear_ground_resid();
  int64_t ground_resid() const;
  void set_ground_resid(int64_t value);
  private:
  int64_t _internal_ground_resid() const;
  void _internal_set_ground_resid(int64_t value);
  public:

  // uint32 ver_ = 1;
  void clear_ver_();
  uint32_t ver_() const;
  void set_ver_(uint32_t value);
  private:
  uint32_t _internal_ver_() const;
  void _internal_set_ver_(uint32_t value);
  public:

  // int32 reside_time = 7;
  void clear_reside_time();
  int32_t reside_time() const;
  void set_reside_time(int32_t value);
  private:
  int32_t _internal_reside_time() const;
  void _internal_set_reside_time(int32_t value);
  public:

  // int32 last_residedate = 8;
  void clear_last_residedate();
  int32_t last_residedate() const;
  void set_last_residedate(int32_t value);
  private:
  int32_t _internal_last_residedate() const;
  void _internal_set_last_residedate(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.DBUserHome)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr home_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr look_at_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geo_pos_;
  int64_t role_iid_;
  int64_t ground_resid_;
  uint32_t ver__;
  int32_t reside_time_;
  int32_t last_residedate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_5finternal_2eproto;
};
// -------------------------------------------------------------------

class DBUserHomeStructureItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.DBUserHomeStructureItem) */ {
 public:
  inline DBUserHomeStructureItem() : DBUserHomeStructureItem(nullptr) {}
  ~DBUserHomeStructureItem() override;
  explicit constexpr DBUserHomeStructureItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBUserHomeStructureItem(const DBUserHomeStructureItem& from);
  DBUserHomeStructureItem(DBUserHomeStructureItem&& from) noexcept
    : DBUserHomeStructureItem() {
    *this = ::std::move(from);
  }

  inline DBUserHomeStructureItem& operator=(const DBUserHomeStructureItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBUserHomeStructureItem& operator=(DBUserHomeStructureItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBUserHomeStructureItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBUserHomeStructureItem* internal_default_instance() {
    return reinterpret_cast<const DBUserHomeStructureItem*>(
               &_DBUserHomeStructureItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DBUserHomeStructureItem& a, DBUserHomeStructureItem& b) {
    a.Swap(&b);
  }
  inline void Swap(DBUserHomeStructureItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBUserHomeStructureItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBUserHomeStructureItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBUserHomeStructureItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBUserHomeStructureItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBUserHomeStructureItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBUserHomeStructureItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.DBUserHomeStructureItem";
  }
  protected:
  explicit DBUserHomeStructureItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLookAtFieldNumber = 6,
    kBuildingPosFieldNumber = 7,
    kBuildingIidFieldNumber = 2,
    kHomeIidFieldNumber = 3,
    kParentBuildingFieldNumber = 4,
    kBuildingResidFieldNumber = 5,
    kVerFieldNumber = 1,
  };
  // string look_at = 6;
  void clear_look_at();
  const std::string& look_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_look_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_look_at();
  PROTOBUF_NODISCARD std::string* release_look_at();
  void set_allocated_look_at(std::string* look_at);
  private:
  const std::string& _internal_look_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_look_at(const std::string& value);
  std::string* _internal_mutable_look_at();
  public:

  // string building_pos = 7;
  void clear_building_pos();
  const std::string& building_pos() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_building_pos(ArgT0&& arg0, ArgT... args);
  std::string* mutable_building_pos();
  PROTOBUF_NODISCARD std::string* release_building_pos();
  void set_allocated_building_pos(std::string* building_pos);
  private:
  const std::string& _internal_building_pos() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_building_pos(const std::string& value);
  std::string* _internal_mutable_building_pos();
  public:

  // int64 building_iid = 2;
  void clear_building_iid();
  int64_t building_iid() const;
  void set_building_iid(int64_t value);
  private:
  int64_t _internal_building_iid() const;
  void _internal_set_building_iid(int64_t value);
  public:

  // int64 home_iid = 3;
  void clear_home_iid();
  int64_t home_iid() const;
  void set_home_iid(int64_t value);
  private:
  int64_t _internal_home_iid() const;
  void _internal_set_home_iid(int64_t value);
  public:

  // int64 parent_building = 4;
  void clear_parent_building();
  int64_t parent_building() const;
  void set_parent_building(int64_t value);
  private:
  int64_t _internal_parent_building() const;
  void _internal_set_parent_building(int64_t value);
  public:

  // int64 building_resid = 5;
  void clear_building_resid();
  int64_t building_resid() const;
  void set_building_resid(int64_t value);
  private:
  int64_t _internal_building_resid() const;
  void _internal_set_building_resid(int64_t value);
  public:

  // uint32 ver_ = 1;
  void clear_ver_();
  uint32_t ver_() const;
  void set_ver_(uint32_t value);
  private:
  uint32_t _internal_ver_() const;
  void _internal_set_ver_(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.DBUserHomeStructureItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr look_at_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr building_pos_;
  int64_t building_iid_;
  int64_t home_iid_;
  int64_t parent_building_;
  int64_t building_resid_;
  uint32_t ver__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_5finternal_2eproto;
};
// -------------------------------------------------------------------

class DBUserHomeStructure final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.DBUserHomeStructure) */ {
 public:
  inline DBUserHomeStructure() : DBUserHomeStructure(nullptr) {}
  ~DBUserHomeStructure() override;
  explicit constexpr DBUserHomeStructure(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBUserHomeStructure(const DBUserHomeStructure& from);
  DBUserHomeStructure(DBUserHomeStructure&& from) noexcept
    : DBUserHomeStructure() {
    *this = ::std::move(from);
  }

  inline DBUserHomeStructure& operator=(const DBUserHomeStructure& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBUserHomeStructure& operator=(DBUserHomeStructure&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBUserHomeStructure& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBUserHomeStructure* internal_default_instance() {
    return reinterpret_cast<const DBUserHomeStructure*>(
               &_DBUserHomeStructure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DBUserHomeStructure& a, DBUserHomeStructure& b) {
    a.Swap(&b);
  }
  inline void Swap(DBUserHomeStructure* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBUserHomeStructure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBUserHomeStructure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBUserHomeStructure>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBUserHomeStructure& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBUserHomeStructure& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBUserHomeStructure* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.DBUserHomeStructure";
  }
  protected:
  explicit DBUserHomeStructure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .PRO.DBUserHomeStructureItem items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::PRO::DBUserHomeStructureItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::DBUserHomeStructureItem >*
      mutable_items();
  private:
  const ::PRO::DBUserHomeStructureItem& _internal_items(int index) const;
  ::PRO::DBUserHomeStructureItem* _internal_add_items();
  public:
  const ::PRO::DBUserHomeStructureItem& items(int index) const;
  ::PRO::DBUserHomeStructureItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::DBUserHomeStructureItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:PRO.DBUserHomeStructure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::DBUserHomeStructureItem > items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_5finternal_2eproto;
};
// -------------------------------------------------------------------

class DBPetCategory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.DBPetCategory) */ {
 public:
  inline DBPetCategory() : DBPetCategory(nullptr) {}
  ~DBPetCategory() override;
  explicit constexpr DBPetCategory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBPetCategory(const DBPetCategory& from);
  DBPetCategory(DBPetCategory&& from) noexcept
    : DBPetCategory() {
    *this = ::std::move(from);
  }

  inline DBPetCategory& operator=(const DBPetCategory& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBPetCategory& operator=(DBPetCategory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBPetCategory& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBPetCategory* internal_default_instance() {
    return reinterpret_cast<const DBPetCategory*>(
               &_DBPetCategory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DBPetCategory& a, DBPetCategory& b) {
    a.Swap(&b);
  }
  inline void Swap(DBPetCategory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBPetCategory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBPetCategory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBPetCategory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBPetCategory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBPetCategory& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBPetCategory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.DBPetCategory";
  }
  protected:
  explicit DBPetCategory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPetNameFieldNumber = 6,
    kPetIidFieldNumber = 2,
    kPetResidFieldNumber = 4,
    kPetTypeFieldNumber = 3,
    kPetSexFieldNumber = 5,
  };
  // string pet_name = 6;
  void clear_pet_name();
  const std::string& pet_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pet_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pet_name();
  PROTOBUF_NODISCARD std::string* release_pet_name();
  void set_allocated_pet_name(std::string* pet_name);
  private:
  const std::string& _internal_pet_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pet_name(const std::string& value);
  std::string* _internal_mutable_pet_name();
  public:

  // int64 pet_iid = 2;
  void clear_pet_iid();
  int64_t pet_iid() const;
  void set_pet_iid(int64_t value);
  private:
  int64_t _internal_pet_iid() const;
  void _internal_set_pet_iid(int64_t value);
  public:

  // int64 pet_resid = 4;
  void clear_pet_resid();
  int64_t pet_resid() const;
  void set_pet_resid(int64_t value);
  private:
  int64_t _internal_pet_resid() const;
  void _internal_set_pet_resid(int64_t value);
  public:

  // int32 pet_type = 3;
  void clear_pet_type();
  int32_t pet_type() const;
  void set_pet_type(int32_t value);
  private:
  int32_t _internal_pet_type() const;
  void _internal_set_pet_type(int32_t value);
  public:

  // int32 pet_sex = 5;
  void clear_pet_sex();
  int32_t pet_sex() const;
  void set_pet_sex(int32_t value);
  private:
  int32_t _internal_pet_sex() const;
  void _internal_set_pet_sex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.DBPetCategory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pet_name_;
  int64_t pet_iid_;
  int64_t pet_resid_;
  int32_t pet_type_;
  int32_t pet_sex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_5finternal_2eproto;
};
// -------------------------------------------------------------------

class DBUserPetItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.DBUserPetItem) */ {
 public:
  inline DBUserPetItem() : DBUserPetItem(nullptr) {}
  ~DBUserPetItem() override;
  explicit constexpr DBUserPetItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBUserPetItem(const DBUserPetItem& from);
  DBUserPetItem(DBUserPetItem&& from) noexcept
    : DBUserPetItem() {
    *this = ::std::move(from);
  }

  inline DBUserPetItem& operator=(const DBUserPetItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBUserPetItem& operator=(DBUserPetItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBUserPetItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBUserPetItem* internal_default_instance() {
    return reinterpret_cast<const DBUserPetItem*>(
               &_DBUserPetItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DBUserPetItem& a, DBUserPetItem& b) {
    a.Swap(&b);
  }
  inline void Swap(DBUserPetItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBUserPetItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBUserPetItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBUserPetItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBUserPetItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBUserPetItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBUserPetItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.DBUserPetItem";
  }
  protected:
  explicit DBUserPetItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMypetIidFieldNumber = 2,
    kRoleIidFieldNumber = 3,
    kVerFieldNumber = 1,
    kPetAgeFieldNumber = 5,
    kPetIidFieldNumber = 4,
    kBirthdayFieldNumber = 6,
  };
  // int64 mypet_iid = 2;
  void clear_mypet_iid();
  int64_t mypet_iid() const;
  void set_mypet_iid(int64_t value);
  private:
  int64_t _internal_mypet_iid() const;
  void _internal_set_mypet_iid(int64_t value);
  public:

  // int64 role_iid = 3;
  void clear_role_iid();
  int64_t role_iid() const;
  void set_role_iid(int64_t value);
  private:
  int64_t _internal_role_iid() const;
  void _internal_set_role_iid(int64_t value);
  public:

  // uint32 ver_ = 1;
  void clear_ver_();
  uint32_t ver_() const;
  void set_ver_(uint32_t value);
  private:
  uint32_t _internal_ver_() const;
  void _internal_set_ver_(uint32_t value);
  public:

  // int32 pet_age = 5;
  void clear_pet_age();
  int32_t pet_age() const;
  void set_pet_age(int32_t value);
  private:
  int32_t _internal_pet_age() const;
  void _internal_set_pet_age(int32_t value);
  public:

  // int64 pet_iid = 4;
  void clear_pet_iid();
  int64_t pet_iid() const;
  void set_pet_iid(int64_t value);
  private:
  int64_t _internal_pet_iid() const;
  void _internal_set_pet_iid(int64_t value);
  public:

  // int32 birthday = 6;
  void clear_birthday();
  int32_t birthday() const;
  void set_birthday(int32_t value);
  private:
  int32_t _internal_birthday() const;
  void _internal_set_birthday(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.DBUserPetItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t mypet_iid_;
  int64_t role_iid_;
  uint32_t ver__;
  int32_t pet_age_;
  int64_t pet_iid_;
  int32_t birthday_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_5finternal_2eproto;
};
// -------------------------------------------------------------------

class DBUserPets final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.DBUserPets) */ {
 public:
  inline DBUserPets() : DBUserPets(nullptr) {}
  ~DBUserPets() override;
  explicit constexpr DBUserPets(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBUserPets(const DBUserPets& from);
  DBUserPets(DBUserPets&& from) noexcept
    : DBUserPets() {
    *this = ::std::move(from);
  }

  inline DBUserPets& operator=(const DBUserPets& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBUserPets& operator=(DBUserPets&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBUserPets& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBUserPets* internal_default_instance() {
    return reinterpret_cast<const DBUserPets*>(
               &_DBUserPets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DBUserPets& a, DBUserPets& b) {
    a.Swap(&b);
  }
  inline void Swap(DBUserPets* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBUserPets* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBUserPets* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBUserPets>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBUserPets& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBUserPets& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBUserPets* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.DBUserPets";
  }
  protected:
  explicit DBUserPets(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPetsFieldNumber = 1,
  };
  // repeated .PRO.DBUserPetItem pets = 1;
  int pets_size() const;
  private:
  int _internal_pets_size() const;
  public:
  void clear_pets();
  ::PRO::DBUserPetItem* mutable_pets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::DBUserPetItem >*
      mutable_pets();
  private:
  const ::PRO::DBUserPetItem& _internal_pets(int index) const;
  ::PRO::DBUserPetItem* _internal_add_pets();
  public:
  const ::PRO::DBUserPetItem& pets(int index) const;
  ::PRO::DBUserPetItem* add_pets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::DBUserPetItem >&
      pets() const;

  // @@protoc_insertion_point(class_scope:PRO.DBUserPets)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::DBUserPetItem > pets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_5finternal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DBRowDel

// uint32 ver_ = 1;
inline void DBRowDel::clear_ver_() {
  ver__ = 0u;
}
inline uint32_t DBRowDel::_internal_ver_() const {
  return ver__;
}
inline uint32_t DBRowDel::ver_() const {
  // @@protoc_insertion_point(field_get:PRO.DBRowDel.ver_)
  return _internal_ver_();
}
inline void DBRowDel::_internal_set_ver_(uint32_t value) {
  
  ver__ = value;
}
inline void DBRowDel::set_ver_(uint32_t value) {
  _internal_set_ver_(value);
  // @@protoc_insertion_point(field_set:PRO.DBRowDel.ver_)
}

// int64 id = 2;
inline void DBRowDel::clear_id() {
  id_ = int64_t{0};
}
inline int64_t DBRowDel::_internal_id() const {
  return id_;
}
inline int64_t DBRowDel::id() const {
  // @@protoc_insertion_point(field_get:PRO.DBRowDel.id)
  return _internal_id();
}
inline void DBRowDel::_internal_set_id(int64_t value) {
  
  id_ = value;
}
inline void DBRowDel::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PRO.DBRowDel.id)
}

// -------------------------------------------------------------------

// DBRowDeletes

// repeated .PRO.DBRowDel dels = 1;
inline int DBRowDeletes::_internal_dels_size() const {
  return dels_.size();
}
inline int DBRowDeletes::dels_size() const {
  return _internal_dels_size();
}
inline void DBRowDeletes::clear_dels() {
  dels_.Clear();
}
inline ::PRO::DBRowDel* DBRowDeletes::mutable_dels(int index) {
  // @@protoc_insertion_point(field_mutable:PRO.DBRowDeletes.dels)
  return dels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::DBRowDel >*
DBRowDeletes::mutable_dels() {
  // @@protoc_insertion_point(field_mutable_list:PRO.DBRowDeletes.dels)
  return &dels_;
}
inline const ::PRO::DBRowDel& DBRowDeletes::_internal_dels(int index) const {
  return dels_.Get(index);
}
inline const ::PRO::DBRowDel& DBRowDeletes::dels(int index) const {
  // @@protoc_insertion_point(field_get:PRO.DBRowDeletes.dels)
  return _internal_dels(index);
}
inline ::PRO::DBRowDel* DBRowDeletes::_internal_add_dels() {
  return dels_.Add();
}
inline ::PRO::DBRowDel* DBRowDeletes::add_dels() {
  ::PRO::DBRowDel* _add = _internal_add_dels();
  // @@protoc_insertion_point(field_add:PRO.DBRowDeletes.dels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::DBRowDel >&
DBRowDeletes::dels() const {
  // @@protoc_insertion_point(field_list:PRO.DBRowDeletes.dels)
  return dels_;
}

// -------------------------------------------------------------------

// DBRoleBaseInfo

// uint32 ver_ = 1;
inline void DBRoleBaseInfo::clear_ver_() {
  ver__ = 0u;
}
inline uint32_t DBRoleBaseInfo::_internal_ver_() const {
  return ver__;
}
inline uint32_t DBRoleBaseInfo::ver_() const {
  // @@protoc_insertion_point(field_get:PRO.DBRoleBaseInfo.ver_)
  return _internal_ver_();
}
inline void DBRoleBaseInfo::_internal_set_ver_(uint32_t value) {
  
  ver__ = value;
}
inline void DBRoleBaseInfo::set_ver_(uint32_t value) {
  _internal_set_ver_(value);
  // @@protoc_insertion_point(field_set:PRO.DBRoleBaseInfo.ver_)
}

// int64 role_iid = 2;
inline void DBRoleBaseInfo::clear_role_iid() {
  role_iid_ = int64_t{0};
}
inline int64_t DBRoleBaseInfo::_internal_role_iid() const {
  return role_iid_;
}
inline int64_t DBRoleBaseInfo::role_iid() const {
  // @@protoc_insertion_point(field_get:PRO.DBRoleBaseInfo.role_iid)
  return _internal_role_iid();
}
inline void DBRoleBaseInfo::_internal_set_role_iid(int64_t value) {
  
  role_iid_ = value;
}
inline void DBRoleBaseInfo::set_role_iid(int64_t value) {
  _internal_set_role_iid(value);
  // @@protoc_insertion_point(field_set:PRO.DBRoleBaseInfo.role_iid)
}

// int64 user_iid = 3;
inline void DBRoleBaseInfo::clear_user_iid() {
  user_iid_ = int64_t{0};
}
inline int64_t DBRoleBaseInfo::_internal_user_iid() const {
  return user_iid_;
}
inline int64_t DBRoleBaseInfo::user_iid() const {
  // @@protoc_insertion_point(field_get:PRO.DBRoleBaseInfo.user_iid)
  return _internal_user_iid();
}
inline void DBRoleBaseInfo::_internal_set_user_iid(int64_t value) {
  
  user_iid_ = value;
}
inline void DBRoleBaseInfo::set_user_iid(int64_t value) {
  _internal_set_user_iid(value);
  // @@protoc_insertion_point(field_set:PRO.DBRoleBaseInfo.user_iid)
}

// string nickname = 4;
inline void DBRoleBaseInfo::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& DBRoleBaseInfo::nickname() const {
  // @@protoc_insertion_point(field_get:PRO.DBRoleBaseInfo.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBRoleBaseInfo::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.DBRoleBaseInfo.nickname)
}
inline std::string* DBRoleBaseInfo::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:PRO.DBRoleBaseInfo.nickname)
  return _s;
}
inline const std::string& DBRoleBaseInfo::_internal_nickname() const {
  return nickname_.Get();
}
inline void DBRoleBaseInfo::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DBRoleBaseInfo::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DBRoleBaseInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:PRO.DBRoleBaseInfo.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DBRoleBaseInfo::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nickname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.DBRoleBaseInfo.nickname)
}

// int32 registime = 5;
inline void DBRoleBaseInfo::clear_registime() {
  registime_ = 0;
}
inline int32_t DBRoleBaseInfo::_internal_registime() const {
  return registime_;
}
inline int32_t DBRoleBaseInfo::registime() const {
  // @@protoc_insertion_point(field_get:PRO.DBRoleBaseInfo.registime)
  return _internal_registime();
}
inline void DBRoleBaseInfo::_internal_set_registime(int32_t value) {
  
  registime_ = value;
}
inline void DBRoleBaseInfo::set_registime(int32_t value) {
  _internal_set_registime(value);
  // @@protoc_insertion_point(field_set:PRO.DBRoleBaseInfo.registime)
}

// -------------------------------------------------------------------

// DBUserRoles

// repeated .PRO.DBRoleBaseInfo roles = 1;
inline int DBUserRoles::_internal_roles_size() const {
  return roles_.size();
}
inline int DBUserRoles::roles_size() const {
  return _internal_roles_size();
}
inline void DBUserRoles::clear_roles() {
  roles_.Clear();
}
inline ::PRO::DBRoleBaseInfo* DBUserRoles::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:PRO.DBUserRoles.roles)
  return roles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::DBRoleBaseInfo >*
DBUserRoles::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:PRO.DBUserRoles.roles)
  return &roles_;
}
inline const ::PRO::DBRoleBaseInfo& DBUserRoles::_internal_roles(int index) const {
  return roles_.Get(index);
}
inline const ::PRO::DBRoleBaseInfo& DBUserRoles::roles(int index) const {
  // @@protoc_insertion_point(field_get:PRO.DBUserRoles.roles)
  return _internal_roles(index);
}
inline ::PRO::DBRoleBaseInfo* DBUserRoles::_internal_add_roles() {
  return roles_.Add();
}
inline ::PRO::DBRoleBaseInfo* DBUserRoles::add_roles() {
  ::PRO::DBRoleBaseInfo* _add = _internal_add_roles();
  // @@protoc_insertion_point(field_add:PRO.DBUserRoles.roles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::DBRoleBaseInfo >&
DBUserRoles::roles() const {
  // @@protoc_insertion_point(field_list:PRO.DBUserRoles.roles)
  return roles_;
}

// -------------------------------------------------------------------

// DBUserHome

// uint32 ver_ = 1;
inline void DBUserHome::clear_ver_() {
  ver__ = 0u;
}
inline uint32_t DBUserHome::_internal_ver_() const {
  return ver__;
}
inline uint32_t DBUserHome::ver_() const {
  // @@protoc_insertion_point(field_get:PRO.DBUserHome.ver_)
  return _internal_ver_();
}
inline void DBUserHome::_internal_set_ver_(uint32_t value) {
  
  ver__ = value;
}
inline void DBUserHome::set_ver_(uint32_t value) {
  _internal_set_ver_(value);
  // @@protoc_insertion_point(field_set:PRO.DBUserHome.ver_)
}

// int64 role_iid = 2;
inline void DBUserHome::clear_role_iid() {
  role_iid_ = int64_t{0};
}
inline int64_t DBUserHome::_internal_role_iid() const {
  return role_iid_;
}
inline int64_t DBUserHome::role_iid() const {
  // @@protoc_insertion_point(field_get:PRO.DBUserHome.role_iid)
  return _internal_role_iid();
}
inline void DBUserHome::_internal_set_role_iid(int64_t value) {
  
  role_iid_ = value;
}
inline void DBUserHome::set_role_iid(int64_t value) {
  _internal_set_role_iid(value);
  // @@protoc_insertion_point(field_set:PRO.DBUserHome.role_iid)
}

// string home_name = 3;
inline void DBUserHome::clear_home_name() {
  home_name_.ClearToEmpty();
}
inline const std::string& DBUserHome::home_name() const {
  // @@protoc_insertion_point(field_get:PRO.DBUserHome.home_name)
  return _internal_home_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBUserHome::set_home_name(ArgT0&& arg0, ArgT... args) {
 
 home_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.DBUserHome.home_name)
}
inline std::string* DBUserHome::mutable_home_name() {
  std::string* _s = _internal_mutable_home_name();
  // @@protoc_insertion_point(field_mutable:PRO.DBUserHome.home_name)
  return _s;
}
inline const std::string& DBUserHome::_internal_home_name() const {
  return home_name_.Get();
}
inline void DBUserHome::_internal_set_home_name(const std::string& value) {
  
  home_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DBUserHome::_internal_mutable_home_name() {
  
  return home_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DBUserHome::release_home_name() {
  // @@protoc_insertion_point(field_release:PRO.DBUserHome.home_name)
  return home_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DBUserHome::set_allocated_home_name(std::string* home_name) {
  if (home_name != nullptr) {
    
  } else {
    
  }
  home_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), home_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (home_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    home_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.DBUserHome.home_name)
}

// int64 ground_resid = 4;
inline void DBUserHome::clear_ground_resid() {
  ground_resid_ = int64_t{0};
}
inline int64_t DBUserHome::_internal_ground_resid() const {
  return ground_resid_;
}
inline int64_t DBUserHome::ground_resid() const {
  // @@protoc_insertion_point(field_get:PRO.DBUserHome.ground_resid)
  return _internal_ground_resid();
}
inline void DBUserHome::_internal_set_ground_resid(int64_t value) {
  
  ground_resid_ = value;
}
inline void DBUserHome::set_ground_resid(int64_t value) {
  _internal_set_ground_resid(value);
  // @@protoc_insertion_point(field_set:PRO.DBUserHome.ground_resid)
}

// string look_at = 5;
inline void DBUserHome::clear_look_at() {
  look_at_.ClearToEmpty();
}
inline const std::string& DBUserHome::look_at() const {
  // @@protoc_insertion_point(field_get:PRO.DBUserHome.look_at)
  return _internal_look_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBUserHome::set_look_at(ArgT0&& arg0, ArgT... args) {
 
 look_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.DBUserHome.look_at)
}
inline std::string* DBUserHome::mutable_look_at() {
  std::string* _s = _internal_mutable_look_at();
  // @@protoc_insertion_point(field_mutable:PRO.DBUserHome.look_at)
  return _s;
}
inline const std::string& DBUserHome::_internal_look_at() const {
  return look_at_.Get();
}
inline void DBUserHome::_internal_set_look_at(const std::string& value) {
  
  look_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DBUserHome::_internal_mutable_look_at() {
  
  return look_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DBUserHome::release_look_at() {
  // @@protoc_insertion_point(field_release:PRO.DBUserHome.look_at)
  return look_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DBUserHome::set_allocated_look_at(std::string* look_at) {
  if (look_at != nullptr) {
    
  } else {
    
  }
  look_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), look_at,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (look_at_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    look_at_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.DBUserHome.look_at)
}

// string geo_pos = 6;
inline void DBUserHome::clear_geo_pos() {
  geo_pos_.ClearToEmpty();
}
inline const std::string& DBUserHome::geo_pos() const {
  // @@protoc_insertion_point(field_get:PRO.DBUserHome.geo_pos)
  return _internal_geo_pos();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBUserHome::set_geo_pos(ArgT0&& arg0, ArgT... args) {
 
 geo_pos_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.DBUserHome.geo_pos)
}
inline std::string* DBUserHome::mutable_geo_pos() {
  std::string* _s = _internal_mutable_geo_pos();
  // @@protoc_insertion_point(field_mutable:PRO.DBUserHome.geo_pos)
  return _s;
}
inline const std::string& DBUserHome::_internal_geo_pos() const {
  return geo_pos_.Get();
}
inline void DBUserHome::_internal_set_geo_pos(const std::string& value) {
  
  geo_pos_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DBUserHome::_internal_mutable_geo_pos() {
  
  return geo_pos_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DBUserHome::release_geo_pos() {
  // @@protoc_insertion_point(field_release:PRO.DBUserHome.geo_pos)
  return geo_pos_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DBUserHome::set_allocated_geo_pos(std::string* geo_pos) {
  if (geo_pos != nullptr) {
    
  } else {
    
  }
  geo_pos_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geo_pos,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (geo_pos_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    geo_pos_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.DBUserHome.geo_pos)
}

// int32 reside_time = 7;
inline void DBUserHome::clear_reside_time() {
  reside_time_ = 0;
}
inline int32_t DBUserHome::_internal_reside_time() const {
  return reside_time_;
}
inline int32_t DBUserHome::reside_time() const {
  // @@protoc_insertion_point(field_get:PRO.DBUserHome.reside_time)
  return _internal_reside_time();
}
inline void DBUserHome::_internal_set_reside_time(int32_t value) {
  
  reside_time_ = value;
}
inline void DBUserHome::set_reside_time(int32_t value) {
  _internal_set_reside_time(value);
  // @@protoc_insertion_point(field_set:PRO.DBUserHome.reside_time)
}

// int32 last_residedate = 8;
inline void DBUserHome::clear_last_residedate() {
  last_residedate_ = 0;
}
inline int32_t DBUserHome::_internal_last_residedate() const {
  return last_residedate_;
}
inline int32_t DBUserHome::last_residedate() const {
  // @@protoc_insertion_point(field_get:PRO.DBUserHome.last_residedate)
  return _internal_last_residedate();
}
inline void DBUserHome::_internal_set_last_residedate(int32_t value) {
  
  last_residedate_ = value;
}
inline void DBUserHome::set_last_residedate(int32_t value) {
  _internal_set_last_residedate(value);
  // @@protoc_insertion_point(field_set:PRO.DBUserHome.last_residedate)
}

// -------------------------------------------------------------------

// DBUserHomeStructureItem

// uint32 ver_ = 1;
inline void DBUserHomeStructureItem::clear_ver_() {
  ver__ = 0u;
}
inline uint32_t DBUserHomeStructureItem::_internal_ver_() const {
  return ver__;
}
inline uint32_t DBUserHomeStructureItem::ver_() const {
  // @@protoc_insertion_point(field_get:PRO.DBUserHomeStructureItem.ver_)
  return _internal_ver_();
}
inline void DBUserHomeStructureItem::_internal_set_ver_(uint32_t value) {
  
  ver__ = value;
}
inline void DBUserHomeStructureItem::set_ver_(uint32_t value) {
  _internal_set_ver_(value);
  // @@protoc_insertion_point(field_set:PRO.DBUserHomeStructureItem.ver_)
}

// int64 building_iid = 2;
inline void DBUserHomeStructureItem::clear_building_iid() {
  building_iid_ = int64_t{0};
}
inline int64_t DBUserHomeStructureItem::_internal_building_iid() const {
  return building_iid_;
}
inline int64_t DBUserHomeStructureItem::building_iid() const {
  // @@protoc_insertion_point(field_get:PRO.DBUserHomeStructureItem.building_iid)
  return _internal_building_iid();
}
inline void DBUserHomeStructureItem::_internal_set_building_iid(int64_t value) {
  
  building_iid_ = value;
}
inline void DBUserHomeStructureItem::set_building_iid(int64_t value) {
  _internal_set_building_iid(value);
  // @@protoc_insertion_point(field_set:PRO.DBUserHomeStructureItem.building_iid)
}

// int64 home_iid = 3;
inline void DBUserHomeStructureItem::clear_home_iid() {
  home_iid_ = int64_t{0};
}
inline int64_t DBUserHomeStructureItem::_internal_home_iid() const {
  return home_iid_;
}
inline int64_t DBUserHomeStructureItem::home_iid() const {
  // @@protoc_insertion_point(field_get:PRO.DBUserHomeStructureItem.home_iid)
  return _internal_home_iid();
}
inline void DBUserHomeStructureItem::_internal_set_home_iid(int64_t value) {
  
  home_iid_ = value;
}
inline void DBUserHomeStructureItem::set_home_iid(int64_t value) {
  _internal_set_home_iid(value);
  // @@protoc_insertion_point(field_set:PRO.DBUserHomeStructureItem.home_iid)
}

// int64 parent_building = 4;
inline void DBUserHomeStructureItem::clear_parent_building() {
  parent_building_ = int64_t{0};
}
inline int64_t DBUserHomeStructureItem::_internal_parent_building() const {
  return parent_building_;
}
inline int64_t DBUserHomeStructureItem::parent_building() const {
  // @@protoc_insertion_point(field_get:PRO.DBUserHomeStructureItem.parent_building)
  return _internal_parent_building();
}
inline void DBUserHomeStructureItem::_internal_set_parent_building(int64_t value) {
  
  parent_building_ = value;
}
inline void DBUserHomeStructureItem::set_parent_building(int64_t value) {
  _internal_set_parent_building(value);
  // @@protoc_insertion_point(field_set:PRO.DBUserHomeStructureItem.parent_building)
}

// int64 building_resid = 5;
inline void DBUserHomeStructureItem::clear_building_resid() {
  building_resid_ = int64_t{0};
}
inline int64_t DBUserHomeStructureItem::_internal_building_resid() const {
  return building_resid_;
}
inline int64_t DBUserHomeStructureItem::building_resid() const {
  // @@protoc_insertion_point(field_get:PRO.DBUserHomeStructureItem.building_resid)
  return _internal_building_resid();
}
inline void DBUserHomeStructureItem::_internal_set_building_resid(int64_t value) {
  
  building_resid_ = value;
}
inline void DBUserHomeStructureItem::set_building_resid(int64_t value) {
  _internal_set_building_resid(value);
  // @@protoc_insertion_point(field_set:PRO.DBUserHomeStructureItem.building_resid)
}

// string look_at = 6;
inline void DBUserHomeStructureItem::clear_look_at() {
  look_at_.ClearToEmpty();
}
inline const std::string& DBUserHomeStructureItem::look_at() const {
  // @@protoc_insertion_point(field_get:PRO.DBUserHomeStructureItem.look_at)
  return _internal_look_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBUserHomeStructureItem::set_look_at(ArgT0&& arg0, ArgT... args) {
 
 look_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.DBUserHomeStructureItem.look_at)
}
inline std::string* DBUserHomeStructureItem::mutable_look_at() {
  std::string* _s = _internal_mutable_look_at();
  // @@protoc_insertion_point(field_mutable:PRO.DBUserHomeStructureItem.look_at)
  return _s;
}
inline const std::string& DBUserHomeStructureItem::_internal_look_at() const {
  return look_at_.Get();
}
inline void DBUserHomeStructureItem::_internal_set_look_at(const std::string& value) {
  
  look_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DBUserHomeStructureItem::_internal_mutable_look_at() {
  
  return look_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DBUserHomeStructureItem::release_look_at() {
  // @@protoc_insertion_point(field_release:PRO.DBUserHomeStructureItem.look_at)
  return look_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DBUserHomeStructureItem::set_allocated_look_at(std::string* look_at) {
  if (look_at != nullptr) {
    
  } else {
    
  }
  look_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), look_at,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (look_at_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    look_at_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.DBUserHomeStructureItem.look_at)
}

// string building_pos = 7;
inline void DBUserHomeStructureItem::clear_building_pos() {
  building_pos_.ClearToEmpty();
}
inline const std::string& DBUserHomeStructureItem::building_pos() const {
  // @@protoc_insertion_point(field_get:PRO.DBUserHomeStructureItem.building_pos)
  return _internal_building_pos();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBUserHomeStructureItem::set_building_pos(ArgT0&& arg0, ArgT... args) {
 
 building_pos_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.DBUserHomeStructureItem.building_pos)
}
inline std::string* DBUserHomeStructureItem::mutable_building_pos() {
  std::string* _s = _internal_mutable_building_pos();
  // @@protoc_insertion_point(field_mutable:PRO.DBUserHomeStructureItem.building_pos)
  return _s;
}
inline const std::string& DBUserHomeStructureItem::_internal_building_pos() const {
  return building_pos_.Get();
}
inline void DBUserHomeStructureItem::_internal_set_building_pos(const std::string& value) {
  
  building_pos_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DBUserHomeStructureItem::_internal_mutable_building_pos() {
  
  return building_pos_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DBUserHomeStructureItem::release_building_pos() {
  // @@protoc_insertion_point(field_release:PRO.DBUserHomeStructureItem.building_pos)
  return building_pos_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DBUserHomeStructureItem::set_allocated_building_pos(std::string* building_pos) {
  if (building_pos != nullptr) {
    
  } else {
    
  }
  building_pos_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), building_pos,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (building_pos_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    building_pos_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.DBUserHomeStructureItem.building_pos)
}

// -------------------------------------------------------------------

// DBUserHomeStructure

// repeated .PRO.DBUserHomeStructureItem items = 1;
inline int DBUserHomeStructure::_internal_items_size() const {
  return items_.size();
}
inline int DBUserHomeStructure::items_size() const {
  return _internal_items_size();
}
inline void DBUserHomeStructure::clear_items() {
  items_.Clear();
}
inline ::PRO::DBUserHomeStructureItem* DBUserHomeStructure::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:PRO.DBUserHomeStructure.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::DBUserHomeStructureItem >*
DBUserHomeStructure::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:PRO.DBUserHomeStructure.items)
  return &items_;
}
inline const ::PRO::DBUserHomeStructureItem& DBUserHomeStructure::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::PRO::DBUserHomeStructureItem& DBUserHomeStructure::items(int index) const {
  // @@protoc_insertion_point(field_get:PRO.DBUserHomeStructure.items)
  return _internal_items(index);
}
inline ::PRO::DBUserHomeStructureItem* DBUserHomeStructure::_internal_add_items() {
  return items_.Add();
}
inline ::PRO::DBUserHomeStructureItem* DBUserHomeStructure::add_items() {
  ::PRO::DBUserHomeStructureItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:PRO.DBUserHomeStructure.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::DBUserHomeStructureItem >&
DBUserHomeStructure::items() const {
  // @@protoc_insertion_point(field_list:PRO.DBUserHomeStructure.items)
  return items_;
}

// -------------------------------------------------------------------

// DBPetCategory

// int64 pet_iid = 2;
inline void DBPetCategory::clear_pet_iid() {
  pet_iid_ = int64_t{0};
}
inline int64_t DBPetCategory::_internal_pet_iid() const {
  return pet_iid_;
}
inline int64_t DBPetCategory::pet_iid() const {
  // @@protoc_insertion_point(field_get:PRO.DBPetCategory.pet_iid)
  return _internal_pet_iid();
}
inline void DBPetCategory::_internal_set_pet_iid(int64_t value) {
  
  pet_iid_ = value;
}
inline void DBPetCategory::set_pet_iid(int64_t value) {
  _internal_set_pet_iid(value);
  // @@protoc_insertion_point(field_set:PRO.DBPetCategory.pet_iid)
}

// int32 pet_type = 3;
inline void DBPetCategory::clear_pet_type() {
  pet_type_ = 0;
}
inline int32_t DBPetCategory::_internal_pet_type() const {
  return pet_type_;
}
inline int32_t DBPetCategory::pet_type() const {
  // @@protoc_insertion_point(field_get:PRO.DBPetCategory.pet_type)
  return _internal_pet_type();
}
inline void DBPetCategory::_internal_set_pet_type(int32_t value) {
  
  pet_type_ = value;
}
inline void DBPetCategory::set_pet_type(int32_t value) {
  _internal_set_pet_type(value);
  // @@protoc_insertion_point(field_set:PRO.DBPetCategory.pet_type)
}

// int64 pet_resid = 4;
inline void DBPetCategory::clear_pet_resid() {
  pet_resid_ = int64_t{0};
}
inline int64_t DBPetCategory::_internal_pet_resid() const {
  return pet_resid_;
}
inline int64_t DBPetCategory::pet_resid() const {
  // @@protoc_insertion_point(field_get:PRO.DBPetCategory.pet_resid)
  return _internal_pet_resid();
}
inline void DBPetCategory::_internal_set_pet_resid(int64_t value) {
  
  pet_resid_ = value;
}
inline void DBPetCategory::set_pet_resid(int64_t value) {
  _internal_set_pet_resid(value);
  // @@protoc_insertion_point(field_set:PRO.DBPetCategory.pet_resid)
}

// int32 pet_sex = 5;
inline void DBPetCategory::clear_pet_sex() {
  pet_sex_ = 0;
}
inline int32_t DBPetCategory::_internal_pet_sex() const {
  return pet_sex_;
}
inline int32_t DBPetCategory::pet_sex() const {
  // @@protoc_insertion_point(field_get:PRO.DBPetCategory.pet_sex)
  return _internal_pet_sex();
}
inline void DBPetCategory::_internal_set_pet_sex(int32_t value) {
  
  pet_sex_ = value;
}
inline void DBPetCategory::set_pet_sex(int32_t value) {
  _internal_set_pet_sex(value);
  // @@protoc_insertion_point(field_set:PRO.DBPetCategory.pet_sex)
}

// string pet_name = 6;
inline void DBPetCategory::clear_pet_name() {
  pet_name_.ClearToEmpty();
}
inline const std::string& DBPetCategory::pet_name() const {
  // @@protoc_insertion_point(field_get:PRO.DBPetCategory.pet_name)
  return _internal_pet_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBPetCategory::set_pet_name(ArgT0&& arg0, ArgT... args) {
 
 pet_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.DBPetCategory.pet_name)
}
inline std::string* DBPetCategory::mutable_pet_name() {
  std::string* _s = _internal_mutable_pet_name();
  // @@protoc_insertion_point(field_mutable:PRO.DBPetCategory.pet_name)
  return _s;
}
inline const std::string& DBPetCategory::_internal_pet_name() const {
  return pet_name_.Get();
}
inline void DBPetCategory::_internal_set_pet_name(const std::string& value) {
  
  pet_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DBPetCategory::_internal_mutable_pet_name() {
  
  return pet_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DBPetCategory::release_pet_name() {
  // @@protoc_insertion_point(field_release:PRO.DBPetCategory.pet_name)
  return pet_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DBPetCategory::set_allocated_pet_name(std::string* pet_name) {
  if (pet_name != nullptr) {
    
  } else {
    
  }
  pet_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pet_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pet_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    pet_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.DBPetCategory.pet_name)
}

// -------------------------------------------------------------------

// DBUserPetItem

// uint32 ver_ = 1;
inline void DBUserPetItem::clear_ver_() {
  ver__ = 0u;
}
inline uint32_t DBUserPetItem::_internal_ver_() const {
  return ver__;
}
inline uint32_t DBUserPetItem::ver_() const {
  // @@protoc_insertion_point(field_get:PRO.DBUserPetItem.ver_)
  return _internal_ver_();
}
inline void DBUserPetItem::_internal_set_ver_(uint32_t value) {
  
  ver__ = value;
}
inline void DBUserPetItem::set_ver_(uint32_t value) {
  _internal_set_ver_(value);
  // @@protoc_insertion_point(field_set:PRO.DBUserPetItem.ver_)
}

// int64 mypet_iid = 2;
inline void DBUserPetItem::clear_mypet_iid() {
  mypet_iid_ = int64_t{0};
}
inline int64_t DBUserPetItem::_internal_mypet_iid() const {
  return mypet_iid_;
}
inline int64_t DBUserPetItem::mypet_iid() const {
  // @@protoc_insertion_point(field_get:PRO.DBUserPetItem.mypet_iid)
  return _internal_mypet_iid();
}
inline void DBUserPetItem::_internal_set_mypet_iid(int64_t value) {
  
  mypet_iid_ = value;
}
inline void DBUserPetItem::set_mypet_iid(int64_t value) {
  _internal_set_mypet_iid(value);
  // @@protoc_insertion_point(field_set:PRO.DBUserPetItem.mypet_iid)
}

// int64 role_iid = 3;
inline void DBUserPetItem::clear_role_iid() {
  role_iid_ = int64_t{0};
}
inline int64_t DBUserPetItem::_internal_role_iid() const {
  return role_iid_;
}
inline int64_t DBUserPetItem::role_iid() const {
  // @@protoc_insertion_point(field_get:PRO.DBUserPetItem.role_iid)
  return _internal_role_iid();
}
inline void DBUserPetItem::_internal_set_role_iid(int64_t value) {
  
  role_iid_ = value;
}
inline void DBUserPetItem::set_role_iid(int64_t value) {
  _internal_set_role_iid(value);
  // @@protoc_insertion_point(field_set:PRO.DBUserPetItem.role_iid)
}

// int64 pet_iid = 4;
inline void DBUserPetItem::clear_pet_iid() {
  pet_iid_ = int64_t{0};
}
inline int64_t DBUserPetItem::_internal_pet_iid() const {
  return pet_iid_;
}
inline int64_t DBUserPetItem::pet_iid() const {
  // @@protoc_insertion_point(field_get:PRO.DBUserPetItem.pet_iid)
  return _internal_pet_iid();
}
inline void DBUserPetItem::_internal_set_pet_iid(int64_t value) {
  
  pet_iid_ = value;
}
inline void DBUserPetItem::set_pet_iid(int64_t value) {
  _internal_set_pet_iid(value);
  // @@protoc_insertion_point(field_set:PRO.DBUserPetItem.pet_iid)
}

// int32 pet_age = 5;
inline void DBUserPetItem::clear_pet_age() {
  pet_age_ = 0;
}
inline int32_t DBUserPetItem::_internal_pet_age() const {
  return pet_age_;
}
inline int32_t DBUserPetItem::pet_age() const {
  // @@protoc_insertion_point(field_get:PRO.DBUserPetItem.pet_age)
  return _internal_pet_age();
}
inline void DBUserPetItem::_internal_set_pet_age(int32_t value) {
  
  pet_age_ = value;
}
inline void DBUserPetItem::set_pet_age(int32_t value) {
  _internal_set_pet_age(value);
  // @@protoc_insertion_point(field_set:PRO.DBUserPetItem.pet_age)
}

// int32 birthday = 6;
inline void DBUserPetItem::clear_birthday() {
  birthday_ = 0;
}
inline int32_t DBUserPetItem::_internal_birthday() const {
  return birthday_;
}
inline int32_t DBUserPetItem::birthday() const {
  // @@protoc_insertion_point(field_get:PRO.DBUserPetItem.birthday)
  return _internal_birthday();
}
inline void DBUserPetItem::_internal_set_birthday(int32_t value) {
  
  birthday_ = value;
}
inline void DBUserPetItem::set_birthday(int32_t value) {
  _internal_set_birthday(value);
  // @@protoc_insertion_point(field_set:PRO.DBUserPetItem.birthday)
}

// -------------------------------------------------------------------

// DBUserPets

// repeated .PRO.DBUserPetItem pets = 1;
inline int DBUserPets::_internal_pets_size() const {
  return pets_.size();
}
inline int DBUserPets::pets_size() const {
  return _internal_pets_size();
}
inline void DBUserPets::clear_pets() {
  pets_.Clear();
}
inline ::PRO::DBUserPetItem* DBUserPets::mutable_pets(int index) {
  // @@protoc_insertion_point(field_mutable:PRO.DBUserPets.pets)
  return pets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::DBUserPetItem >*
DBUserPets::mutable_pets() {
  // @@protoc_insertion_point(field_mutable_list:PRO.DBUserPets.pets)
  return &pets_;
}
inline const ::PRO::DBUserPetItem& DBUserPets::_internal_pets(int index) const {
  return pets_.Get(index);
}
inline const ::PRO::DBUserPetItem& DBUserPets::pets(int index) const {
  // @@protoc_insertion_point(field_get:PRO.DBUserPets.pets)
  return _internal_pets(index);
}
inline ::PRO::DBUserPetItem* DBUserPets::_internal_add_pets() {
  return pets_.Add();
}
inline ::PRO::DBUserPetItem* DBUserPets::add_pets() {
  ::PRO::DBUserPetItem* _add = _internal_add_pets();
  // @@protoc_insertion_point(field_add:PRO.DBUserPets.pets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::DBUserPetItem >&
DBUserPets::pets() const {
  // @@protoc_insertion_point(field_list:PRO.DBUserPets.pets)
  return pets_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PRO

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_db_5finternal_2eproto

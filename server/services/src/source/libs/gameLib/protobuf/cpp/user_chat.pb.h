// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_chat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_user_5fchat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_user_5fchat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_user_5fchat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_user_5fchat_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_user_5fchat_2eproto;
namespace PRO {
class ChatChannelInfo;
struct ChatChannelInfoDefaultTypeInternal;
extern ChatChannelInfoDefaultTypeInternal _ChatChannelInfo_default_instance_;
class ChatMessageItem;
struct ChatMessageItemDefaultTypeInternal;
extern ChatMessageItemDefaultTypeInternal _ChatMessageItem_default_instance_;
class ChatMessageItems;
struct ChatMessageItemsDefaultTypeInternal;
extern ChatMessageItemsDefaultTypeInternal _ChatMessageItems_default_instance_;
class Chat_ChatMsg_ntf;
struct Chat_ChatMsg_ntfDefaultTypeInternal;
extern Chat_ChatMsg_ntfDefaultTypeInternal _Chat_ChatMsg_ntf_default_instance_;
class Chat_CustomChannelId_ack;
struct Chat_CustomChannelId_ackDefaultTypeInternal;
extern Chat_CustomChannelId_ackDefaultTypeInternal _Chat_CustomChannelId_ack_default_instance_;
class Chat_CustomChannelId_req;
struct Chat_CustomChannelId_reqDefaultTypeInternal;
extern Chat_CustomChannelId_reqDefaultTypeInternal _Chat_CustomChannelId_req_default_instance_;
class Chat_GlobalMsg_ntf;
struct Chat_GlobalMsg_ntfDefaultTypeInternal;
extern Chat_GlobalMsg_ntfDefaultTypeInternal _Chat_GlobalMsg_ntf_default_instance_;
class Chat_UserChannels_active;
struct Chat_UserChannels_activeDefaultTypeInternal;
extern Chat_UserChannels_activeDefaultTypeInternal _Chat_UserChannels_active_default_instance_;
class Chat_UserMsg_say;
struct Chat_UserMsg_sayDefaultTypeInternal;
extern Chat_UserMsg_sayDefaultTypeInternal _Chat_UserMsg_say_default_instance_;
}  // namespace PRO
PROTOBUF_NAMESPACE_OPEN
template<> ::PRO::ChatChannelInfo* Arena::CreateMaybeMessage<::PRO::ChatChannelInfo>(Arena*);
template<> ::PRO::ChatMessageItem* Arena::CreateMaybeMessage<::PRO::ChatMessageItem>(Arena*);
template<> ::PRO::ChatMessageItems* Arena::CreateMaybeMessage<::PRO::ChatMessageItems>(Arena*);
template<> ::PRO::Chat_ChatMsg_ntf* Arena::CreateMaybeMessage<::PRO::Chat_ChatMsg_ntf>(Arena*);
template<> ::PRO::Chat_CustomChannelId_ack* Arena::CreateMaybeMessage<::PRO::Chat_CustomChannelId_ack>(Arena*);
template<> ::PRO::Chat_CustomChannelId_req* Arena::CreateMaybeMessage<::PRO::Chat_CustomChannelId_req>(Arena*);
template<> ::PRO::Chat_GlobalMsg_ntf* Arena::CreateMaybeMessage<::PRO::Chat_GlobalMsg_ntf>(Arena*);
template<> ::PRO::Chat_UserChannels_active* Arena::CreateMaybeMessage<::PRO::Chat_UserChannels_active>(Arena*);
template<> ::PRO::Chat_UserMsg_say* Arena::CreateMaybeMessage<::PRO::Chat_UserMsg_say>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PRO {

enum ChatChannelType : int {
  ChatChannelT_Init = 0,
  ChatChannelT_Global = 1,
  ChatChannelT_Channel = 2,
  ChatChannelT_Union = 3,
  ChatChannelT_Single = 4,
  ChatChannelT_Custom = 5,
  ChatChannelT_Max = 6,
  ChatChannelType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ChatChannelType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ChatChannelType_IsValid(int value);
constexpr ChatChannelType ChatChannelType_MIN = ChatChannelT_Init;
constexpr ChatChannelType ChatChannelType_MAX = ChatChannelT_Max;
constexpr int ChatChannelType_ARRAYSIZE = ChatChannelType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChatChannelType_descriptor();
template<typename T>
inline const std::string& ChatChannelType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChatChannelType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChatChannelType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChatChannelType_descriptor(), enum_t_value);
}
inline bool ChatChannelType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChatChannelType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChatChannelType>(
    ChatChannelType_descriptor(), name, value);
}
// ===================================================================

class ChatMessageItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.ChatMessageItem) */ {
 public:
  inline ChatMessageItem() : ChatMessageItem(nullptr) {}
  ~ChatMessageItem() override;
  explicit constexpr ChatMessageItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatMessageItem(const ChatMessageItem& from);
  ChatMessageItem(ChatMessageItem&& from) noexcept
    : ChatMessageItem() {
    *this = ::std::move(from);
  }

  inline ChatMessageItem& operator=(const ChatMessageItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMessageItem& operator=(ChatMessageItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatMessageItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatMessageItem* internal_default_instance() {
    return reinterpret_cast<const ChatMessageItem*>(
               &_ChatMessageItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChatMessageItem& a, ChatMessageItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMessageItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMessageItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatMessageItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatMessageItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatMessageItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatMessageItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMessageItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.ChatMessageItem";
  }
  protected:
  explicit ChatMessageItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSendNicknameFieldNumber = 2,
    kMsgContentFieldNumber = 5,
    kSendUserIidFieldNumber = 1,
    kSendTimeFieldNumber = 3,
  };
  // string send_nickname = 2;
  void clear_send_nickname();
  const std::string& send_nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_send_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_send_nickname();
  PROTOBUF_NODISCARD std::string* release_send_nickname();
  void set_allocated_send_nickname(std::string* send_nickname);
  private:
  const std::string& _internal_send_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_send_nickname(const std::string& value);
  std::string* _internal_mutable_send_nickname();
  public:

  // string msg_content = 5;
  void clear_msg_content();
  const std::string& msg_content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_content();
  PROTOBUF_NODISCARD std::string* release_msg_content();
  void set_allocated_msg_content(std::string* msg_content);
  private:
  const std::string& _internal_msg_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_content(const std::string& value);
  std::string* _internal_mutable_msg_content();
  public:

  // int64 send_user_iid = 1;
  void clear_send_user_iid();
  int64_t send_user_iid() const;
  void set_send_user_iid(int64_t value);
  private:
  int64_t _internal_send_user_iid() const;
  void _internal_set_send_user_iid(int64_t value);
  public:

  // int32 send_time = 3;
  void clear_send_time();
  int32_t send_time() const;
  void set_send_time(int32_t value);
  private:
  int32_t _internal_send_time() const;
  void _internal_set_send_time(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.ChatMessageItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr send_nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_content_;
  int64_t send_user_iid_;
  int32_t send_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fchat_2eproto;
};
// -------------------------------------------------------------------

class ChatMessageItems final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.ChatMessageItems) */ {
 public:
  inline ChatMessageItems() : ChatMessageItems(nullptr) {}
  ~ChatMessageItems() override;
  explicit constexpr ChatMessageItems(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatMessageItems(const ChatMessageItems& from);
  ChatMessageItems(ChatMessageItems&& from) noexcept
    : ChatMessageItems() {
    *this = ::std::move(from);
  }

  inline ChatMessageItems& operator=(const ChatMessageItems& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMessageItems& operator=(ChatMessageItems&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatMessageItems& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatMessageItems* internal_default_instance() {
    return reinterpret_cast<const ChatMessageItems*>(
               &_ChatMessageItems_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChatMessageItems& a, ChatMessageItems& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMessageItems* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMessageItems* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatMessageItems* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatMessageItems>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatMessageItems& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatMessageItems& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMessageItems* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.ChatMessageItems";
  }
  protected:
  explicit ChatMessageItems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgsFieldNumber = 1,
  };
  // repeated .PRO.ChatMessageItem msgs = 1;
  int msgs_size() const;
  private:
  int _internal_msgs_size() const;
  public:
  void clear_msgs();
  ::PRO::ChatMessageItem* mutable_msgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::ChatMessageItem >*
      mutable_msgs();
  private:
  const ::PRO::ChatMessageItem& _internal_msgs(int index) const;
  ::PRO::ChatMessageItem* _internal_add_msgs();
  public:
  const ::PRO::ChatMessageItem& msgs(int index) const;
  ::PRO::ChatMessageItem* add_msgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::ChatMessageItem >&
      msgs() const;

  // @@protoc_insertion_point(class_scope:PRO.ChatMessageItems)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::ChatMessageItem > msgs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fchat_2eproto;
};
// -------------------------------------------------------------------

class ChatChannelInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.ChatChannelInfo) */ {
 public:
  inline ChatChannelInfo() : ChatChannelInfo(nullptr) {}
  ~ChatChannelInfo() override;
  explicit constexpr ChatChannelInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatChannelInfo(const ChatChannelInfo& from);
  ChatChannelInfo(ChatChannelInfo&& from) noexcept
    : ChatChannelInfo() {
    *this = ::std::move(from);
  }

  inline ChatChannelInfo& operator=(const ChatChannelInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatChannelInfo& operator=(ChatChannelInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatChannelInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatChannelInfo* internal_default_instance() {
    return reinterpret_cast<const ChatChannelInfo*>(
               &_ChatChannelInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChatChannelInfo& a, ChatChannelInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatChannelInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatChannelInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatChannelInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatChannelInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatChannelInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatChannelInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatChannelInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.ChatChannelInfo";
  }
  protected:
  explicit ChatChannelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChanneldidFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // int64 channeldid = 2;
  void clear_channeldid();
  int64_t channeldid() const;
  void set_channeldid(int64_t value);
  private:
  int64_t _internal_channeldid() const;
  void _internal_set_channeldid(int64_t value);
  public:

  // .PRO.ChatChannelType type = 1;
  void clear_type();
  ::PRO::ChatChannelType type() const;
  void set_type(::PRO::ChatChannelType value);
  private:
  ::PRO::ChatChannelType _internal_type() const;
  void _internal_set_type(::PRO::ChatChannelType value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.ChatChannelInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t channeldid_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fchat_2eproto;
};
// -------------------------------------------------------------------

class Chat_GlobalMsg_ntf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Chat_GlobalMsg_ntf) */ {
 public:
  inline Chat_GlobalMsg_ntf() : Chat_GlobalMsg_ntf(nullptr) {}
  ~Chat_GlobalMsg_ntf() override;
  explicit constexpr Chat_GlobalMsg_ntf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chat_GlobalMsg_ntf(const Chat_GlobalMsg_ntf& from);
  Chat_GlobalMsg_ntf(Chat_GlobalMsg_ntf&& from) noexcept
    : Chat_GlobalMsg_ntf() {
    *this = ::std::move(from);
  }

  inline Chat_GlobalMsg_ntf& operator=(const Chat_GlobalMsg_ntf& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chat_GlobalMsg_ntf& operator=(Chat_GlobalMsg_ntf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chat_GlobalMsg_ntf& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chat_GlobalMsg_ntf* internal_default_instance() {
    return reinterpret_cast<const Chat_GlobalMsg_ntf*>(
               &_Chat_GlobalMsg_ntf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Chat_GlobalMsg_ntf& a, Chat_GlobalMsg_ntf& b) {
    a.Swap(&b);
  }
  inline void Swap(Chat_GlobalMsg_ntf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chat_GlobalMsg_ntf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Chat_GlobalMsg_ntf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Chat_GlobalMsg_ntf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Chat_GlobalMsg_ntf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Chat_GlobalMsg_ntf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chat_GlobalMsg_ntf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Chat_GlobalMsg_ntf";
  }
  protected:
  explicit Chat_GlobalMsg_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgsFieldNumber = 1,
  };
  // .PRO.ChatMessageItems msgs = 1;
  bool has_msgs() const;
  private:
  bool _internal_has_msgs() const;
  public:
  void clear_msgs();
  const ::PRO::ChatMessageItems& msgs() const;
  PROTOBUF_NODISCARD ::PRO::ChatMessageItems* release_msgs();
  ::PRO::ChatMessageItems* mutable_msgs();
  void set_allocated_msgs(::PRO::ChatMessageItems* msgs);
  private:
  const ::PRO::ChatMessageItems& _internal_msgs() const;
  ::PRO::ChatMessageItems* _internal_mutable_msgs();
  public:
  void unsafe_arena_set_allocated_msgs(
      ::PRO::ChatMessageItems* msgs);
  ::PRO::ChatMessageItems* unsafe_arena_release_msgs();

  // @@protoc_insertion_point(class_scope:PRO.Chat_GlobalMsg_ntf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PRO::ChatMessageItems* msgs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fchat_2eproto;
};
// -------------------------------------------------------------------

class Chat_UserChannels_active final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Chat_UserChannels_active) */ {
 public:
  inline Chat_UserChannels_active() : Chat_UserChannels_active(nullptr) {}
  ~Chat_UserChannels_active() override;
  explicit constexpr Chat_UserChannels_active(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chat_UserChannels_active(const Chat_UserChannels_active& from);
  Chat_UserChannels_active(Chat_UserChannels_active&& from) noexcept
    : Chat_UserChannels_active() {
    *this = ::std::move(from);
  }

  inline Chat_UserChannels_active& operator=(const Chat_UserChannels_active& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chat_UserChannels_active& operator=(Chat_UserChannels_active&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chat_UserChannels_active& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chat_UserChannels_active* internal_default_instance() {
    return reinterpret_cast<const Chat_UserChannels_active*>(
               &_Chat_UserChannels_active_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Chat_UserChannels_active& a, Chat_UserChannels_active& b) {
    a.Swap(&b);
  }
  inline void Swap(Chat_UserChannels_active* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chat_UserChannels_active* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Chat_UserChannels_active* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Chat_UserChannels_active>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Chat_UserChannels_active& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Chat_UserChannels_active& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chat_UserChannels_active* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Chat_UserChannels_active";
  }
  protected:
  explicit Chat_UserChannels_active(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 1,
  };
  // repeated .PRO.ChatChannelInfo channels = 1;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  ::PRO::ChatChannelInfo* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::ChatChannelInfo >*
      mutable_channels();
  private:
  const ::PRO::ChatChannelInfo& _internal_channels(int index) const;
  ::PRO::ChatChannelInfo* _internal_add_channels();
  public:
  const ::PRO::ChatChannelInfo& channels(int index) const;
  ::PRO::ChatChannelInfo* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::ChatChannelInfo >&
      channels() const;

  // @@protoc_insertion_point(class_scope:PRO.Chat_UserChannels_active)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::ChatChannelInfo > channels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fchat_2eproto;
};
// -------------------------------------------------------------------

class Chat_CustomChannelId_req final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:PRO.Chat_CustomChannelId_req) */ {
 public:
  inline Chat_CustomChannelId_req() : Chat_CustomChannelId_req(nullptr) {}
  explicit constexpr Chat_CustomChannelId_req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chat_CustomChannelId_req(const Chat_CustomChannelId_req& from);
  Chat_CustomChannelId_req(Chat_CustomChannelId_req&& from) noexcept
    : Chat_CustomChannelId_req() {
    *this = ::std::move(from);
  }

  inline Chat_CustomChannelId_req& operator=(const Chat_CustomChannelId_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chat_CustomChannelId_req& operator=(Chat_CustomChannelId_req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chat_CustomChannelId_req& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chat_CustomChannelId_req* internal_default_instance() {
    return reinterpret_cast<const Chat_CustomChannelId_req*>(
               &_Chat_CustomChannelId_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Chat_CustomChannelId_req& a, Chat_CustomChannelId_req& b) {
    a.Swap(&b);
  }
  inline void Swap(Chat_CustomChannelId_req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chat_CustomChannelId_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Chat_CustomChannelId_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Chat_CustomChannelId_req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Chat_CustomChannelId_req& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Chat_CustomChannelId_req& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Chat_CustomChannelId_req";
  }
  protected:
  explicit Chat_CustomChannelId_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PRO.Chat_CustomChannelId_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fchat_2eproto;
};
// -------------------------------------------------------------------

class Chat_CustomChannelId_ack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Chat_CustomChannelId_ack) */ {
 public:
  inline Chat_CustomChannelId_ack() : Chat_CustomChannelId_ack(nullptr) {}
  ~Chat_CustomChannelId_ack() override;
  explicit constexpr Chat_CustomChannelId_ack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chat_CustomChannelId_ack(const Chat_CustomChannelId_ack& from);
  Chat_CustomChannelId_ack(Chat_CustomChannelId_ack&& from) noexcept
    : Chat_CustomChannelId_ack() {
    *this = ::std::move(from);
  }

  inline Chat_CustomChannelId_ack& operator=(const Chat_CustomChannelId_ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chat_CustomChannelId_ack& operator=(Chat_CustomChannelId_ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chat_CustomChannelId_ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chat_CustomChannelId_ack* internal_default_instance() {
    return reinterpret_cast<const Chat_CustomChannelId_ack*>(
               &_Chat_CustomChannelId_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Chat_CustomChannelId_ack& a, Chat_CustomChannelId_ack& b) {
    a.Swap(&b);
  }
  inline void Swap(Chat_CustomChannelId_ack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chat_CustomChannelId_ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Chat_CustomChannelId_ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Chat_CustomChannelId_ack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Chat_CustomChannelId_ack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Chat_CustomChannelId_ack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chat_CustomChannelId_ack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Chat_CustomChannelId_ack";
  }
  protected:
  explicit Chat_CustomChannelId_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // optional .PRO.ChatChannelInfo channel = 2;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  const ::PRO::ChatChannelInfo& channel() const;
  PROTOBUF_NODISCARD ::PRO::ChatChannelInfo* release_channel();
  ::PRO::ChatChannelInfo* mutable_channel();
  void set_allocated_channel(::PRO::ChatChannelInfo* channel);
  private:
  const ::PRO::ChatChannelInfo& _internal_channel() const;
  ::PRO::ChatChannelInfo* _internal_mutable_channel();
  public:
  void unsafe_arena_set_allocated_channel(
      ::PRO::ChatChannelInfo* channel);
  ::PRO::ChatChannelInfo* unsafe_arena_release_channel();

  // int32 result = 1;
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.Chat_CustomChannelId_ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PRO::ChatChannelInfo* channel_;
  int32_t result_;
  friend struct ::TableStruct_user_5fchat_2eproto;
};
// -------------------------------------------------------------------

class Chat_UserMsg_say final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Chat_UserMsg_say) */ {
 public:
  inline Chat_UserMsg_say() : Chat_UserMsg_say(nullptr) {}
  ~Chat_UserMsg_say() override;
  explicit constexpr Chat_UserMsg_say(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chat_UserMsg_say(const Chat_UserMsg_say& from);
  Chat_UserMsg_say(Chat_UserMsg_say&& from) noexcept
    : Chat_UserMsg_say() {
    *this = ::std::move(from);
  }

  inline Chat_UserMsg_say& operator=(const Chat_UserMsg_say& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chat_UserMsg_say& operator=(Chat_UserMsg_say&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chat_UserMsg_say& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chat_UserMsg_say* internal_default_instance() {
    return reinterpret_cast<const Chat_UserMsg_say*>(
               &_Chat_UserMsg_say_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Chat_UserMsg_say& a, Chat_UserMsg_say& b) {
    a.Swap(&b);
  }
  inline void Swap(Chat_UserMsg_say* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chat_UserMsg_say* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Chat_UserMsg_say* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Chat_UserMsg_say>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Chat_UserMsg_say& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Chat_UserMsg_say& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chat_UserMsg_say* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Chat_UserMsg_say";
  }
  protected:
  explicit Chat_UserMsg_say(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kMsgContentFieldNumber = 3,
    kChannelFieldNumber = 1,
  };
  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string msg_content = 3;
  void clear_msg_content();
  const std::string& msg_content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_content();
  PROTOBUF_NODISCARD std::string* release_msg_content();
  void set_allocated_msg_content(std::string* msg_content);
  private:
  const std::string& _internal_msg_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_content(const std::string& value);
  std::string* _internal_mutable_msg_content();
  public:

  // .PRO.ChatChannelInfo channel = 1;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  const ::PRO::ChatChannelInfo& channel() const;
  PROTOBUF_NODISCARD ::PRO::ChatChannelInfo* release_channel();
  ::PRO::ChatChannelInfo* mutable_channel();
  void set_allocated_channel(::PRO::ChatChannelInfo* channel);
  private:
  const ::PRO::ChatChannelInfo& _internal_channel() const;
  ::PRO::ChatChannelInfo* _internal_mutable_channel();
  public:
  void unsafe_arena_set_allocated_channel(
      ::PRO::ChatChannelInfo* channel);
  ::PRO::ChatChannelInfo* unsafe_arena_release_channel();

  // @@protoc_insertion_point(class_scope:PRO.Chat_UserMsg_say)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_content_;
  ::PRO::ChatChannelInfo* channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fchat_2eproto;
};
// -------------------------------------------------------------------

class Chat_ChatMsg_ntf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Chat_ChatMsg_ntf) */ {
 public:
  inline Chat_ChatMsg_ntf() : Chat_ChatMsg_ntf(nullptr) {}
  ~Chat_ChatMsg_ntf() override;
  explicit constexpr Chat_ChatMsg_ntf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chat_ChatMsg_ntf(const Chat_ChatMsg_ntf& from);
  Chat_ChatMsg_ntf(Chat_ChatMsg_ntf&& from) noexcept
    : Chat_ChatMsg_ntf() {
    *this = ::std::move(from);
  }

  inline Chat_ChatMsg_ntf& operator=(const Chat_ChatMsg_ntf& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chat_ChatMsg_ntf& operator=(Chat_ChatMsg_ntf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chat_ChatMsg_ntf& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chat_ChatMsg_ntf* internal_default_instance() {
    return reinterpret_cast<const Chat_ChatMsg_ntf*>(
               &_Chat_ChatMsg_ntf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Chat_ChatMsg_ntf& a, Chat_ChatMsg_ntf& b) {
    a.Swap(&b);
  }
  inline void Swap(Chat_ChatMsg_ntf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chat_ChatMsg_ntf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Chat_ChatMsg_ntf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Chat_ChatMsg_ntf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Chat_ChatMsg_ntf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Chat_ChatMsg_ntf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chat_ChatMsg_ntf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Chat_ChatMsg_ntf";
  }
  protected:
  explicit Chat_ChatMsg_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFieldNumber = 1,
    kMsgsFieldNumber = 2,
  };
  // .PRO.ChatChannelInfo channel = 1;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  const ::PRO::ChatChannelInfo& channel() const;
  PROTOBUF_NODISCARD ::PRO::ChatChannelInfo* release_channel();
  ::PRO::ChatChannelInfo* mutable_channel();
  void set_allocated_channel(::PRO::ChatChannelInfo* channel);
  private:
  const ::PRO::ChatChannelInfo& _internal_channel() const;
  ::PRO::ChatChannelInfo* _internal_mutable_channel();
  public:
  void unsafe_arena_set_allocated_channel(
      ::PRO::ChatChannelInfo* channel);
  ::PRO::ChatChannelInfo* unsafe_arena_release_channel();

  // .PRO.ChatMessageItems msgs = 2;
  bool has_msgs() const;
  private:
  bool _internal_has_msgs() const;
  public:
  void clear_msgs();
  const ::PRO::ChatMessageItems& msgs() const;
  PROTOBUF_NODISCARD ::PRO::ChatMessageItems* release_msgs();
  ::PRO::ChatMessageItems* mutable_msgs();
  void set_allocated_msgs(::PRO::ChatMessageItems* msgs);
  private:
  const ::PRO::ChatMessageItems& _internal_msgs() const;
  ::PRO::ChatMessageItems* _internal_mutable_msgs();
  public:
  void unsafe_arena_set_allocated_msgs(
      ::PRO::ChatMessageItems* msgs);
  ::PRO::ChatMessageItems* unsafe_arena_release_msgs();

  // @@protoc_insertion_point(class_scope:PRO.Chat_ChatMsg_ntf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PRO::ChatChannelInfo* channel_;
  ::PRO::ChatMessageItems* msgs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fchat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChatMessageItem

// int64 send_user_iid = 1;
inline void ChatMessageItem::clear_send_user_iid() {
  send_user_iid_ = int64_t{0};
}
inline int64_t ChatMessageItem::_internal_send_user_iid() const {
  return send_user_iid_;
}
inline int64_t ChatMessageItem::send_user_iid() const {
  // @@protoc_insertion_point(field_get:PRO.ChatMessageItem.send_user_iid)
  return _internal_send_user_iid();
}
inline void ChatMessageItem::_internal_set_send_user_iid(int64_t value) {
  
  send_user_iid_ = value;
}
inline void ChatMessageItem::set_send_user_iid(int64_t value) {
  _internal_set_send_user_iid(value);
  // @@protoc_insertion_point(field_set:PRO.ChatMessageItem.send_user_iid)
}

// string send_nickname = 2;
inline void ChatMessageItem::clear_send_nickname() {
  send_nickname_.ClearToEmpty();
}
inline const std::string& ChatMessageItem::send_nickname() const {
  // @@protoc_insertion_point(field_get:PRO.ChatMessageItem.send_nickname)
  return _internal_send_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessageItem::set_send_nickname(ArgT0&& arg0, ArgT... args) {
 
 send_nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.ChatMessageItem.send_nickname)
}
inline std::string* ChatMessageItem::mutable_send_nickname() {
  std::string* _s = _internal_mutable_send_nickname();
  // @@protoc_insertion_point(field_mutable:PRO.ChatMessageItem.send_nickname)
  return _s;
}
inline const std::string& ChatMessageItem::_internal_send_nickname() const {
  return send_nickname_.Get();
}
inline void ChatMessageItem::_internal_set_send_nickname(const std::string& value) {
  
  send_nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatMessageItem::_internal_mutable_send_nickname() {
  
  return send_nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatMessageItem::release_send_nickname() {
  // @@protoc_insertion_point(field_release:PRO.ChatMessageItem.send_nickname)
  return send_nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatMessageItem::set_allocated_send_nickname(std::string* send_nickname) {
  if (send_nickname != nullptr) {
    
  } else {
    
  }
  send_nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), send_nickname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (send_nickname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    send_nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.ChatMessageItem.send_nickname)
}

// int32 send_time = 3;
inline void ChatMessageItem::clear_send_time() {
  send_time_ = 0;
}
inline int32_t ChatMessageItem::_internal_send_time() const {
  return send_time_;
}
inline int32_t ChatMessageItem::send_time() const {
  // @@protoc_insertion_point(field_get:PRO.ChatMessageItem.send_time)
  return _internal_send_time();
}
inline void ChatMessageItem::_internal_set_send_time(int32_t value) {
  
  send_time_ = value;
}
inline void ChatMessageItem::set_send_time(int32_t value) {
  _internal_set_send_time(value);
  // @@protoc_insertion_point(field_set:PRO.ChatMessageItem.send_time)
}

// string msg_content = 5;
inline void ChatMessageItem::clear_msg_content() {
  msg_content_.ClearToEmpty();
}
inline const std::string& ChatMessageItem::msg_content() const {
  // @@protoc_insertion_point(field_get:PRO.ChatMessageItem.msg_content)
  return _internal_msg_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessageItem::set_msg_content(ArgT0&& arg0, ArgT... args) {
 
 msg_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.ChatMessageItem.msg_content)
}
inline std::string* ChatMessageItem::mutable_msg_content() {
  std::string* _s = _internal_mutable_msg_content();
  // @@protoc_insertion_point(field_mutable:PRO.ChatMessageItem.msg_content)
  return _s;
}
inline const std::string& ChatMessageItem::_internal_msg_content() const {
  return msg_content_.Get();
}
inline void ChatMessageItem::_internal_set_msg_content(const std::string& value) {
  
  msg_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatMessageItem::_internal_mutable_msg_content() {
  
  return msg_content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatMessageItem::release_msg_content() {
  // @@protoc_insertion_point(field_release:PRO.ChatMessageItem.msg_content)
  return msg_content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatMessageItem::set_allocated_msg_content(std::string* msg_content) {
  if (msg_content != nullptr) {
    
  } else {
    
  }
  msg_content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_content,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_content_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    msg_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.ChatMessageItem.msg_content)
}

// -------------------------------------------------------------------

// ChatMessageItems

// repeated .PRO.ChatMessageItem msgs = 1;
inline int ChatMessageItems::_internal_msgs_size() const {
  return msgs_.size();
}
inline int ChatMessageItems::msgs_size() const {
  return _internal_msgs_size();
}
inline void ChatMessageItems::clear_msgs() {
  msgs_.Clear();
}
inline ::PRO::ChatMessageItem* ChatMessageItems::mutable_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:PRO.ChatMessageItems.msgs)
  return msgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::ChatMessageItem >*
ChatMessageItems::mutable_msgs() {
  // @@protoc_insertion_point(field_mutable_list:PRO.ChatMessageItems.msgs)
  return &msgs_;
}
inline const ::PRO::ChatMessageItem& ChatMessageItems::_internal_msgs(int index) const {
  return msgs_.Get(index);
}
inline const ::PRO::ChatMessageItem& ChatMessageItems::msgs(int index) const {
  // @@protoc_insertion_point(field_get:PRO.ChatMessageItems.msgs)
  return _internal_msgs(index);
}
inline ::PRO::ChatMessageItem* ChatMessageItems::_internal_add_msgs() {
  return msgs_.Add();
}
inline ::PRO::ChatMessageItem* ChatMessageItems::add_msgs() {
  ::PRO::ChatMessageItem* _add = _internal_add_msgs();
  // @@protoc_insertion_point(field_add:PRO.ChatMessageItems.msgs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::ChatMessageItem >&
ChatMessageItems::msgs() const {
  // @@protoc_insertion_point(field_list:PRO.ChatMessageItems.msgs)
  return msgs_;
}

// -------------------------------------------------------------------

// ChatChannelInfo

// .PRO.ChatChannelType type = 1;
inline void ChatChannelInfo::clear_type() {
  type_ = 0;
}
inline ::PRO::ChatChannelType ChatChannelInfo::_internal_type() const {
  return static_cast< ::PRO::ChatChannelType >(type_);
}
inline ::PRO::ChatChannelType ChatChannelInfo::type() const {
  // @@protoc_insertion_point(field_get:PRO.ChatChannelInfo.type)
  return _internal_type();
}
inline void ChatChannelInfo::_internal_set_type(::PRO::ChatChannelType value) {
  
  type_ = value;
}
inline void ChatChannelInfo::set_type(::PRO::ChatChannelType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PRO.ChatChannelInfo.type)
}

// int64 channeldid = 2;
inline void ChatChannelInfo::clear_channeldid() {
  channeldid_ = int64_t{0};
}
inline int64_t ChatChannelInfo::_internal_channeldid() const {
  return channeldid_;
}
inline int64_t ChatChannelInfo::channeldid() const {
  // @@protoc_insertion_point(field_get:PRO.ChatChannelInfo.channeldid)
  return _internal_channeldid();
}
inline void ChatChannelInfo::_internal_set_channeldid(int64_t value) {
  
  channeldid_ = value;
}
inline void ChatChannelInfo::set_channeldid(int64_t value) {
  _internal_set_channeldid(value);
  // @@protoc_insertion_point(field_set:PRO.ChatChannelInfo.channeldid)
}

// -------------------------------------------------------------------

// Chat_GlobalMsg_ntf

// .PRO.ChatMessageItems msgs = 1;
inline bool Chat_GlobalMsg_ntf::_internal_has_msgs() const {
  return this != internal_default_instance() && msgs_ != nullptr;
}
inline bool Chat_GlobalMsg_ntf::has_msgs() const {
  return _internal_has_msgs();
}
inline void Chat_GlobalMsg_ntf::clear_msgs() {
  if (GetArenaForAllocation() == nullptr && msgs_ != nullptr) {
    delete msgs_;
  }
  msgs_ = nullptr;
}
inline const ::PRO::ChatMessageItems& Chat_GlobalMsg_ntf::_internal_msgs() const {
  const ::PRO::ChatMessageItems* p = msgs_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::ChatMessageItems&>(
      ::PRO::_ChatMessageItems_default_instance_);
}
inline const ::PRO::ChatMessageItems& Chat_GlobalMsg_ntf::msgs() const {
  // @@protoc_insertion_point(field_get:PRO.Chat_GlobalMsg_ntf.msgs)
  return _internal_msgs();
}
inline void Chat_GlobalMsg_ntf::unsafe_arena_set_allocated_msgs(
    ::PRO::ChatMessageItems* msgs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msgs_);
  }
  msgs_ = msgs;
  if (msgs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.Chat_GlobalMsg_ntf.msgs)
}
inline ::PRO::ChatMessageItems* Chat_GlobalMsg_ntf::release_msgs() {
  
  ::PRO::ChatMessageItems* temp = msgs_;
  msgs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::ChatMessageItems* Chat_GlobalMsg_ntf::unsafe_arena_release_msgs() {
  // @@protoc_insertion_point(field_release:PRO.Chat_GlobalMsg_ntf.msgs)
  
  ::PRO::ChatMessageItems* temp = msgs_;
  msgs_ = nullptr;
  return temp;
}
inline ::PRO::ChatMessageItems* Chat_GlobalMsg_ntf::_internal_mutable_msgs() {
  
  if (msgs_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::ChatMessageItems>(GetArenaForAllocation());
    msgs_ = p;
  }
  return msgs_;
}
inline ::PRO::ChatMessageItems* Chat_GlobalMsg_ntf::mutable_msgs() {
  ::PRO::ChatMessageItems* _msg = _internal_mutable_msgs();
  // @@protoc_insertion_point(field_mutable:PRO.Chat_GlobalMsg_ntf.msgs)
  return _msg;
}
inline void Chat_GlobalMsg_ntf::set_allocated_msgs(::PRO::ChatMessageItems* msgs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete msgs_;
  }
  if (msgs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PRO::ChatMessageItems>::GetOwningArena(msgs);
    if (message_arena != submessage_arena) {
      msgs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msgs, submessage_arena);
    }
    
  } else {
    
  }
  msgs_ = msgs;
  // @@protoc_insertion_point(field_set_allocated:PRO.Chat_GlobalMsg_ntf.msgs)
}

// -------------------------------------------------------------------

// Chat_UserChannels_active

// repeated .PRO.ChatChannelInfo channels = 1;
inline int Chat_UserChannels_active::_internal_channels_size() const {
  return channels_.size();
}
inline int Chat_UserChannels_active::channels_size() const {
  return _internal_channels_size();
}
inline void Chat_UserChannels_active::clear_channels() {
  channels_.Clear();
}
inline ::PRO::ChatChannelInfo* Chat_UserChannels_active::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:PRO.Chat_UserChannels_active.channels)
  return channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::ChatChannelInfo >*
Chat_UserChannels_active::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:PRO.Chat_UserChannels_active.channels)
  return &channels_;
}
inline const ::PRO::ChatChannelInfo& Chat_UserChannels_active::_internal_channels(int index) const {
  return channels_.Get(index);
}
inline const ::PRO::ChatChannelInfo& Chat_UserChannels_active::channels(int index) const {
  // @@protoc_insertion_point(field_get:PRO.Chat_UserChannels_active.channels)
  return _internal_channels(index);
}
inline ::PRO::ChatChannelInfo* Chat_UserChannels_active::_internal_add_channels() {
  return channels_.Add();
}
inline ::PRO::ChatChannelInfo* Chat_UserChannels_active::add_channels() {
  ::PRO::ChatChannelInfo* _add = _internal_add_channels();
  // @@protoc_insertion_point(field_add:PRO.Chat_UserChannels_active.channels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::ChatChannelInfo >&
Chat_UserChannels_active::channels() const {
  // @@protoc_insertion_point(field_list:PRO.Chat_UserChannels_active.channels)
  return channels_;
}

// -------------------------------------------------------------------

// Chat_CustomChannelId_req

// -------------------------------------------------------------------

// Chat_CustomChannelId_ack

// int32 result = 1;
inline void Chat_CustomChannelId_ack::clear_result() {
  result_ = 0;
}
inline int32_t Chat_CustomChannelId_ack::_internal_result() const {
  return result_;
}
inline int32_t Chat_CustomChannelId_ack::result() const {
  // @@protoc_insertion_point(field_get:PRO.Chat_CustomChannelId_ack.result)
  return _internal_result();
}
inline void Chat_CustomChannelId_ack::_internal_set_result(int32_t value) {
  
  result_ = value;
}
inline void Chat_CustomChannelId_ack::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:PRO.Chat_CustomChannelId_ack.result)
}

// optional .PRO.ChatChannelInfo channel = 2;
inline bool Chat_CustomChannelId_ack::_internal_has_channel() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || channel_ != nullptr);
  return value;
}
inline bool Chat_CustomChannelId_ack::has_channel() const {
  return _internal_has_channel();
}
inline void Chat_CustomChannelId_ack::clear_channel() {
  if (channel_ != nullptr) channel_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::PRO::ChatChannelInfo& Chat_CustomChannelId_ack::_internal_channel() const {
  const ::PRO::ChatChannelInfo* p = channel_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::ChatChannelInfo&>(
      ::PRO::_ChatChannelInfo_default_instance_);
}
inline const ::PRO::ChatChannelInfo& Chat_CustomChannelId_ack::channel() const {
  // @@protoc_insertion_point(field_get:PRO.Chat_CustomChannelId_ack.channel)
  return _internal_channel();
}
inline void Chat_CustomChannelId_ack::unsafe_arena_set_allocated_channel(
    ::PRO::ChatChannelInfo* channel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_);
  }
  channel_ = channel;
  if (channel) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.Chat_CustomChannelId_ack.channel)
}
inline ::PRO::ChatChannelInfo* Chat_CustomChannelId_ack::release_channel() {
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::ChatChannelInfo* temp = channel_;
  channel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::ChatChannelInfo* Chat_CustomChannelId_ack::unsafe_arena_release_channel() {
  // @@protoc_insertion_point(field_release:PRO.Chat_CustomChannelId_ack.channel)
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::ChatChannelInfo* temp = channel_;
  channel_ = nullptr;
  return temp;
}
inline ::PRO::ChatChannelInfo* Chat_CustomChannelId_ack::_internal_mutable_channel() {
  _has_bits_[0] |= 0x00000001u;
  if (channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::ChatChannelInfo>(GetArenaForAllocation());
    channel_ = p;
  }
  return channel_;
}
inline ::PRO::ChatChannelInfo* Chat_CustomChannelId_ack::mutable_channel() {
  ::PRO::ChatChannelInfo* _msg = _internal_mutable_channel();
  // @@protoc_insertion_point(field_mutable:PRO.Chat_CustomChannelId_ack.channel)
  return _msg;
}
inline void Chat_CustomChannelId_ack::set_allocated_channel(::PRO::ChatChannelInfo* channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete channel_;
  }
  if (channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PRO::ChatChannelInfo>::GetOwningArena(channel);
    if (message_arena != submessage_arena) {
      channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  channel_ = channel;
  // @@protoc_insertion_point(field_set_allocated:PRO.Chat_CustomChannelId_ack.channel)
}

// -------------------------------------------------------------------

// Chat_UserMsg_say

// .PRO.ChatChannelInfo channel = 1;
inline bool Chat_UserMsg_say::_internal_has_channel() const {
  return this != internal_default_instance() && channel_ != nullptr;
}
inline bool Chat_UserMsg_say::has_channel() const {
  return _internal_has_channel();
}
inline void Chat_UserMsg_say::clear_channel() {
  if (GetArenaForAllocation() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
}
inline const ::PRO::ChatChannelInfo& Chat_UserMsg_say::_internal_channel() const {
  const ::PRO::ChatChannelInfo* p = channel_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::ChatChannelInfo&>(
      ::PRO::_ChatChannelInfo_default_instance_);
}
inline const ::PRO::ChatChannelInfo& Chat_UserMsg_say::channel() const {
  // @@protoc_insertion_point(field_get:PRO.Chat_UserMsg_say.channel)
  return _internal_channel();
}
inline void Chat_UserMsg_say::unsafe_arena_set_allocated_channel(
    ::PRO::ChatChannelInfo* channel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_);
  }
  channel_ = channel;
  if (channel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.Chat_UserMsg_say.channel)
}
inline ::PRO::ChatChannelInfo* Chat_UserMsg_say::release_channel() {
  
  ::PRO::ChatChannelInfo* temp = channel_;
  channel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::ChatChannelInfo* Chat_UserMsg_say::unsafe_arena_release_channel() {
  // @@protoc_insertion_point(field_release:PRO.Chat_UserMsg_say.channel)
  
  ::PRO::ChatChannelInfo* temp = channel_;
  channel_ = nullptr;
  return temp;
}
inline ::PRO::ChatChannelInfo* Chat_UserMsg_say::_internal_mutable_channel() {
  
  if (channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::ChatChannelInfo>(GetArenaForAllocation());
    channel_ = p;
  }
  return channel_;
}
inline ::PRO::ChatChannelInfo* Chat_UserMsg_say::mutable_channel() {
  ::PRO::ChatChannelInfo* _msg = _internal_mutable_channel();
  // @@protoc_insertion_point(field_mutable:PRO.Chat_UserMsg_say.channel)
  return _msg;
}
inline void Chat_UserMsg_say::set_allocated_channel(::PRO::ChatChannelInfo* channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete channel_;
  }
  if (channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PRO::ChatChannelInfo>::GetOwningArena(channel);
    if (message_arena != submessage_arena) {
      channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    
  } else {
    
  }
  channel_ = channel;
  // @@protoc_insertion_point(field_set_allocated:PRO.Chat_UserMsg_say.channel)
}

// string nickname = 2;
inline void Chat_UserMsg_say::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& Chat_UserMsg_say::nickname() const {
  // @@protoc_insertion_point(field_get:PRO.Chat_UserMsg_say.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Chat_UserMsg_say::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.Chat_UserMsg_say.nickname)
}
inline std::string* Chat_UserMsg_say::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:PRO.Chat_UserMsg_say.nickname)
  return _s;
}
inline const std::string& Chat_UserMsg_say::_internal_nickname() const {
  return nickname_.Get();
}
inline void Chat_UserMsg_say::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Chat_UserMsg_say::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Chat_UserMsg_say::release_nickname() {
  // @@protoc_insertion_point(field_release:PRO.Chat_UserMsg_say.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Chat_UserMsg_say::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nickname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.Chat_UserMsg_say.nickname)
}

// string msg_content = 3;
inline void Chat_UserMsg_say::clear_msg_content() {
  msg_content_.ClearToEmpty();
}
inline const std::string& Chat_UserMsg_say::msg_content() const {
  // @@protoc_insertion_point(field_get:PRO.Chat_UserMsg_say.msg_content)
  return _internal_msg_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Chat_UserMsg_say::set_msg_content(ArgT0&& arg0, ArgT... args) {
 
 msg_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.Chat_UserMsg_say.msg_content)
}
inline std::string* Chat_UserMsg_say::mutable_msg_content() {
  std::string* _s = _internal_mutable_msg_content();
  // @@protoc_insertion_point(field_mutable:PRO.Chat_UserMsg_say.msg_content)
  return _s;
}
inline const std::string& Chat_UserMsg_say::_internal_msg_content() const {
  return msg_content_.Get();
}
inline void Chat_UserMsg_say::_internal_set_msg_content(const std::string& value) {
  
  msg_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Chat_UserMsg_say::_internal_mutable_msg_content() {
  
  return msg_content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Chat_UserMsg_say::release_msg_content() {
  // @@protoc_insertion_point(field_release:PRO.Chat_UserMsg_say.msg_content)
  return msg_content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Chat_UserMsg_say::set_allocated_msg_content(std::string* msg_content) {
  if (msg_content != nullptr) {
    
  } else {
    
  }
  msg_content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_content,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_content_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    msg_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.Chat_UserMsg_say.msg_content)
}

// -------------------------------------------------------------------

// Chat_ChatMsg_ntf

// .PRO.ChatChannelInfo channel = 1;
inline bool Chat_ChatMsg_ntf::_internal_has_channel() const {
  return this != internal_default_instance() && channel_ != nullptr;
}
inline bool Chat_ChatMsg_ntf::has_channel() const {
  return _internal_has_channel();
}
inline void Chat_ChatMsg_ntf::clear_channel() {
  if (GetArenaForAllocation() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
}
inline const ::PRO::ChatChannelInfo& Chat_ChatMsg_ntf::_internal_channel() const {
  const ::PRO::ChatChannelInfo* p = channel_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::ChatChannelInfo&>(
      ::PRO::_ChatChannelInfo_default_instance_);
}
inline const ::PRO::ChatChannelInfo& Chat_ChatMsg_ntf::channel() const {
  // @@protoc_insertion_point(field_get:PRO.Chat_ChatMsg_ntf.channel)
  return _internal_channel();
}
inline void Chat_ChatMsg_ntf::unsafe_arena_set_allocated_channel(
    ::PRO::ChatChannelInfo* channel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_);
  }
  channel_ = channel;
  if (channel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.Chat_ChatMsg_ntf.channel)
}
inline ::PRO::ChatChannelInfo* Chat_ChatMsg_ntf::release_channel() {
  
  ::PRO::ChatChannelInfo* temp = channel_;
  channel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::ChatChannelInfo* Chat_ChatMsg_ntf::unsafe_arena_release_channel() {
  // @@protoc_insertion_point(field_release:PRO.Chat_ChatMsg_ntf.channel)
  
  ::PRO::ChatChannelInfo* temp = channel_;
  channel_ = nullptr;
  return temp;
}
inline ::PRO::ChatChannelInfo* Chat_ChatMsg_ntf::_internal_mutable_channel() {
  
  if (channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::ChatChannelInfo>(GetArenaForAllocation());
    channel_ = p;
  }
  return channel_;
}
inline ::PRO::ChatChannelInfo* Chat_ChatMsg_ntf::mutable_channel() {
  ::PRO::ChatChannelInfo* _msg = _internal_mutable_channel();
  // @@protoc_insertion_point(field_mutable:PRO.Chat_ChatMsg_ntf.channel)
  return _msg;
}
inline void Chat_ChatMsg_ntf::set_allocated_channel(::PRO::ChatChannelInfo* channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete channel_;
  }
  if (channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PRO::ChatChannelInfo>::GetOwningArena(channel);
    if (message_arena != submessage_arena) {
      channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    
  } else {
    
  }
  channel_ = channel;
  // @@protoc_insertion_point(field_set_allocated:PRO.Chat_ChatMsg_ntf.channel)
}

// .PRO.ChatMessageItems msgs = 2;
inline bool Chat_ChatMsg_ntf::_internal_has_msgs() const {
  return this != internal_default_instance() && msgs_ != nullptr;
}
inline bool Chat_ChatMsg_ntf::has_msgs() const {
  return _internal_has_msgs();
}
inline void Chat_ChatMsg_ntf::clear_msgs() {
  if (GetArenaForAllocation() == nullptr && msgs_ != nullptr) {
    delete msgs_;
  }
  msgs_ = nullptr;
}
inline const ::PRO::ChatMessageItems& Chat_ChatMsg_ntf::_internal_msgs() const {
  const ::PRO::ChatMessageItems* p = msgs_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::ChatMessageItems&>(
      ::PRO::_ChatMessageItems_default_instance_);
}
inline const ::PRO::ChatMessageItems& Chat_ChatMsg_ntf::msgs() const {
  // @@protoc_insertion_point(field_get:PRO.Chat_ChatMsg_ntf.msgs)
  return _internal_msgs();
}
inline void Chat_ChatMsg_ntf::unsafe_arena_set_allocated_msgs(
    ::PRO::ChatMessageItems* msgs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msgs_);
  }
  msgs_ = msgs;
  if (msgs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.Chat_ChatMsg_ntf.msgs)
}
inline ::PRO::ChatMessageItems* Chat_ChatMsg_ntf::release_msgs() {
  
  ::PRO::ChatMessageItems* temp = msgs_;
  msgs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::ChatMessageItems* Chat_ChatMsg_ntf::unsafe_arena_release_msgs() {
  // @@protoc_insertion_point(field_release:PRO.Chat_ChatMsg_ntf.msgs)
  
  ::PRO::ChatMessageItems* temp = msgs_;
  msgs_ = nullptr;
  return temp;
}
inline ::PRO::ChatMessageItems* Chat_ChatMsg_ntf::_internal_mutable_msgs() {
  
  if (msgs_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::ChatMessageItems>(GetArenaForAllocation());
    msgs_ = p;
  }
  return msgs_;
}
inline ::PRO::ChatMessageItems* Chat_ChatMsg_ntf::mutable_msgs() {
  ::PRO::ChatMessageItems* _msg = _internal_mutable_msgs();
  // @@protoc_insertion_point(field_mutable:PRO.Chat_ChatMsg_ntf.msgs)
  return _msg;
}
inline void Chat_ChatMsg_ntf::set_allocated_msgs(::PRO::ChatMessageItems* msgs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete msgs_;
  }
  if (msgs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PRO::ChatMessageItems>::GetOwningArena(msgs);
    if (message_arena != submessage_arena) {
      msgs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msgs, submessage_arena);
    }
    
  } else {
    
  }
  msgs_ = msgs;
  // @@protoc_insertion_point(field_set_allocated:PRO.Chat_ChatMsg_ntf.msgs)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PRO

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::PRO::ChatChannelType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PRO::ChatChannelType>() {
  return ::PRO::ChatChannelType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_user_5fchat_2eproto

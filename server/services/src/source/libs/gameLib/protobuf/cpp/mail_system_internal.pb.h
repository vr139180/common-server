// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mail_system_internal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mail_5fsystem_5finternal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mail_5fsystem_5finternal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "global_internal.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mail_5fsystem_5finternal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mail_5fsystem_5finternal_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mail_5fsystem_5finternal_2eproto;
namespace PRO {
class Mail_NewMail_ack;
struct Mail_NewMail_ackDefaultTypeInternal;
extern Mail_NewMail_ackDefaultTypeInternal _Mail_NewMail_ack_default_instance_;
class Mail_NewMail_req;
struct Mail_NewMail_reqDefaultTypeInternal;
extern Mail_NewMail_reqDefaultTypeInternal _Mail_NewMail_req_default_instance_;
class Mail_SystemMail_ack;
struct Mail_SystemMail_ackDefaultTypeInternal;
extern Mail_SystemMail_ackDefaultTypeInternal _Mail_SystemMail_ack_default_instance_;
class Mail_SystemMail_ntf;
struct Mail_SystemMail_ntfDefaultTypeInternal;
extern Mail_SystemMail_ntfDefaultTypeInternal _Mail_SystemMail_ntf_default_instance_;
class Mail_SystemMail_req;
struct Mail_SystemMail_reqDefaultTypeInternal;
extern Mail_SystemMail_reqDefaultTypeInternal _Mail_SystemMail_req_default_instance_;
}  // namespace PRO
PROTOBUF_NAMESPACE_OPEN
template<> ::PRO::Mail_NewMail_ack* Arena::CreateMaybeMessage<::PRO::Mail_NewMail_ack>(Arena*);
template<> ::PRO::Mail_NewMail_req* Arena::CreateMaybeMessage<::PRO::Mail_NewMail_req>(Arena*);
template<> ::PRO::Mail_SystemMail_ack* Arena::CreateMaybeMessage<::PRO::Mail_SystemMail_ack>(Arena*);
template<> ::PRO::Mail_SystemMail_ntf* Arena::CreateMaybeMessage<::PRO::Mail_SystemMail_ntf>(Arena*);
template<> ::PRO::Mail_SystemMail_req* Arena::CreateMaybeMessage<::PRO::Mail_SystemMail_req>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PRO {

// ===================================================================

class Mail_SystemMail_req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Mail_SystemMail_req) */ {
 public:
  inline Mail_SystemMail_req() : Mail_SystemMail_req(nullptr) {}
  ~Mail_SystemMail_req() override;
  explicit constexpr Mail_SystemMail_req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mail_SystemMail_req(const Mail_SystemMail_req& from);
  Mail_SystemMail_req(Mail_SystemMail_req&& from) noexcept
    : Mail_SystemMail_req() {
    *this = ::std::move(from);
  }

  inline Mail_SystemMail_req& operator=(const Mail_SystemMail_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mail_SystemMail_req& operator=(Mail_SystemMail_req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Mail_SystemMail_req& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mail_SystemMail_req* internal_default_instance() {
    return reinterpret_cast<const Mail_SystemMail_req*>(
               &_Mail_SystemMail_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Mail_SystemMail_req& a, Mail_SystemMail_req& b) {
    a.Swap(&b);
  }
  inline void Swap(Mail_SystemMail_req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mail_SystemMail_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mail_SystemMail_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Mail_SystemMail_req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Mail_SystemMail_req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Mail_SystemMail_req& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mail_SystemMail_req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Mail_SystemMail_req";
  }
  protected:
  explicit Mail_SystemMail_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachinfoFieldNumber = 4,
    kTitleFieldNumber = 5,
    kContentsFieldNumber = 6,
    kSenderIidFieldNumber = 2,
    kAttachmentFieldNumber = 3,
  };
  // string attachinfo = 4;
  void clear_attachinfo();
  const std::string& attachinfo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attachinfo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attachinfo();
  PROTOBUF_NODISCARD std::string* release_attachinfo();
  void set_allocated_attachinfo(std::string* attachinfo);
  private:
  const std::string& _internal_attachinfo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attachinfo(const std::string& value);
  std::string* _internal_mutable_attachinfo();
  public:

  // string title = 5;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string contents = 6;
  void clear_contents();
  const std::string& contents() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contents(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contents();
  PROTOBUF_NODISCARD std::string* release_contents();
  void set_allocated_contents(std::string* contents);
  private:
  const std::string& _internal_contents() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contents(const std::string& value);
  std::string* _internal_mutable_contents();
  public:

  // int64 sender_iid = 2;
  void clear_sender_iid();
  int64_t sender_iid() const;
  void set_sender_iid(int64_t value);
  private:
  int64_t _internal_sender_iid() const;
  void _internal_set_sender_iid(int64_t value);
  public:

  // int32 attachment = 3;
  void clear_attachment();
  int32_t attachment() const;
  void set_attachment(int32_t value);
  private:
  int32_t _internal_attachment() const;
  void _internal_set_attachment(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.Mail_SystemMail_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attachinfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contents_;
  int64_t sender_iid_;
  int32_t attachment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mail_5fsystem_5finternal_2eproto;
};
// -------------------------------------------------------------------

class Mail_SystemMail_ack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Mail_SystemMail_ack) */ {
 public:
  inline Mail_SystemMail_ack() : Mail_SystemMail_ack(nullptr) {}
  ~Mail_SystemMail_ack() override;
  explicit constexpr Mail_SystemMail_ack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mail_SystemMail_ack(const Mail_SystemMail_ack& from);
  Mail_SystemMail_ack(Mail_SystemMail_ack&& from) noexcept
    : Mail_SystemMail_ack() {
    *this = ::std::move(from);
  }

  inline Mail_SystemMail_ack& operator=(const Mail_SystemMail_ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mail_SystemMail_ack& operator=(Mail_SystemMail_ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Mail_SystemMail_ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mail_SystemMail_ack* internal_default_instance() {
    return reinterpret_cast<const Mail_SystemMail_ack*>(
               &_Mail_SystemMail_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Mail_SystemMail_ack& a, Mail_SystemMail_ack& b) {
    a.Swap(&b);
  }
  inline void Swap(Mail_SystemMail_ack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mail_SystemMail_ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mail_SystemMail_ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Mail_SystemMail_ack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Mail_SystemMail_ack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Mail_SystemMail_ack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mail_SystemMail_ack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Mail_SystemMail_ack";
  }
  protected:
  explicit Mail_SystemMail_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMailFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // optional .PRO.MailSystemItem mail = 2;
  bool has_mail() const;
  private:
  bool _internal_has_mail() const;
  public:
  void clear_mail();
  const ::PRO::MailSystemItem& mail() const;
  PROTOBUF_NODISCARD ::PRO::MailSystemItem* release_mail();
  ::PRO::MailSystemItem* mutable_mail();
  void set_allocated_mail(::PRO::MailSystemItem* mail);
  private:
  const ::PRO::MailSystemItem& _internal_mail() const;
  ::PRO::MailSystemItem* _internal_mutable_mail();
  public:
  void unsafe_arena_set_allocated_mail(
      ::PRO::MailSystemItem* mail);
  ::PRO::MailSystemItem* unsafe_arena_release_mail();

  // int32 result = 1;
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.Mail_SystemMail_ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PRO::MailSystemItem* mail_;
  int32_t result_;
  friend struct ::TableStruct_mail_5fsystem_5finternal_2eproto;
};
// -------------------------------------------------------------------

class Mail_SystemMail_ntf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Mail_SystemMail_ntf) */ {
 public:
  inline Mail_SystemMail_ntf() : Mail_SystemMail_ntf(nullptr) {}
  ~Mail_SystemMail_ntf() override;
  explicit constexpr Mail_SystemMail_ntf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mail_SystemMail_ntf(const Mail_SystemMail_ntf& from);
  Mail_SystemMail_ntf(Mail_SystemMail_ntf&& from) noexcept
    : Mail_SystemMail_ntf() {
    *this = ::std::move(from);
  }

  inline Mail_SystemMail_ntf& operator=(const Mail_SystemMail_ntf& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mail_SystemMail_ntf& operator=(Mail_SystemMail_ntf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Mail_SystemMail_ntf& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mail_SystemMail_ntf* internal_default_instance() {
    return reinterpret_cast<const Mail_SystemMail_ntf*>(
               &_Mail_SystemMail_ntf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Mail_SystemMail_ntf& a, Mail_SystemMail_ntf& b) {
    a.Swap(&b);
  }
  inline void Swap(Mail_SystemMail_ntf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mail_SystemMail_ntf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mail_SystemMail_ntf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Mail_SystemMail_ntf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Mail_SystemMail_ntf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Mail_SystemMail_ntf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mail_SystemMail_ntf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Mail_SystemMail_ntf";
  }
  protected:
  explicit Mail_SystemMail_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMailiidFieldNumber = 1,
  };
  // int64 mailiid = 1;
  void clear_mailiid();
  int64_t mailiid() const;
  void set_mailiid(int64_t value);
  private:
  int64_t _internal_mailiid() const;
  void _internal_set_mailiid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.Mail_SystemMail_ntf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t mailiid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mail_5fsystem_5finternal_2eproto;
};
// -------------------------------------------------------------------

class Mail_NewMail_req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Mail_NewMail_req) */ {
 public:
  inline Mail_NewMail_req() : Mail_NewMail_req(nullptr) {}
  ~Mail_NewMail_req() override;
  explicit constexpr Mail_NewMail_req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mail_NewMail_req(const Mail_NewMail_req& from);
  Mail_NewMail_req(Mail_NewMail_req&& from) noexcept
    : Mail_NewMail_req() {
    *this = ::std::move(from);
  }

  inline Mail_NewMail_req& operator=(const Mail_NewMail_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mail_NewMail_req& operator=(Mail_NewMail_req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Mail_NewMail_req& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mail_NewMail_req* internal_default_instance() {
    return reinterpret_cast<const Mail_NewMail_req*>(
               &_Mail_NewMail_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Mail_NewMail_req& a, Mail_NewMail_req& b) {
    a.Swap(&b);
  }
  inline void Swap(Mail_NewMail_req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mail_NewMail_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mail_NewMail_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Mail_NewMail_req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Mail_NewMail_req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Mail_NewMail_req& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mail_NewMail_req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Mail_NewMail_req";
  }
  protected:
  explicit Mail_NewMail_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachinfoFieldNumber = 5,
    kTitleFieldNumber = 6,
    kContentsFieldNumber = 7,
    kReceiverIidFieldNumber = 2,
    kStypeFieldNumber = 1,
    kAttachmentFieldNumber = 4,
    kSenderIidFieldNumber = 3,
  };
  // string attachinfo = 5;
  void clear_attachinfo();
  const std::string& attachinfo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attachinfo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attachinfo();
  PROTOBUF_NODISCARD std::string* release_attachinfo();
  void set_allocated_attachinfo(std::string* attachinfo);
  private:
  const std::string& _internal_attachinfo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attachinfo(const std::string& value);
  std::string* _internal_mutable_attachinfo();
  public:

  // string title = 6;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string contents = 7;
  void clear_contents();
  const std::string& contents() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contents(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contents();
  PROTOBUF_NODISCARD std::string* release_contents();
  void set_allocated_contents(std::string* contents);
  private:
  const std::string& _internal_contents() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contents(const std::string& value);
  std::string* _internal_mutable_contents();
  public:

  // int64 receiver_iid = 2;
  void clear_receiver_iid();
  int64_t receiver_iid() const;
  void set_receiver_iid(int64_t value);
  private:
  int64_t _internal_receiver_iid() const;
  void _internal_set_receiver_iid(int64_t value);
  public:

  // int32 stype = 1;
  void clear_stype();
  int32_t stype() const;
  void set_stype(int32_t value);
  private:
  int32_t _internal_stype() const;
  void _internal_set_stype(int32_t value);
  public:

  // int32 attachment = 4;
  void clear_attachment();
  int32_t attachment() const;
  void set_attachment(int32_t value);
  private:
  int32_t _internal_attachment() const;
  void _internal_set_attachment(int32_t value);
  public:

  // int64 sender_iid = 3;
  void clear_sender_iid();
  int64_t sender_iid() const;
  void set_sender_iid(int64_t value);
  private:
  int64_t _internal_sender_iid() const;
  void _internal_set_sender_iid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.Mail_NewMail_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attachinfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contents_;
  int64_t receiver_iid_;
  int32_t stype_;
  int32_t attachment_;
  int64_t sender_iid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mail_5fsystem_5finternal_2eproto;
};
// -------------------------------------------------------------------

class Mail_NewMail_ack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Mail_NewMail_ack) */ {
 public:
  inline Mail_NewMail_ack() : Mail_NewMail_ack(nullptr) {}
  ~Mail_NewMail_ack() override;
  explicit constexpr Mail_NewMail_ack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mail_NewMail_ack(const Mail_NewMail_ack& from);
  Mail_NewMail_ack(Mail_NewMail_ack&& from) noexcept
    : Mail_NewMail_ack() {
    *this = ::std::move(from);
  }

  inline Mail_NewMail_ack& operator=(const Mail_NewMail_ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mail_NewMail_ack& operator=(Mail_NewMail_ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Mail_NewMail_ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mail_NewMail_ack* internal_default_instance() {
    return reinterpret_cast<const Mail_NewMail_ack*>(
               &_Mail_NewMail_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Mail_NewMail_ack& a, Mail_NewMail_ack& b) {
    a.Swap(&b);
  }
  inline void Swap(Mail_NewMail_ack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mail_NewMail_ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mail_NewMail_ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Mail_NewMail_ack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Mail_NewMail_ack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Mail_NewMail_ack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mail_NewMail_ack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Mail_NewMail_ack";
  }
  protected:
  explicit Mail_NewMail_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMailFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // optional .PRO.MailNormalItem mail = 2;
  bool has_mail() const;
  private:
  bool _internal_has_mail() const;
  public:
  void clear_mail();
  const ::PRO::MailNormalItem& mail() const;
  PROTOBUF_NODISCARD ::PRO::MailNormalItem* release_mail();
  ::PRO::MailNormalItem* mutable_mail();
  void set_allocated_mail(::PRO::MailNormalItem* mail);
  private:
  const ::PRO::MailNormalItem& _internal_mail() const;
  ::PRO::MailNormalItem* _internal_mutable_mail();
  public:
  void unsafe_arena_set_allocated_mail(
      ::PRO::MailNormalItem* mail);
  ::PRO::MailNormalItem* unsafe_arena_release_mail();

  // int32 result = 1;
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.Mail_NewMail_ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PRO::MailNormalItem* mail_;
  int32_t result_;
  friend struct ::TableStruct_mail_5fsystem_5finternal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Mail_SystemMail_req

// int64 sender_iid = 2;
inline void Mail_SystemMail_req::clear_sender_iid() {
  sender_iid_ = int64_t{0};
}
inline int64_t Mail_SystemMail_req::_internal_sender_iid() const {
  return sender_iid_;
}
inline int64_t Mail_SystemMail_req::sender_iid() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_SystemMail_req.sender_iid)
  return _internal_sender_iid();
}
inline void Mail_SystemMail_req::_internal_set_sender_iid(int64_t value) {
  
  sender_iid_ = value;
}
inline void Mail_SystemMail_req::set_sender_iid(int64_t value) {
  _internal_set_sender_iid(value);
  // @@protoc_insertion_point(field_set:PRO.Mail_SystemMail_req.sender_iid)
}

// int32 attachment = 3;
inline void Mail_SystemMail_req::clear_attachment() {
  attachment_ = 0;
}
inline int32_t Mail_SystemMail_req::_internal_attachment() const {
  return attachment_;
}
inline int32_t Mail_SystemMail_req::attachment() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_SystemMail_req.attachment)
  return _internal_attachment();
}
inline void Mail_SystemMail_req::_internal_set_attachment(int32_t value) {
  
  attachment_ = value;
}
inline void Mail_SystemMail_req::set_attachment(int32_t value) {
  _internal_set_attachment(value);
  // @@protoc_insertion_point(field_set:PRO.Mail_SystemMail_req.attachment)
}

// string attachinfo = 4;
inline void Mail_SystemMail_req::clear_attachinfo() {
  attachinfo_.ClearToEmpty();
}
inline const std::string& Mail_SystemMail_req::attachinfo() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_SystemMail_req.attachinfo)
  return _internal_attachinfo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Mail_SystemMail_req::set_attachinfo(ArgT0&& arg0, ArgT... args) {
 
 attachinfo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.Mail_SystemMail_req.attachinfo)
}
inline std::string* Mail_SystemMail_req::mutable_attachinfo() {
  std::string* _s = _internal_mutable_attachinfo();
  // @@protoc_insertion_point(field_mutable:PRO.Mail_SystemMail_req.attachinfo)
  return _s;
}
inline const std::string& Mail_SystemMail_req::_internal_attachinfo() const {
  return attachinfo_.Get();
}
inline void Mail_SystemMail_req::_internal_set_attachinfo(const std::string& value) {
  
  attachinfo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Mail_SystemMail_req::_internal_mutable_attachinfo() {
  
  return attachinfo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Mail_SystemMail_req::release_attachinfo() {
  // @@protoc_insertion_point(field_release:PRO.Mail_SystemMail_req.attachinfo)
  return attachinfo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Mail_SystemMail_req::set_allocated_attachinfo(std::string* attachinfo) {
  if (attachinfo != nullptr) {
    
  } else {
    
  }
  attachinfo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attachinfo,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (attachinfo_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    attachinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.Mail_SystemMail_req.attachinfo)
}

// string title = 5;
inline void Mail_SystemMail_req::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& Mail_SystemMail_req::title() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_SystemMail_req.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Mail_SystemMail_req::set_title(ArgT0&& arg0, ArgT... args) {
 
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.Mail_SystemMail_req.title)
}
inline std::string* Mail_SystemMail_req::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:PRO.Mail_SystemMail_req.title)
  return _s;
}
inline const std::string& Mail_SystemMail_req::_internal_title() const {
  return title_.Get();
}
inline void Mail_SystemMail_req::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Mail_SystemMail_req::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Mail_SystemMail_req::release_title() {
  // @@protoc_insertion_point(field_release:PRO.Mail_SystemMail_req.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Mail_SystemMail_req::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.Mail_SystemMail_req.title)
}

// string contents = 6;
inline void Mail_SystemMail_req::clear_contents() {
  contents_.ClearToEmpty();
}
inline const std::string& Mail_SystemMail_req::contents() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_SystemMail_req.contents)
  return _internal_contents();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Mail_SystemMail_req::set_contents(ArgT0&& arg0, ArgT... args) {
 
 contents_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.Mail_SystemMail_req.contents)
}
inline std::string* Mail_SystemMail_req::mutable_contents() {
  std::string* _s = _internal_mutable_contents();
  // @@protoc_insertion_point(field_mutable:PRO.Mail_SystemMail_req.contents)
  return _s;
}
inline const std::string& Mail_SystemMail_req::_internal_contents() const {
  return contents_.Get();
}
inline void Mail_SystemMail_req::_internal_set_contents(const std::string& value) {
  
  contents_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Mail_SystemMail_req::_internal_mutable_contents() {
  
  return contents_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Mail_SystemMail_req::release_contents() {
  // @@protoc_insertion_point(field_release:PRO.Mail_SystemMail_req.contents)
  return contents_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Mail_SystemMail_req::set_allocated_contents(std::string* contents) {
  if (contents != nullptr) {
    
  } else {
    
  }
  contents_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contents,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (contents_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    contents_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.Mail_SystemMail_req.contents)
}

// -------------------------------------------------------------------

// Mail_SystemMail_ack

// int32 result = 1;
inline void Mail_SystemMail_ack::clear_result() {
  result_ = 0;
}
inline int32_t Mail_SystemMail_ack::_internal_result() const {
  return result_;
}
inline int32_t Mail_SystemMail_ack::result() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_SystemMail_ack.result)
  return _internal_result();
}
inline void Mail_SystemMail_ack::_internal_set_result(int32_t value) {
  
  result_ = value;
}
inline void Mail_SystemMail_ack::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:PRO.Mail_SystemMail_ack.result)
}

// optional .PRO.MailSystemItem mail = 2;
inline bool Mail_SystemMail_ack::_internal_has_mail() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || mail_ != nullptr);
  return value;
}
inline bool Mail_SystemMail_ack::has_mail() const {
  return _internal_has_mail();
}
inline const ::PRO::MailSystemItem& Mail_SystemMail_ack::_internal_mail() const {
  const ::PRO::MailSystemItem* p = mail_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::MailSystemItem&>(
      ::PRO::_MailSystemItem_default_instance_);
}
inline const ::PRO::MailSystemItem& Mail_SystemMail_ack::mail() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_SystemMail_ack.mail)
  return _internal_mail();
}
inline void Mail_SystemMail_ack::unsafe_arena_set_allocated_mail(
    ::PRO::MailSystemItem* mail) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mail_);
  }
  mail_ = mail;
  if (mail) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.Mail_SystemMail_ack.mail)
}
inline ::PRO::MailSystemItem* Mail_SystemMail_ack::release_mail() {
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::MailSystemItem* temp = mail_;
  mail_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::MailSystemItem* Mail_SystemMail_ack::unsafe_arena_release_mail() {
  // @@protoc_insertion_point(field_release:PRO.Mail_SystemMail_ack.mail)
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::MailSystemItem* temp = mail_;
  mail_ = nullptr;
  return temp;
}
inline ::PRO::MailSystemItem* Mail_SystemMail_ack::_internal_mutable_mail() {
  _has_bits_[0] |= 0x00000001u;
  if (mail_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::MailSystemItem>(GetArenaForAllocation());
    mail_ = p;
  }
  return mail_;
}
inline ::PRO::MailSystemItem* Mail_SystemMail_ack::mutable_mail() {
  ::PRO::MailSystemItem* _msg = _internal_mutable_mail();
  // @@protoc_insertion_point(field_mutable:PRO.Mail_SystemMail_ack.mail)
  return _msg;
}
inline void Mail_SystemMail_ack::set_allocated_mail(::PRO::MailSystemItem* mail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mail_);
  }
  if (mail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mail));
    if (message_arena != submessage_arena) {
      mail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mail, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mail_ = mail;
  // @@protoc_insertion_point(field_set_allocated:PRO.Mail_SystemMail_ack.mail)
}

// -------------------------------------------------------------------

// Mail_SystemMail_ntf

// int64 mailiid = 1;
inline void Mail_SystemMail_ntf::clear_mailiid() {
  mailiid_ = int64_t{0};
}
inline int64_t Mail_SystemMail_ntf::_internal_mailiid() const {
  return mailiid_;
}
inline int64_t Mail_SystemMail_ntf::mailiid() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_SystemMail_ntf.mailiid)
  return _internal_mailiid();
}
inline void Mail_SystemMail_ntf::_internal_set_mailiid(int64_t value) {
  
  mailiid_ = value;
}
inline void Mail_SystemMail_ntf::set_mailiid(int64_t value) {
  _internal_set_mailiid(value);
  // @@protoc_insertion_point(field_set:PRO.Mail_SystemMail_ntf.mailiid)
}

// -------------------------------------------------------------------

// Mail_NewMail_req

// int32 stype = 1;
inline void Mail_NewMail_req::clear_stype() {
  stype_ = 0;
}
inline int32_t Mail_NewMail_req::_internal_stype() const {
  return stype_;
}
inline int32_t Mail_NewMail_req::stype() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_NewMail_req.stype)
  return _internal_stype();
}
inline void Mail_NewMail_req::_internal_set_stype(int32_t value) {
  
  stype_ = value;
}
inline void Mail_NewMail_req::set_stype(int32_t value) {
  _internal_set_stype(value);
  // @@protoc_insertion_point(field_set:PRO.Mail_NewMail_req.stype)
}

// int64 receiver_iid = 2;
inline void Mail_NewMail_req::clear_receiver_iid() {
  receiver_iid_ = int64_t{0};
}
inline int64_t Mail_NewMail_req::_internal_receiver_iid() const {
  return receiver_iid_;
}
inline int64_t Mail_NewMail_req::receiver_iid() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_NewMail_req.receiver_iid)
  return _internal_receiver_iid();
}
inline void Mail_NewMail_req::_internal_set_receiver_iid(int64_t value) {
  
  receiver_iid_ = value;
}
inline void Mail_NewMail_req::set_receiver_iid(int64_t value) {
  _internal_set_receiver_iid(value);
  // @@protoc_insertion_point(field_set:PRO.Mail_NewMail_req.receiver_iid)
}

// int64 sender_iid = 3;
inline void Mail_NewMail_req::clear_sender_iid() {
  sender_iid_ = int64_t{0};
}
inline int64_t Mail_NewMail_req::_internal_sender_iid() const {
  return sender_iid_;
}
inline int64_t Mail_NewMail_req::sender_iid() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_NewMail_req.sender_iid)
  return _internal_sender_iid();
}
inline void Mail_NewMail_req::_internal_set_sender_iid(int64_t value) {
  
  sender_iid_ = value;
}
inline void Mail_NewMail_req::set_sender_iid(int64_t value) {
  _internal_set_sender_iid(value);
  // @@protoc_insertion_point(field_set:PRO.Mail_NewMail_req.sender_iid)
}

// int32 attachment = 4;
inline void Mail_NewMail_req::clear_attachment() {
  attachment_ = 0;
}
inline int32_t Mail_NewMail_req::_internal_attachment() const {
  return attachment_;
}
inline int32_t Mail_NewMail_req::attachment() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_NewMail_req.attachment)
  return _internal_attachment();
}
inline void Mail_NewMail_req::_internal_set_attachment(int32_t value) {
  
  attachment_ = value;
}
inline void Mail_NewMail_req::set_attachment(int32_t value) {
  _internal_set_attachment(value);
  // @@protoc_insertion_point(field_set:PRO.Mail_NewMail_req.attachment)
}

// string attachinfo = 5;
inline void Mail_NewMail_req::clear_attachinfo() {
  attachinfo_.ClearToEmpty();
}
inline const std::string& Mail_NewMail_req::attachinfo() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_NewMail_req.attachinfo)
  return _internal_attachinfo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Mail_NewMail_req::set_attachinfo(ArgT0&& arg0, ArgT... args) {
 
 attachinfo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.Mail_NewMail_req.attachinfo)
}
inline std::string* Mail_NewMail_req::mutable_attachinfo() {
  std::string* _s = _internal_mutable_attachinfo();
  // @@protoc_insertion_point(field_mutable:PRO.Mail_NewMail_req.attachinfo)
  return _s;
}
inline const std::string& Mail_NewMail_req::_internal_attachinfo() const {
  return attachinfo_.Get();
}
inline void Mail_NewMail_req::_internal_set_attachinfo(const std::string& value) {
  
  attachinfo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Mail_NewMail_req::_internal_mutable_attachinfo() {
  
  return attachinfo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Mail_NewMail_req::release_attachinfo() {
  // @@protoc_insertion_point(field_release:PRO.Mail_NewMail_req.attachinfo)
  return attachinfo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Mail_NewMail_req::set_allocated_attachinfo(std::string* attachinfo) {
  if (attachinfo != nullptr) {
    
  } else {
    
  }
  attachinfo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attachinfo,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (attachinfo_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    attachinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.Mail_NewMail_req.attachinfo)
}

// string title = 6;
inline void Mail_NewMail_req::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& Mail_NewMail_req::title() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_NewMail_req.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Mail_NewMail_req::set_title(ArgT0&& arg0, ArgT... args) {
 
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.Mail_NewMail_req.title)
}
inline std::string* Mail_NewMail_req::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:PRO.Mail_NewMail_req.title)
  return _s;
}
inline const std::string& Mail_NewMail_req::_internal_title() const {
  return title_.Get();
}
inline void Mail_NewMail_req::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Mail_NewMail_req::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Mail_NewMail_req::release_title() {
  // @@protoc_insertion_point(field_release:PRO.Mail_NewMail_req.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Mail_NewMail_req::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.Mail_NewMail_req.title)
}

// string contents = 7;
inline void Mail_NewMail_req::clear_contents() {
  contents_.ClearToEmpty();
}
inline const std::string& Mail_NewMail_req::contents() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_NewMail_req.contents)
  return _internal_contents();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Mail_NewMail_req::set_contents(ArgT0&& arg0, ArgT... args) {
 
 contents_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.Mail_NewMail_req.contents)
}
inline std::string* Mail_NewMail_req::mutable_contents() {
  std::string* _s = _internal_mutable_contents();
  // @@protoc_insertion_point(field_mutable:PRO.Mail_NewMail_req.contents)
  return _s;
}
inline const std::string& Mail_NewMail_req::_internal_contents() const {
  return contents_.Get();
}
inline void Mail_NewMail_req::_internal_set_contents(const std::string& value) {
  
  contents_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Mail_NewMail_req::_internal_mutable_contents() {
  
  return contents_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Mail_NewMail_req::release_contents() {
  // @@protoc_insertion_point(field_release:PRO.Mail_NewMail_req.contents)
  return contents_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Mail_NewMail_req::set_allocated_contents(std::string* contents) {
  if (contents != nullptr) {
    
  } else {
    
  }
  contents_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contents,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (contents_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    contents_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.Mail_NewMail_req.contents)
}

// -------------------------------------------------------------------

// Mail_NewMail_ack

// int32 result = 1;
inline void Mail_NewMail_ack::clear_result() {
  result_ = 0;
}
inline int32_t Mail_NewMail_ack::_internal_result() const {
  return result_;
}
inline int32_t Mail_NewMail_ack::result() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_NewMail_ack.result)
  return _internal_result();
}
inline void Mail_NewMail_ack::_internal_set_result(int32_t value) {
  
  result_ = value;
}
inline void Mail_NewMail_ack::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:PRO.Mail_NewMail_ack.result)
}

// optional .PRO.MailNormalItem mail = 2;
inline bool Mail_NewMail_ack::_internal_has_mail() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || mail_ != nullptr);
  return value;
}
inline bool Mail_NewMail_ack::has_mail() const {
  return _internal_has_mail();
}
inline const ::PRO::MailNormalItem& Mail_NewMail_ack::_internal_mail() const {
  const ::PRO::MailNormalItem* p = mail_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::MailNormalItem&>(
      ::PRO::_MailNormalItem_default_instance_);
}
inline const ::PRO::MailNormalItem& Mail_NewMail_ack::mail() const {
  // @@protoc_insertion_point(field_get:PRO.Mail_NewMail_ack.mail)
  return _internal_mail();
}
inline void Mail_NewMail_ack::unsafe_arena_set_allocated_mail(
    ::PRO::MailNormalItem* mail) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mail_);
  }
  mail_ = mail;
  if (mail) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.Mail_NewMail_ack.mail)
}
inline ::PRO::MailNormalItem* Mail_NewMail_ack::release_mail() {
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::MailNormalItem* temp = mail_;
  mail_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::MailNormalItem* Mail_NewMail_ack::unsafe_arena_release_mail() {
  // @@protoc_insertion_point(field_release:PRO.Mail_NewMail_ack.mail)
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::MailNormalItem* temp = mail_;
  mail_ = nullptr;
  return temp;
}
inline ::PRO::MailNormalItem* Mail_NewMail_ack::_internal_mutable_mail() {
  _has_bits_[0] |= 0x00000001u;
  if (mail_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::MailNormalItem>(GetArenaForAllocation());
    mail_ = p;
  }
  return mail_;
}
inline ::PRO::MailNormalItem* Mail_NewMail_ack::mutable_mail() {
  ::PRO::MailNormalItem* _msg = _internal_mutable_mail();
  // @@protoc_insertion_point(field_mutable:PRO.Mail_NewMail_ack.mail)
  return _msg;
}
inline void Mail_NewMail_ack::set_allocated_mail(::PRO::MailNormalItem* mail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mail_);
  }
  if (mail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mail));
    if (message_arena != submessage_arena) {
      mail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mail, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mail_ = mail;
  // @@protoc_insertion_point(field_set_allocated:PRO.Mail_NewMail_ack.mail)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PRO

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mail_5fsystem_5finternal_2eproto

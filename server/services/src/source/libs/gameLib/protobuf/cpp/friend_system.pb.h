// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friend_system.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_friend_5fsystem_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_friend_5fsystem_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "global_internal.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_friend_5fsystem_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_friend_5fsystem_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_friend_5fsystem_2eproto;
namespace PRO {
class Frd_FriendDelete_ack;
struct Frd_FriendDelete_ackDefaultTypeInternal;
extern Frd_FriendDelete_ackDefaultTypeInternal _Frd_FriendDelete_ack_default_instance_;
class Frd_FriendDelete_req;
struct Frd_FriendDelete_reqDefaultTypeInternal;
extern Frd_FriendDelete_reqDefaultTypeInternal _Frd_FriendDelete_req_default_instance_;
class Frd_FriendInvite_ack;
struct Frd_FriendInvite_ackDefaultTypeInternal;
extern Frd_FriendInvite_ackDefaultTypeInternal _Frd_FriendInvite_ack_default_instance_;
class Frd_FriendInvite_req;
struct Frd_FriendInvite_reqDefaultTypeInternal;
extern Frd_FriendInvite_reqDefaultTypeInternal _Frd_FriendInvite_req_default_instance_;
class Frd_FriendList_ack;
struct Frd_FriendList_ackDefaultTypeInternal;
extern Frd_FriendList_ackDefaultTypeInternal _Frd_FriendList_ack_default_instance_;
class Frd_FriendList_req;
struct Frd_FriendList_reqDefaultTypeInternal;
extern Frd_FriendList_reqDefaultTypeInternal _Frd_FriendList_req_default_instance_;
class Frd_InviteConfirm_ack;
struct Frd_InviteConfirm_ackDefaultTypeInternal;
extern Frd_InviteConfirm_ackDefaultTypeInternal _Frd_InviteConfirm_ack_default_instance_;
class Frd_InviteConfirm_req;
struct Frd_InviteConfirm_reqDefaultTypeInternal;
extern Frd_InviteConfirm_reqDefaultTypeInternal _Frd_InviteConfirm_req_default_instance_;
}  // namespace PRO
PROTOBUF_NAMESPACE_OPEN
template<> ::PRO::Frd_FriendDelete_ack* Arena::CreateMaybeMessage<::PRO::Frd_FriendDelete_ack>(Arena*);
template<> ::PRO::Frd_FriendDelete_req* Arena::CreateMaybeMessage<::PRO::Frd_FriendDelete_req>(Arena*);
template<> ::PRO::Frd_FriendInvite_ack* Arena::CreateMaybeMessage<::PRO::Frd_FriendInvite_ack>(Arena*);
template<> ::PRO::Frd_FriendInvite_req* Arena::CreateMaybeMessage<::PRO::Frd_FriendInvite_req>(Arena*);
template<> ::PRO::Frd_FriendList_ack* Arena::CreateMaybeMessage<::PRO::Frd_FriendList_ack>(Arena*);
template<> ::PRO::Frd_FriendList_req* Arena::CreateMaybeMessage<::PRO::Frd_FriendList_req>(Arena*);
template<> ::PRO::Frd_InviteConfirm_ack* Arena::CreateMaybeMessage<::PRO::Frd_InviteConfirm_ack>(Arena*);
template<> ::PRO::Frd_InviteConfirm_req* Arena::CreateMaybeMessage<::PRO::Frd_InviteConfirm_req>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PRO {

// ===================================================================

class Frd_FriendList_req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Frd_FriendList_req) */ {
 public:
  inline Frd_FriendList_req() : Frd_FriendList_req(nullptr) {}
  ~Frd_FriendList_req() override;
  explicit constexpr Frd_FriendList_req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Frd_FriendList_req(const Frd_FriendList_req& from);
  Frd_FriendList_req(Frd_FriendList_req&& from) noexcept
    : Frd_FriendList_req() {
    *this = ::std::move(from);
  }

  inline Frd_FriendList_req& operator=(const Frd_FriendList_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frd_FriendList_req& operator=(Frd_FriendList_req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Frd_FriendList_req& default_instance() {
    return *internal_default_instance();
  }
  static inline const Frd_FriendList_req* internal_default_instance() {
    return reinterpret_cast<const Frd_FriendList_req*>(
               &_Frd_FriendList_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Frd_FriendList_req& a, Frd_FriendList_req& b) {
    a.Swap(&b);
  }
  inline void Swap(Frd_FriendList_req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frd_FriendList_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Frd_FriendList_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Frd_FriendList_req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Frd_FriendList_req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Frd_FriendList_req& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frd_FriendList_req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Frd_FriendList_req";
  }
  protected:
  explicit Frd_FriendList_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 10,
    kUtokenFieldNumber = 1,
    kLastInviteFieldNumber = 2,
    kFriendindexFieldNumber = 3,
    kNextFieldNumber = 4,
    kNumFieldNumber = 5,
  };
  // string nickname = 10;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // optional .PRO.UserToken utoken = 1;
  bool has_utoken() const;
  private:
  bool _internal_has_utoken() const;
  public:
  void clear_utoken();
  const ::PRO::UserToken& utoken() const;
  PROTOBUF_NODISCARD ::PRO::UserToken* release_utoken();
  ::PRO::UserToken* mutable_utoken();
  void set_allocated_utoken(::PRO::UserToken* utoken);
  private:
  const ::PRO::UserToken& _internal_utoken() const;
  ::PRO::UserToken* _internal_mutable_utoken();
  public:
  void unsafe_arena_set_allocated_utoken(
      ::PRO::UserToken* utoken);
  ::PRO::UserToken* unsafe_arena_release_utoken();

  // int64 last_invite = 2;
  void clear_last_invite();
  int64_t last_invite() const;
  void set_last_invite(int64_t value);
  private:
  int64_t _internal_last_invite() const;
  void _internal_set_last_invite(int64_t value);
  public:

  // int32 friendindex = 3;
  void clear_friendindex();
  int32_t friendindex() const;
  void set_friendindex(int32_t value);
  private:
  int32_t _internal_friendindex() const;
  void _internal_set_friendindex(int32_t value);
  public:

  // bool next = 4;
  void clear_next();
  bool next() const;
  void set_next(bool value);
  private:
  bool _internal_next() const;
  void _internal_set_next(bool value);
  public:

  // int32 num = 5;
  void clear_num();
  int32_t num() const;
  void set_num(int32_t value);
  private:
  int32_t _internal_num() const;
  void _internal_set_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.Frd_FriendList_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PRO::UserToken* utoken_;
  int64_t last_invite_;
  int32_t friendindex_;
  bool next_;
  int32_t num_;
  friend struct ::TableStruct_friend_5fsystem_2eproto;
};
// -------------------------------------------------------------------

class Frd_FriendList_ack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Frd_FriendList_ack) */ {
 public:
  inline Frd_FriendList_ack() : Frd_FriendList_ack(nullptr) {}
  ~Frd_FriendList_ack() override;
  explicit constexpr Frd_FriendList_ack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Frd_FriendList_ack(const Frd_FriendList_ack& from);
  Frd_FriendList_ack(Frd_FriendList_ack&& from) noexcept
    : Frd_FriendList_ack() {
    *this = ::std::move(from);
  }

  inline Frd_FriendList_ack& operator=(const Frd_FriendList_ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frd_FriendList_ack& operator=(Frd_FriendList_ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Frd_FriendList_ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Frd_FriendList_ack* internal_default_instance() {
    return reinterpret_cast<const Frd_FriendList_ack*>(
               &_Frd_FriendList_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Frd_FriendList_ack& a, Frd_FriendList_ack& b) {
    a.Swap(&b);
  }
  inline void Swap(Frd_FriendList_ack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frd_FriendList_ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Frd_FriendList_ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Frd_FriendList_ack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Frd_FriendList_ack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Frd_FriendList_ack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frd_FriendList_ack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Frd_FriendList_ack";
  }
  protected:
  explicit Frd_FriendList_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvitesFieldNumber = 2,
    kFriendsFieldNumber = 4,
    kUtokenFieldNumber = 1,
    kTotleinviteFieldNumber = 3,
    kTotlefriendFieldNumber = 5,
    kNextFieldNumber = 6,
  };
  // repeated .PRO.FriendInviteItem invites = 2;
  int invites_size() const;
  private:
  int _internal_invites_size() const;
  public:
  void clear_invites();
  ::PRO::FriendInviteItem* mutable_invites(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::FriendInviteItem >*
      mutable_invites();
  private:
  const ::PRO::FriendInviteItem& _internal_invites(int index) const;
  ::PRO::FriendInviteItem* _internal_add_invites();
  public:
  const ::PRO::FriendInviteItem& invites(int index) const;
  ::PRO::FriendInviteItem* add_invites();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::FriendInviteItem >&
      invites() const;

  // repeated .PRO.FriendRelation friends = 4;
  int friends_size() const;
  private:
  int _internal_friends_size() const;
  public:
  void clear_friends();
  ::PRO::FriendRelation* mutable_friends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::FriendRelation >*
      mutable_friends();
  private:
  const ::PRO::FriendRelation& _internal_friends(int index) const;
  ::PRO::FriendRelation* _internal_add_friends();
  public:
  const ::PRO::FriendRelation& friends(int index) const;
  ::PRO::FriendRelation* add_friends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::FriendRelation >&
      friends() const;

  // optional .PRO.UserToken utoken = 1;
  bool has_utoken() const;
  private:
  bool _internal_has_utoken() const;
  public:
  void clear_utoken();
  const ::PRO::UserToken& utoken() const;
  PROTOBUF_NODISCARD ::PRO::UserToken* release_utoken();
  ::PRO::UserToken* mutable_utoken();
  void set_allocated_utoken(::PRO::UserToken* utoken);
  private:
  const ::PRO::UserToken& _internal_utoken() const;
  ::PRO::UserToken* _internal_mutable_utoken();
  public:
  void unsafe_arena_set_allocated_utoken(
      ::PRO::UserToken* utoken);
  ::PRO::UserToken* unsafe_arena_release_utoken();

  // int32 totleinvite = 3;
  void clear_totleinvite();
  int32_t totleinvite() const;
  void set_totleinvite(int32_t value);
  private:
  int32_t _internal_totleinvite() const;
  void _internal_set_totleinvite(int32_t value);
  public:

  // int32 totlefriend = 5;
  void clear_totlefriend();
  int32_t totlefriend() const;
  void set_totlefriend(int32_t value);
  private:
  int32_t _internal_totlefriend() const;
  void _internal_set_totlefriend(int32_t value);
  public:

  // bool next = 6;
  void clear_next();
  bool next() const;
  void set_next(bool value);
  private:
  bool _internal_next() const;
  void _internal_set_next(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.Frd_FriendList_ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::FriendInviteItem > invites_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::FriendRelation > friends_;
  ::PRO::UserToken* utoken_;
  int32_t totleinvite_;
  int32_t totlefriend_;
  bool next_;
  friend struct ::TableStruct_friend_5fsystem_2eproto;
};
// -------------------------------------------------------------------

class Frd_FriendInvite_req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Frd_FriendInvite_req) */ {
 public:
  inline Frd_FriendInvite_req() : Frd_FriendInvite_req(nullptr) {}
  ~Frd_FriendInvite_req() override;
  explicit constexpr Frd_FriendInvite_req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Frd_FriendInvite_req(const Frd_FriendInvite_req& from);
  Frd_FriendInvite_req(Frd_FriendInvite_req&& from) noexcept
    : Frd_FriendInvite_req() {
    *this = ::std::move(from);
  }

  inline Frd_FriendInvite_req& operator=(const Frd_FriendInvite_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frd_FriendInvite_req& operator=(Frd_FriendInvite_req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Frd_FriendInvite_req& default_instance() {
    return *internal_default_instance();
  }
  static inline const Frd_FriendInvite_req* internal_default_instance() {
    return reinterpret_cast<const Frd_FriendInvite_req*>(
               &_Frd_FriendInvite_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Frd_FriendInvite_req& a, Frd_FriendInvite_req& b) {
    a.Swap(&b);
  }
  inline void Swap(Frd_FriendInvite_req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frd_FriendInvite_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Frd_FriendInvite_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Frd_FriendInvite_req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Frd_FriendInvite_req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Frd_FriendInvite_req& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frd_FriendInvite_req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Frd_FriendInvite_req";
  }
  protected:
  explicit Frd_FriendInvite_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUtokenFieldNumber = 1,
    kInviteIidFieldNumber = 2,
  };
  // optional .PRO.UserToken utoken = 1;
  bool has_utoken() const;
  private:
  bool _internal_has_utoken() const;
  public:
  void clear_utoken();
  const ::PRO::UserToken& utoken() const;
  PROTOBUF_NODISCARD ::PRO::UserToken* release_utoken();
  ::PRO::UserToken* mutable_utoken();
  void set_allocated_utoken(::PRO::UserToken* utoken);
  private:
  const ::PRO::UserToken& _internal_utoken() const;
  ::PRO::UserToken* _internal_mutable_utoken();
  public:
  void unsafe_arena_set_allocated_utoken(
      ::PRO::UserToken* utoken);
  ::PRO::UserToken* unsafe_arena_release_utoken();

  // int64 invite_iid = 2;
  void clear_invite_iid();
  int64_t invite_iid() const;
  void set_invite_iid(int64_t value);
  private:
  int64_t _internal_invite_iid() const;
  void _internal_set_invite_iid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.Frd_FriendInvite_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PRO::UserToken* utoken_;
  int64_t invite_iid_;
  friend struct ::TableStruct_friend_5fsystem_2eproto;
};
// -------------------------------------------------------------------

class Frd_FriendInvite_ack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Frd_FriendInvite_ack) */ {
 public:
  inline Frd_FriendInvite_ack() : Frd_FriendInvite_ack(nullptr) {}
  ~Frd_FriendInvite_ack() override;
  explicit constexpr Frd_FriendInvite_ack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Frd_FriendInvite_ack(const Frd_FriendInvite_ack& from);
  Frd_FriendInvite_ack(Frd_FriendInvite_ack&& from) noexcept
    : Frd_FriendInvite_ack() {
    *this = ::std::move(from);
  }

  inline Frd_FriendInvite_ack& operator=(const Frd_FriendInvite_ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frd_FriendInvite_ack& operator=(Frd_FriendInvite_ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Frd_FriendInvite_ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Frd_FriendInvite_ack* internal_default_instance() {
    return reinterpret_cast<const Frd_FriendInvite_ack*>(
               &_Frd_FriendInvite_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Frd_FriendInvite_ack& a, Frd_FriendInvite_ack& b) {
    a.Swap(&b);
  }
  inline void Swap(Frd_FriendInvite_ack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frd_FriendInvite_ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Frd_FriendInvite_ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Frd_FriendInvite_ack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Frd_FriendInvite_ack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Frd_FriendInvite_ack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frd_FriendInvite_ack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Frd_FriendInvite_ack";
  }
  protected:
  explicit Frd_FriendInvite_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUtokenFieldNumber = 1,
    kInviteFieldNumber = 4,
    kInviteIidFieldNumber = 2,
    kResultFieldNumber = 3,
  };
  // optional .PRO.UserToken utoken = 1;
  bool has_utoken() const;
  private:
  bool _internal_has_utoken() const;
  public:
  void clear_utoken();
  const ::PRO::UserToken& utoken() const;
  PROTOBUF_NODISCARD ::PRO::UserToken* release_utoken();
  ::PRO::UserToken* mutable_utoken();
  void set_allocated_utoken(::PRO::UserToken* utoken);
  private:
  const ::PRO::UserToken& _internal_utoken() const;
  ::PRO::UserToken* _internal_mutable_utoken();
  public:
  void unsafe_arena_set_allocated_utoken(
      ::PRO::UserToken* utoken);
  ::PRO::UserToken* unsafe_arena_release_utoken();

  // optional .PRO.FriendInviteItem invite = 4;
  bool has_invite() const;
  private:
  bool _internal_has_invite() const;
  public:
  void clear_invite();
  const ::PRO::FriendInviteItem& invite() const;
  PROTOBUF_NODISCARD ::PRO::FriendInviteItem* release_invite();
  ::PRO::FriendInviteItem* mutable_invite();
  void set_allocated_invite(::PRO::FriendInviteItem* invite);
  private:
  const ::PRO::FriendInviteItem& _internal_invite() const;
  ::PRO::FriendInviteItem* _internal_mutable_invite();
  public:
  void unsafe_arena_set_allocated_invite(
      ::PRO::FriendInviteItem* invite);
  ::PRO::FriendInviteItem* unsafe_arena_release_invite();

  // int64 invite_iid = 2;
  void clear_invite_iid();
  int64_t invite_iid() const;
  void set_invite_iid(int64_t value);
  private:
  int64_t _internal_invite_iid() const;
  void _internal_set_invite_iid(int64_t value);
  public:

  // int32 result = 3;
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.Frd_FriendInvite_ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PRO::UserToken* utoken_;
  ::PRO::FriendInviteItem* invite_;
  int64_t invite_iid_;
  int32_t result_;
  friend struct ::TableStruct_friend_5fsystem_2eproto;
};
// -------------------------------------------------------------------

class Frd_InviteConfirm_req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Frd_InviteConfirm_req) */ {
 public:
  inline Frd_InviteConfirm_req() : Frd_InviteConfirm_req(nullptr) {}
  ~Frd_InviteConfirm_req() override;
  explicit constexpr Frd_InviteConfirm_req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Frd_InviteConfirm_req(const Frd_InviteConfirm_req& from);
  Frd_InviteConfirm_req(Frd_InviteConfirm_req&& from) noexcept
    : Frd_InviteConfirm_req() {
    *this = ::std::move(from);
  }

  inline Frd_InviteConfirm_req& operator=(const Frd_InviteConfirm_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frd_InviteConfirm_req& operator=(Frd_InviteConfirm_req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Frd_InviteConfirm_req& default_instance() {
    return *internal_default_instance();
  }
  static inline const Frd_InviteConfirm_req* internal_default_instance() {
    return reinterpret_cast<const Frd_InviteConfirm_req*>(
               &_Frd_InviteConfirm_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Frd_InviteConfirm_req& a, Frd_InviteConfirm_req& b) {
    a.Swap(&b);
  }
  inline void Swap(Frd_InviteConfirm_req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frd_InviteConfirm_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Frd_InviteConfirm_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Frd_InviteConfirm_req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Frd_InviteConfirm_req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Frd_InviteConfirm_req& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frd_InviteConfirm_req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Frd_InviteConfirm_req";
  }
  protected:
  explicit Frd_InviteConfirm_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUtokenFieldNumber = 1,
    kIidFieldNumber = 2,
    kAgreeFieldNumber = 3,
  };
  // optional .PRO.UserToken utoken = 1;
  bool has_utoken() const;
  private:
  bool _internal_has_utoken() const;
  public:
  void clear_utoken();
  const ::PRO::UserToken& utoken() const;
  PROTOBUF_NODISCARD ::PRO::UserToken* release_utoken();
  ::PRO::UserToken* mutable_utoken();
  void set_allocated_utoken(::PRO::UserToken* utoken);
  private:
  const ::PRO::UserToken& _internal_utoken() const;
  ::PRO::UserToken* _internal_mutable_utoken();
  public:
  void unsafe_arena_set_allocated_utoken(
      ::PRO::UserToken* utoken);
  ::PRO::UserToken* unsafe_arena_release_utoken();

  // int64 iid = 2;
  void clear_iid();
  int64_t iid() const;
  void set_iid(int64_t value);
  private:
  int64_t _internal_iid() const;
  void _internal_set_iid(int64_t value);
  public:

  // bool agree = 3;
  void clear_agree();
  bool agree() const;
  void set_agree(bool value);
  private:
  bool _internal_agree() const;
  void _internal_set_agree(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.Frd_InviteConfirm_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PRO::UserToken* utoken_;
  int64_t iid_;
  bool agree_;
  friend struct ::TableStruct_friend_5fsystem_2eproto;
};
// -------------------------------------------------------------------

class Frd_InviteConfirm_ack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Frd_InviteConfirm_ack) */ {
 public:
  inline Frd_InviteConfirm_ack() : Frd_InviteConfirm_ack(nullptr) {}
  ~Frd_InviteConfirm_ack() override;
  explicit constexpr Frd_InviteConfirm_ack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Frd_InviteConfirm_ack(const Frd_InviteConfirm_ack& from);
  Frd_InviteConfirm_ack(Frd_InviteConfirm_ack&& from) noexcept
    : Frd_InviteConfirm_ack() {
    *this = ::std::move(from);
  }

  inline Frd_InviteConfirm_ack& operator=(const Frd_InviteConfirm_ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frd_InviteConfirm_ack& operator=(Frd_InviteConfirm_ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Frd_InviteConfirm_ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Frd_InviteConfirm_ack* internal_default_instance() {
    return reinterpret_cast<const Frd_InviteConfirm_ack*>(
               &_Frd_InviteConfirm_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Frd_InviteConfirm_ack& a, Frd_InviteConfirm_ack& b) {
    a.Swap(&b);
  }
  inline void Swap(Frd_InviteConfirm_ack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frd_InviteConfirm_ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Frd_InviteConfirm_ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Frd_InviteConfirm_ack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Frd_InviteConfirm_ack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Frd_InviteConfirm_ack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frd_InviteConfirm_ack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Frd_InviteConfirm_ack";
  }
  protected:
  explicit Frd_InviteConfirm_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUtokenFieldNumber = 1,
    kFriendFieldNumber = 5,
    kIidFieldNumber = 2,
    kAgreeFieldNumber = 3,
    kResultFieldNumber = 4,
  };
  // optional .PRO.UserToken utoken = 1;
  bool has_utoken() const;
  private:
  bool _internal_has_utoken() const;
  public:
  void clear_utoken();
  const ::PRO::UserToken& utoken() const;
  PROTOBUF_NODISCARD ::PRO::UserToken* release_utoken();
  ::PRO::UserToken* mutable_utoken();
  void set_allocated_utoken(::PRO::UserToken* utoken);
  private:
  const ::PRO::UserToken& _internal_utoken() const;
  ::PRO::UserToken* _internal_mutable_utoken();
  public:
  void unsafe_arena_set_allocated_utoken(
      ::PRO::UserToken* utoken);
  ::PRO::UserToken* unsafe_arena_release_utoken();

  // optional .PRO.FriendRelation friend = 5;
  bool has_friend_() const;
  private:
  bool _internal_has_friend_() const;
  public:
  void clear_friend_();
  const ::PRO::FriendRelation& friend_() const;
  PROTOBUF_NODISCARD ::PRO::FriendRelation* release_friend_();
  ::PRO::FriendRelation* mutable_friend_();
  void set_allocated_friend_(::PRO::FriendRelation* friend_);
  private:
  const ::PRO::FriendRelation& _internal_friend_() const;
  ::PRO::FriendRelation* _internal_mutable_friend_();
  public:
  void unsafe_arena_set_allocated_friend_(
      ::PRO::FriendRelation* friend_);
  ::PRO::FriendRelation* unsafe_arena_release_friend_();

  // int64 iid = 2;
  void clear_iid();
  int64_t iid() const;
  void set_iid(int64_t value);
  private:
  int64_t _internal_iid() const;
  void _internal_set_iid(int64_t value);
  public:

  // bool agree = 3;
  void clear_agree();
  bool agree() const;
  void set_agree(bool value);
  private:
  bool _internal_agree() const;
  void _internal_set_agree(bool value);
  public:

  // int32 result = 4;
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.Frd_InviteConfirm_ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PRO::UserToken* utoken_;
  ::PRO::FriendRelation* friend__;
  int64_t iid_;
  bool agree_;
  int32_t result_;
  friend struct ::TableStruct_friend_5fsystem_2eproto;
};
// -------------------------------------------------------------------

class Frd_FriendDelete_req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Frd_FriendDelete_req) */ {
 public:
  inline Frd_FriendDelete_req() : Frd_FriendDelete_req(nullptr) {}
  ~Frd_FriendDelete_req() override;
  explicit constexpr Frd_FriendDelete_req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Frd_FriendDelete_req(const Frd_FriendDelete_req& from);
  Frd_FriendDelete_req(Frd_FriendDelete_req&& from) noexcept
    : Frd_FriendDelete_req() {
    *this = ::std::move(from);
  }

  inline Frd_FriendDelete_req& operator=(const Frd_FriendDelete_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frd_FriendDelete_req& operator=(Frd_FriendDelete_req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Frd_FriendDelete_req& default_instance() {
    return *internal_default_instance();
  }
  static inline const Frd_FriendDelete_req* internal_default_instance() {
    return reinterpret_cast<const Frd_FriendDelete_req*>(
               &_Frd_FriendDelete_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Frd_FriendDelete_req& a, Frd_FriendDelete_req& b) {
    a.Swap(&b);
  }
  inline void Swap(Frd_FriendDelete_req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frd_FriendDelete_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Frd_FriendDelete_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Frd_FriendDelete_req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Frd_FriendDelete_req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Frd_FriendDelete_req& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frd_FriendDelete_req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Frd_FriendDelete_req";
  }
  protected:
  explicit Frd_FriendDelete_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUtokenFieldNumber = 1,
    kFriendiidFieldNumber = 2,
  };
  // optional .PRO.UserToken utoken = 1;
  bool has_utoken() const;
  private:
  bool _internal_has_utoken() const;
  public:
  void clear_utoken();
  const ::PRO::UserToken& utoken() const;
  PROTOBUF_NODISCARD ::PRO::UserToken* release_utoken();
  ::PRO::UserToken* mutable_utoken();
  void set_allocated_utoken(::PRO::UserToken* utoken);
  private:
  const ::PRO::UserToken& _internal_utoken() const;
  ::PRO::UserToken* _internal_mutable_utoken();
  public:
  void unsafe_arena_set_allocated_utoken(
      ::PRO::UserToken* utoken);
  ::PRO::UserToken* unsafe_arena_release_utoken();

  // int64 friendiid = 2;
  void clear_friendiid();
  int64_t friendiid() const;
  void set_friendiid(int64_t value);
  private:
  int64_t _internal_friendiid() const;
  void _internal_set_friendiid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.Frd_FriendDelete_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PRO::UserToken* utoken_;
  int64_t friendiid_;
  friend struct ::TableStruct_friend_5fsystem_2eproto;
};
// -------------------------------------------------------------------

class Frd_FriendDelete_ack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.Frd_FriendDelete_ack) */ {
 public:
  inline Frd_FriendDelete_ack() : Frd_FriendDelete_ack(nullptr) {}
  ~Frd_FriendDelete_ack() override;
  explicit constexpr Frd_FriendDelete_ack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Frd_FriendDelete_ack(const Frd_FriendDelete_ack& from);
  Frd_FriendDelete_ack(Frd_FriendDelete_ack&& from) noexcept
    : Frd_FriendDelete_ack() {
    *this = ::std::move(from);
  }

  inline Frd_FriendDelete_ack& operator=(const Frd_FriendDelete_ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frd_FriendDelete_ack& operator=(Frd_FriendDelete_ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Frd_FriendDelete_ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Frd_FriendDelete_ack* internal_default_instance() {
    return reinterpret_cast<const Frd_FriendDelete_ack*>(
               &_Frd_FriendDelete_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Frd_FriendDelete_ack& a, Frd_FriendDelete_ack& b) {
    a.Swap(&b);
  }
  inline void Swap(Frd_FriendDelete_ack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frd_FriendDelete_ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Frd_FriendDelete_ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Frd_FriendDelete_ack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Frd_FriendDelete_ack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Frd_FriendDelete_ack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frd_FriendDelete_ack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.Frd_FriendDelete_ack";
  }
  protected:
  explicit Frd_FriendDelete_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUtokenFieldNumber = 1,
    kFriendiidFieldNumber = 2,
    kResultFieldNumber = 3,
  };
  // optional .PRO.UserToken utoken = 1;
  bool has_utoken() const;
  private:
  bool _internal_has_utoken() const;
  public:
  void clear_utoken();
  const ::PRO::UserToken& utoken() const;
  PROTOBUF_NODISCARD ::PRO::UserToken* release_utoken();
  ::PRO::UserToken* mutable_utoken();
  void set_allocated_utoken(::PRO::UserToken* utoken);
  private:
  const ::PRO::UserToken& _internal_utoken() const;
  ::PRO::UserToken* _internal_mutable_utoken();
  public:
  void unsafe_arena_set_allocated_utoken(
      ::PRO::UserToken* utoken);
  ::PRO::UserToken* unsafe_arena_release_utoken();

  // int64 friendiid = 2;
  void clear_friendiid();
  int64_t friendiid() const;
  void set_friendiid(int64_t value);
  private:
  int64_t _internal_friendiid() const;
  void _internal_set_friendiid(int64_t value);
  public:

  // int32 result = 3;
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.Frd_FriendDelete_ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PRO::UserToken* utoken_;
  int64_t friendiid_;
  int32_t result_;
  friend struct ::TableStruct_friend_5fsystem_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Frd_FriendList_req

// optional .PRO.UserToken utoken = 1;
inline bool Frd_FriendList_req::_internal_has_utoken() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || utoken_ != nullptr);
  return value;
}
inline bool Frd_FriendList_req::has_utoken() const {
  return _internal_has_utoken();
}
inline const ::PRO::UserToken& Frd_FriendList_req::_internal_utoken() const {
  const ::PRO::UserToken* p = utoken_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::UserToken&>(
      ::PRO::_UserToken_default_instance_);
}
inline const ::PRO::UserToken& Frd_FriendList_req::utoken() const {
  // @@protoc_insertion_point(field_get:PRO.Frd_FriendList_req.utoken)
  return _internal_utoken();
}
inline void Frd_FriendList_req::unsafe_arena_set_allocated_utoken(
    ::PRO::UserToken* utoken) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  utoken_ = utoken;
  if (utoken) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.Frd_FriendList_req.utoken)
}
inline ::PRO::UserToken* Frd_FriendList_req::release_utoken() {
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::UserToken* Frd_FriendList_req::unsafe_arena_release_utoken() {
  // @@protoc_insertion_point(field_release:PRO.Frd_FriendList_req.utoken)
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
  return temp;
}
inline ::PRO::UserToken* Frd_FriendList_req::_internal_mutable_utoken() {
  _has_bits_[0] |= 0x00000001u;
  if (utoken_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::UserToken>(GetArenaForAllocation());
    utoken_ = p;
  }
  return utoken_;
}
inline ::PRO::UserToken* Frd_FriendList_req::mutable_utoken() {
  ::PRO::UserToken* _msg = _internal_mutable_utoken();
  // @@protoc_insertion_point(field_mutable:PRO.Frd_FriendList_req.utoken)
  return _msg;
}
inline void Frd_FriendList_req::set_allocated_utoken(::PRO::UserToken* utoken) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  if (utoken) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken));
    if (message_arena != submessage_arena) {
      utoken = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, utoken, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  utoken_ = utoken;
  // @@protoc_insertion_point(field_set_allocated:PRO.Frd_FriendList_req.utoken)
}

// int64 last_invite = 2;
inline void Frd_FriendList_req::clear_last_invite() {
  last_invite_ = int64_t{0};
}
inline int64_t Frd_FriendList_req::_internal_last_invite() const {
  return last_invite_;
}
inline int64_t Frd_FriendList_req::last_invite() const {
  // @@protoc_insertion_point(field_get:PRO.Frd_FriendList_req.last_invite)
  return _internal_last_invite();
}
inline void Frd_FriendList_req::_internal_set_last_invite(int64_t value) {
  
  last_invite_ = value;
}
inline void Frd_FriendList_req::set_last_invite(int64_t value) {
  _internal_set_last_invite(value);
  // @@protoc_insertion_point(field_set:PRO.Frd_FriendList_req.last_invite)
}

// int32 friendindex = 3;
inline void Frd_FriendList_req::clear_friendindex() {
  friendindex_ = 0;
}
inline int32_t Frd_FriendList_req::_internal_friendindex() const {
  return friendindex_;
}
inline int32_t Frd_FriendList_req::friendindex() const {
  // @@protoc_insertion_point(field_get:PRO.Frd_FriendList_req.friendindex)
  return _internal_friendindex();
}
inline void Frd_FriendList_req::_internal_set_friendindex(int32_t value) {
  
  friendindex_ = value;
}
inline void Frd_FriendList_req::set_friendindex(int32_t value) {
  _internal_set_friendindex(value);
  // @@protoc_insertion_point(field_set:PRO.Frd_FriendList_req.friendindex)
}

// bool next = 4;
inline void Frd_FriendList_req::clear_next() {
  next_ = false;
}
inline bool Frd_FriendList_req::_internal_next() const {
  return next_;
}
inline bool Frd_FriendList_req::next() const {
  // @@protoc_insertion_point(field_get:PRO.Frd_FriendList_req.next)
  return _internal_next();
}
inline void Frd_FriendList_req::_internal_set_next(bool value) {
  
  next_ = value;
}
inline void Frd_FriendList_req::set_next(bool value) {
  _internal_set_next(value);
  // @@protoc_insertion_point(field_set:PRO.Frd_FriendList_req.next)
}

// int32 num = 5;
inline void Frd_FriendList_req::clear_num() {
  num_ = 0;
}
inline int32_t Frd_FriendList_req::_internal_num() const {
  return num_;
}
inline int32_t Frd_FriendList_req::num() const {
  // @@protoc_insertion_point(field_get:PRO.Frd_FriendList_req.num)
  return _internal_num();
}
inline void Frd_FriendList_req::_internal_set_num(int32_t value) {
  
  num_ = value;
}
inline void Frd_FriendList_req::set_num(int32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:PRO.Frd_FriendList_req.num)
}

// string nickname = 10;
inline void Frd_FriendList_req::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& Frd_FriendList_req::nickname() const {
  // @@protoc_insertion_point(field_get:PRO.Frd_FriendList_req.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Frd_FriendList_req::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.Frd_FriendList_req.nickname)
}
inline std::string* Frd_FriendList_req::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:PRO.Frd_FriendList_req.nickname)
  return _s;
}
inline const std::string& Frd_FriendList_req::_internal_nickname() const {
  return nickname_.Get();
}
inline void Frd_FriendList_req::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Frd_FriendList_req::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Frd_FriendList_req::release_nickname() {
  // @@protoc_insertion_point(field_release:PRO.Frd_FriendList_req.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Frd_FriendList_req::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nickname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.Frd_FriendList_req.nickname)
}

// -------------------------------------------------------------------

// Frd_FriendList_ack

// optional .PRO.UserToken utoken = 1;
inline bool Frd_FriendList_ack::_internal_has_utoken() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || utoken_ != nullptr);
  return value;
}
inline bool Frd_FriendList_ack::has_utoken() const {
  return _internal_has_utoken();
}
inline const ::PRO::UserToken& Frd_FriendList_ack::_internal_utoken() const {
  const ::PRO::UserToken* p = utoken_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::UserToken&>(
      ::PRO::_UserToken_default_instance_);
}
inline const ::PRO::UserToken& Frd_FriendList_ack::utoken() const {
  // @@protoc_insertion_point(field_get:PRO.Frd_FriendList_ack.utoken)
  return _internal_utoken();
}
inline void Frd_FriendList_ack::unsafe_arena_set_allocated_utoken(
    ::PRO::UserToken* utoken) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  utoken_ = utoken;
  if (utoken) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.Frd_FriendList_ack.utoken)
}
inline ::PRO::UserToken* Frd_FriendList_ack::release_utoken() {
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::UserToken* Frd_FriendList_ack::unsafe_arena_release_utoken() {
  // @@protoc_insertion_point(field_release:PRO.Frd_FriendList_ack.utoken)
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
  return temp;
}
inline ::PRO::UserToken* Frd_FriendList_ack::_internal_mutable_utoken() {
  _has_bits_[0] |= 0x00000001u;
  if (utoken_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::UserToken>(GetArenaForAllocation());
    utoken_ = p;
  }
  return utoken_;
}
inline ::PRO::UserToken* Frd_FriendList_ack::mutable_utoken() {
  ::PRO::UserToken* _msg = _internal_mutable_utoken();
  // @@protoc_insertion_point(field_mutable:PRO.Frd_FriendList_ack.utoken)
  return _msg;
}
inline void Frd_FriendList_ack::set_allocated_utoken(::PRO::UserToken* utoken) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  if (utoken) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken));
    if (message_arena != submessage_arena) {
      utoken = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, utoken, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  utoken_ = utoken;
  // @@protoc_insertion_point(field_set_allocated:PRO.Frd_FriendList_ack.utoken)
}

// repeated .PRO.FriendInviteItem invites = 2;
inline int Frd_FriendList_ack::_internal_invites_size() const {
  return invites_.size();
}
inline int Frd_FriendList_ack::invites_size() const {
  return _internal_invites_size();
}
inline ::PRO::FriendInviteItem* Frd_FriendList_ack::mutable_invites(int index) {
  // @@protoc_insertion_point(field_mutable:PRO.Frd_FriendList_ack.invites)
  return invites_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::FriendInviteItem >*
Frd_FriendList_ack::mutable_invites() {
  // @@protoc_insertion_point(field_mutable_list:PRO.Frd_FriendList_ack.invites)
  return &invites_;
}
inline const ::PRO::FriendInviteItem& Frd_FriendList_ack::_internal_invites(int index) const {
  return invites_.Get(index);
}
inline const ::PRO::FriendInviteItem& Frd_FriendList_ack::invites(int index) const {
  // @@protoc_insertion_point(field_get:PRO.Frd_FriendList_ack.invites)
  return _internal_invites(index);
}
inline ::PRO::FriendInviteItem* Frd_FriendList_ack::_internal_add_invites() {
  return invites_.Add();
}
inline ::PRO::FriendInviteItem* Frd_FriendList_ack::add_invites() {
  ::PRO::FriendInviteItem* _add = _internal_add_invites();
  // @@protoc_insertion_point(field_add:PRO.Frd_FriendList_ack.invites)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::FriendInviteItem >&
Frd_FriendList_ack::invites() const {
  // @@protoc_insertion_point(field_list:PRO.Frd_FriendList_ack.invites)
  return invites_;
}

// int32 totleinvite = 3;
inline void Frd_FriendList_ack::clear_totleinvite() {
  totleinvite_ = 0;
}
inline int32_t Frd_FriendList_ack::_internal_totleinvite() const {
  return totleinvite_;
}
inline int32_t Frd_FriendList_ack::totleinvite() const {
  // @@protoc_insertion_point(field_get:PRO.Frd_FriendList_ack.totleinvite)
  return _internal_totleinvite();
}
inline void Frd_FriendList_ack::_internal_set_totleinvite(int32_t value) {
  
  totleinvite_ = value;
}
inline void Frd_FriendList_ack::set_totleinvite(int32_t value) {
  _internal_set_totleinvite(value);
  // @@protoc_insertion_point(field_set:PRO.Frd_FriendList_ack.totleinvite)
}

// repeated .PRO.FriendRelation friends = 4;
inline int Frd_FriendList_ack::_internal_friends_size() const {
  return friends_.size();
}
inline int Frd_FriendList_ack::friends_size() const {
  return _internal_friends_size();
}
inline ::PRO::FriendRelation* Frd_FriendList_ack::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:PRO.Frd_FriendList_ack.friends)
  return friends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::FriendRelation >*
Frd_FriendList_ack::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:PRO.Frd_FriendList_ack.friends)
  return &friends_;
}
inline const ::PRO::FriendRelation& Frd_FriendList_ack::_internal_friends(int index) const {
  return friends_.Get(index);
}
inline const ::PRO::FriendRelation& Frd_FriendList_ack::friends(int index) const {
  // @@protoc_insertion_point(field_get:PRO.Frd_FriendList_ack.friends)
  return _internal_friends(index);
}
inline ::PRO::FriendRelation* Frd_FriendList_ack::_internal_add_friends() {
  return friends_.Add();
}
inline ::PRO::FriendRelation* Frd_FriendList_ack::add_friends() {
  ::PRO::FriendRelation* _add = _internal_add_friends();
  // @@protoc_insertion_point(field_add:PRO.Frd_FriendList_ack.friends)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::FriendRelation >&
Frd_FriendList_ack::friends() const {
  // @@protoc_insertion_point(field_list:PRO.Frd_FriendList_ack.friends)
  return friends_;
}

// int32 totlefriend = 5;
inline void Frd_FriendList_ack::clear_totlefriend() {
  totlefriend_ = 0;
}
inline int32_t Frd_FriendList_ack::_internal_totlefriend() const {
  return totlefriend_;
}
inline int32_t Frd_FriendList_ack::totlefriend() const {
  // @@protoc_insertion_point(field_get:PRO.Frd_FriendList_ack.totlefriend)
  return _internal_totlefriend();
}
inline void Frd_FriendList_ack::_internal_set_totlefriend(int32_t value) {
  
  totlefriend_ = value;
}
inline void Frd_FriendList_ack::set_totlefriend(int32_t value) {
  _internal_set_totlefriend(value);
  // @@protoc_insertion_point(field_set:PRO.Frd_FriendList_ack.totlefriend)
}

// bool next = 6;
inline void Frd_FriendList_ack::clear_next() {
  next_ = false;
}
inline bool Frd_FriendList_ack::_internal_next() const {
  return next_;
}
inline bool Frd_FriendList_ack::next() const {
  // @@protoc_insertion_point(field_get:PRO.Frd_FriendList_ack.next)
  return _internal_next();
}
inline void Frd_FriendList_ack::_internal_set_next(bool value) {
  
  next_ = value;
}
inline void Frd_FriendList_ack::set_next(bool value) {
  _internal_set_next(value);
  // @@protoc_insertion_point(field_set:PRO.Frd_FriendList_ack.next)
}

// -------------------------------------------------------------------

// Frd_FriendInvite_req

// optional .PRO.UserToken utoken = 1;
inline bool Frd_FriendInvite_req::_internal_has_utoken() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || utoken_ != nullptr);
  return value;
}
inline bool Frd_FriendInvite_req::has_utoken() const {
  return _internal_has_utoken();
}
inline const ::PRO::UserToken& Frd_FriendInvite_req::_internal_utoken() const {
  const ::PRO::UserToken* p = utoken_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::UserToken&>(
      ::PRO::_UserToken_default_instance_);
}
inline const ::PRO::UserToken& Frd_FriendInvite_req::utoken() const {
  // @@protoc_insertion_point(field_get:PRO.Frd_FriendInvite_req.utoken)
  return _internal_utoken();
}
inline void Frd_FriendInvite_req::unsafe_arena_set_allocated_utoken(
    ::PRO::UserToken* utoken) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  utoken_ = utoken;
  if (utoken) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.Frd_FriendInvite_req.utoken)
}
inline ::PRO::UserToken* Frd_FriendInvite_req::release_utoken() {
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::UserToken* Frd_FriendInvite_req::unsafe_arena_release_utoken() {
  // @@protoc_insertion_point(field_release:PRO.Frd_FriendInvite_req.utoken)
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
  return temp;
}
inline ::PRO::UserToken* Frd_FriendInvite_req::_internal_mutable_utoken() {
  _has_bits_[0] |= 0x00000001u;
  if (utoken_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::UserToken>(GetArenaForAllocation());
    utoken_ = p;
  }
  return utoken_;
}
inline ::PRO::UserToken* Frd_FriendInvite_req::mutable_utoken() {
  ::PRO::UserToken* _msg = _internal_mutable_utoken();
  // @@protoc_insertion_point(field_mutable:PRO.Frd_FriendInvite_req.utoken)
  return _msg;
}
inline void Frd_FriendInvite_req::set_allocated_utoken(::PRO::UserToken* utoken) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  if (utoken) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken));
    if (message_arena != submessage_arena) {
      utoken = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, utoken, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  utoken_ = utoken;
  // @@protoc_insertion_point(field_set_allocated:PRO.Frd_FriendInvite_req.utoken)
}

// int64 invite_iid = 2;
inline void Frd_FriendInvite_req::clear_invite_iid() {
  invite_iid_ = int64_t{0};
}
inline int64_t Frd_FriendInvite_req::_internal_invite_iid() const {
  return invite_iid_;
}
inline int64_t Frd_FriendInvite_req::invite_iid() const {
  // @@protoc_insertion_point(field_get:PRO.Frd_FriendInvite_req.invite_iid)
  return _internal_invite_iid();
}
inline void Frd_FriendInvite_req::_internal_set_invite_iid(int64_t value) {
  
  invite_iid_ = value;
}
inline void Frd_FriendInvite_req::set_invite_iid(int64_t value) {
  _internal_set_invite_iid(value);
  // @@protoc_insertion_point(field_set:PRO.Frd_FriendInvite_req.invite_iid)
}

// -------------------------------------------------------------------

// Frd_FriendInvite_ack

// optional .PRO.UserToken utoken = 1;
inline bool Frd_FriendInvite_ack::_internal_has_utoken() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || utoken_ != nullptr);
  return value;
}
inline bool Frd_FriendInvite_ack::has_utoken() const {
  return _internal_has_utoken();
}
inline const ::PRO::UserToken& Frd_FriendInvite_ack::_internal_utoken() const {
  const ::PRO::UserToken* p = utoken_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::UserToken&>(
      ::PRO::_UserToken_default_instance_);
}
inline const ::PRO::UserToken& Frd_FriendInvite_ack::utoken() const {
  // @@protoc_insertion_point(field_get:PRO.Frd_FriendInvite_ack.utoken)
  return _internal_utoken();
}
inline void Frd_FriendInvite_ack::unsafe_arena_set_allocated_utoken(
    ::PRO::UserToken* utoken) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  utoken_ = utoken;
  if (utoken) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.Frd_FriendInvite_ack.utoken)
}
inline ::PRO::UserToken* Frd_FriendInvite_ack::release_utoken() {
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::UserToken* Frd_FriendInvite_ack::unsafe_arena_release_utoken() {
  // @@protoc_insertion_point(field_release:PRO.Frd_FriendInvite_ack.utoken)
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
  return temp;
}
inline ::PRO::UserToken* Frd_FriendInvite_ack::_internal_mutable_utoken() {
  _has_bits_[0] |= 0x00000001u;
  if (utoken_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::UserToken>(GetArenaForAllocation());
    utoken_ = p;
  }
  return utoken_;
}
inline ::PRO::UserToken* Frd_FriendInvite_ack::mutable_utoken() {
  ::PRO::UserToken* _msg = _internal_mutable_utoken();
  // @@protoc_insertion_point(field_mutable:PRO.Frd_FriendInvite_ack.utoken)
  return _msg;
}
inline void Frd_FriendInvite_ack::set_allocated_utoken(::PRO::UserToken* utoken) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  if (utoken) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken));
    if (message_arena != submessage_arena) {
      utoken = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, utoken, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  utoken_ = utoken;
  // @@protoc_insertion_point(field_set_allocated:PRO.Frd_FriendInvite_ack.utoken)
}

// int64 invite_iid = 2;
inline void Frd_FriendInvite_ack::clear_invite_iid() {
  invite_iid_ = int64_t{0};
}
inline int64_t Frd_FriendInvite_ack::_internal_invite_iid() const {
  return invite_iid_;
}
inline int64_t Frd_FriendInvite_ack::invite_iid() const {
  // @@protoc_insertion_point(field_get:PRO.Frd_FriendInvite_ack.invite_iid)
  return _internal_invite_iid();
}
inline void Frd_FriendInvite_ack::_internal_set_invite_iid(int64_t value) {
  
  invite_iid_ = value;
}
inline void Frd_FriendInvite_ack::set_invite_iid(int64_t value) {
  _internal_set_invite_iid(value);
  // @@protoc_insertion_point(field_set:PRO.Frd_FriendInvite_ack.invite_iid)
}

// int32 result = 3;
inline void Frd_FriendInvite_ack::clear_result() {
  result_ = 0;
}
inline int32_t Frd_FriendInvite_ack::_internal_result() const {
  return result_;
}
inline int32_t Frd_FriendInvite_ack::result() const {
  // @@protoc_insertion_point(field_get:PRO.Frd_FriendInvite_ack.result)
  return _internal_result();
}
inline void Frd_FriendInvite_ack::_internal_set_result(int32_t value) {
  
  result_ = value;
}
inline void Frd_FriendInvite_ack::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:PRO.Frd_FriendInvite_ack.result)
}

// optional .PRO.FriendInviteItem invite = 4;
inline bool Frd_FriendInvite_ack::_internal_has_invite() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || invite_ != nullptr);
  return value;
}
inline bool Frd_FriendInvite_ack::has_invite() const {
  return _internal_has_invite();
}
inline const ::PRO::FriendInviteItem& Frd_FriendInvite_ack::_internal_invite() const {
  const ::PRO::FriendInviteItem* p = invite_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::FriendInviteItem&>(
      ::PRO::_FriendInviteItem_default_instance_);
}
inline const ::PRO::FriendInviteItem& Frd_FriendInvite_ack::invite() const {
  // @@protoc_insertion_point(field_get:PRO.Frd_FriendInvite_ack.invite)
  return _internal_invite();
}
inline void Frd_FriendInvite_ack::unsafe_arena_set_allocated_invite(
    ::PRO::FriendInviteItem* invite) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(invite_);
  }
  invite_ = invite;
  if (invite) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.Frd_FriendInvite_ack.invite)
}
inline ::PRO::FriendInviteItem* Frd_FriendInvite_ack::release_invite() {
  _has_bits_[0] &= ~0x00000002u;
  ::PRO::FriendInviteItem* temp = invite_;
  invite_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::FriendInviteItem* Frd_FriendInvite_ack::unsafe_arena_release_invite() {
  // @@protoc_insertion_point(field_release:PRO.Frd_FriendInvite_ack.invite)
  _has_bits_[0] &= ~0x00000002u;
  ::PRO::FriendInviteItem* temp = invite_;
  invite_ = nullptr;
  return temp;
}
inline ::PRO::FriendInviteItem* Frd_FriendInvite_ack::_internal_mutable_invite() {
  _has_bits_[0] |= 0x00000002u;
  if (invite_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::FriendInviteItem>(GetArenaForAllocation());
    invite_ = p;
  }
  return invite_;
}
inline ::PRO::FriendInviteItem* Frd_FriendInvite_ack::mutable_invite() {
  ::PRO::FriendInviteItem* _msg = _internal_mutable_invite();
  // @@protoc_insertion_point(field_mutable:PRO.Frd_FriendInvite_ack.invite)
  return _msg;
}
inline void Frd_FriendInvite_ack::set_allocated_invite(::PRO::FriendInviteItem* invite) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(invite_);
  }
  if (invite) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(invite));
    if (message_arena != submessage_arena) {
      invite = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invite, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  invite_ = invite;
  // @@protoc_insertion_point(field_set_allocated:PRO.Frd_FriendInvite_ack.invite)
}

// -------------------------------------------------------------------

// Frd_InviteConfirm_req

// optional .PRO.UserToken utoken = 1;
inline bool Frd_InviteConfirm_req::_internal_has_utoken() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || utoken_ != nullptr);
  return value;
}
inline bool Frd_InviteConfirm_req::has_utoken() const {
  return _internal_has_utoken();
}
inline const ::PRO::UserToken& Frd_InviteConfirm_req::_internal_utoken() const {
  const ::PRO::UserToken* p = utoken_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::UserToken&>(
      ::PRO::_UserToken_default_instance_);
}
inline const ::PRO::UserToken& Frd_InviteConfirm_req::utoken() const {
  // @@protoc_insertion_point(field_get:PRO.Frd_InviteConfirm_req.utoken)
  return _internal_utoken();
}
inline void Frd_InviteConfirm_req::unsafe_arena_set_allocated_utoken(
    ::PRO::UserToken* utoken) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  utoken_ = utoken;
  if (utoken) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.Frd_InviteConfirm_req.utoken)
}
inline ::PRO::UserToken* Frd_InviteConfirm_req::release_utoken() {
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::UserToken* Frd_InviteConfirm_req::unsafe_arena_release_utoken() {
  // @@protoc_insertion_point(field_release:PRO.Frd_InviteConfirm_req.utoken)
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
  return temp;
}
inline ::PRO::UserToken* Frd_InviteConfirm_req::_internal_mutable_utoken() {
  _has_bits_[0] |= 0x00000001u;
  if (utoken_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::UserToken>(GetArenaForAllocation());
    utoken_ = p;
  }
  return utoken_;
}
inline ::PRO::UserToken* Frd_InviteConfirm_req::mutable_utoken() {
  ::PRO::UserToken* _msg = _internal_mutable_utoken();
  // @@protoc_insertion_point(field_mutable:PRO.Frd_InviteConfirm_req.utoken)
  return _msg;
}
inline void Frd_InviteConfirm_req::set_allocated_utoken(::PRO::UserToken* utoken) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  if (utoken) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken));
    if (message_arena != submessage_arena) {
      utoken = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, utoken, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  utoken_ = utoken;
  // @@protoc_insertion_point(field_set_allocated:PRO.Frd_InviteConfirm_req.utoken)
}

// int64 iid = 2;
inline void Frd_InviteConfirm_req::clear_iid() {
  iid_ = int64_t{0};
}
inline int64_t Frd_InviteConfirm_req::_internal_iid() const {
  return iid_;
}
inline int64_t Frd_InviteConfirm_req::iid() const {
  // @@protoc_insertion_point(field_get:PRO.Frd_InviteConfirm_req.iid)
  return _internal_iid();
}
inline void Frd_InviteConfirm_req::_internal_set_iid(int64_t value) {
  
  iid_ = value;
}
inline void Frd_InviteConfirm_req::set_iid(int64_t value) {
  _internal_set_iid(value);
  // @@protoc_insertion_point(field_set:PRO.Frd_InviteConfirm_req.iid)
}

// bool agree = 3;
inline void Frd_InviteConfirm_req::clear_agree() {
  agree_ = false;
}
inline bool Frd_InviteConfirm_req::_internal_agree() const {
  return agree_;
}
inline bool Frd_InviteConfirm_req::agree() const {
  // @@protoc_insertion_point(field_get:PRO.Frd_InviteConfirm_req.agree)
  return _internal_agree();
}
inline void Frd_InviteConfirm_req::_internal_set_agree(bool value) {
  
  agree_ = value;
}
inline void Frd_InviteConfirm_req::set_agree(bool value) {
  _internal_set_agree(value);
  // @@protoc_insertion_point(field_set:PRO.Frd_InviteConfirm_req.agree)
}

// -------------------------------------------------------------------

// Frd_InviteConfirm_ack

// optional .PRO.UserToken utoken = 1;
inline bool Frd_InviteConfirm_ack::_internal_has_utoken() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || utoken_ != nullptr);
  return value;
}
inline bool Frd_InviteConfirm_ack::has_utoken() const {
  return _internal_has_utoken();
}
inline const ::PRO::UserToken& Frd_InviteConfirm_ack::_internal_utoken() const {
  const ::PRO::UserToken* p = utoken_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::UserToken&>(
      ::PRO::_UserToken_default_instance_);
}
inline const ::PRO::UserToken& Frd_InviteConfirm_ack::utoken() const {
  // @@protoc_insertion_point(field_get:PRO.Frd_InviteConfirm_ack.utoken)
  return _internal_utoken();
}
inline void Frd_InviteConfirm_ack::unsafe_arena_set_allocated_utoken(
    ::PRO::UserToken* utoken) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  utoken_ = utoken;
  if (utoken) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.Frd_InviteConfirm_ack.utoken)
}
inline ::PRO::UserToken* Frd_InviteConfirm_ack::release_utoken() {
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::UserToken* Frd_InviteConfirm_ack::unsafe_arena_release_utoken() {
  // @@protoc_insertion_point(field_release:PRO.Frd_InviteConfirm_ack.utoken)
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
  return temp;
}
inline ::PRO::UserToken* Frd_InviteConfirm_ack::_internal_mutable_utoken() {
  _has_bits_[0] |= 0x00000001u;
  if (utoken_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::UserToken>(GetArenaForAllocation());
    utoken_ = p;
  }
  return utoken_;
}
inline ::PRO::UserToken* Frd_InviteConfirm_ack::mutable_utoken() {
  ::PRO::UserToken* _msg = _internal_mutable_utoken();
  // @@protoc_insertion_point(field_mutable:PRO.Frd_InviteConfirm_ack.utoken)
  return _msg;
}
inline void Frd_InviteConfirm_ack::set_allocated_utoken(::PRO::UserToken* utoken) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  if (utoken) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken));
    if (message_arena != submessage_arena) {
      utoken = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, utoken, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  utoken_ = utoken;
  // @@protoc_insertion_point(field_set_allocated:PRO.Frd_InviteConfirm_ack.utoken)
}

// int64 iid = 2;
inline void Frd_InviteConfirm_ack::clear_iid() {
  iid_ = int64_t{0};
}
inline int64_t Frd_InviteConfirm_ack::_internal_iid() const {
  return iid_;
}
inline int64_t Frd_InviteConfirm_ack::iid() const {
  // @@protoc_insertion_point(field_get:PRO.Frd_InviteConfirm_ack.iid)
  return _internal_iid();
}
inline void Frd_InviteConfirm_ack::_internal_set_iid(int64_t value) {
  
  iid_ = value;
}
inline void Frd_InviteConfirm_ack::set_iid(int64_t value) {
  _internal_set_iid(value);
  // @@protoc_insertion_point(field_set:PRO.Frd_InviteConfirm_ack.iid)
}

// bool agree = 3;
inline void Frd_InviteConfirm_ack::clear_agree() {
  agree_ = false;
}
inline bool Frd_InviteConfirm_ack::_internal_agree() const {
  return agree_;
}
inline bool Frd_InviteConfirm_ack::agree() const {
  // @@protoc_insertion_point(field_get:PRO.Frd_InviteConfirm_ack.agree)
  return _internal_agree();
}
inline void Frd_InviteConfirm_ack::_internal_set_agree(bool value) {
  
  agree_ = value;
}
inline void Frd_InviteConfirm_ack::set_agree(bool value) {
  _internal_set_agree(value);
  // @@protoc_insertion_point(field_set:PRO.Frd_InviteConfirm_ack.agree)
}

// int32 result = 4;
inline void Frd_InviteConfirm_ack::clear_result() {
  result_ = 0;
}
inline int32_t Frd_InviteConfirm_ack::_internal_result() const {
  return result_;
}
inline int32_t Frd_InviteConfirm_ack::result() const {
  // @@protoc_insertion_point(field_get:PRO.Frd_InviteConfirm_ack.result)
  return _internal_result();
}
inline void Frd_InviteConfirm_ack::_internal_set_result(int32_t value) {
  
  result_ = value;
}
inline void Frd_InviteConfirm_ack::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:PRO.Frd_InviteConfirm_ack.result)
}

// optional .PRO.FriendRelation friend = 5;
inline bool Frd_InviteConfirm_ack::_internal_has_friend_() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || friend__ != nullptr);
  return value;
}
inline bool Frd_InviteConfirm_ack::has_friend_() const {
  return _internal_has_friend_();
}
inline const ::PRO::FriendRelation& Frd_InviteConfirm_ack::_internal_friend_() const {
  const ::PRO::FriendRelation* p = friend__;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::FriendRelation&>(
      ::PRO::_FriendRelation_default_instance_);
}
inline const ::PRO::FriendRelation& Frd_InviteConfirm_ack::friend_() const {
  // @@protoc_insertion_point(field_get:PRO.Frd_InviteConfirm_ack.friend)
  return _internal_friend_();
}
inline void Frd_InviteConfirm_ack::unsafe_arena_set_allocated_friend_(
    ::PRO::FriendRelation* friend_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(friend__);
  }
  friend__ = friend_;
  if (friend_) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.Frd_InviteConfirm_ack.friend)
}
inline ::PRO::FriendRelation* Frd_InviteConfirm_ack::release_friend_() {
  _has_bits_[0] &= ~0x00000002u;
  ::PRO::FriendRelation* temp = friend__;
  friend__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::FriendRelation* Frd_InviteConfirm_ack::unsafe_arena_release_friend_() {
  // @@protoc_insertion_point(field_release:PRO.Frd_InviteConfirm_ack.friend)
  _has_bits_[0] &= ~0x00000002u;
  ::PRO::FriendRelation* temp = friend__;
  friend__ = nullptr;
  return temp;
}
inline ::PRO::FriendRelation* Frd_InviteConfirm_ack::_internal_mutable_friend_() {
  _has_bits_[0] |= 0x00000002u;
  if (friend__ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::FriendRelation>(GetArenaForAllocation());
    friend__ = p;
  }
  return friend__;
}
inline ::PRO::FriendRelation* Frd_InviteConfirm_ack::mutable_friend_() {
  ::PRO::FriendRelation* _msg = _internal_mutable_friend_();
  // @@protoc_insertion_point(field_mutable:PRO.Frd_InviteConfirm_ack.friend)
  return _msg;
}
inline void Frd_InviteConfirm_ack::set_allocated_friend_(::PRO::FriendRelation* friend_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(friend__);
  }
  if (friend_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(friend_));
    if (message_arena != submessage_arena) {
      friend_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friend_, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  friend__ = friend_;
  // @@protoc_insertion_point(field_set_allocated:PRO.Frd_InviteConfirm_ack.friend)
}

// -------------------------------------------------------------------

// Frd_FriendDelete_req

// optional .PRO.UserToken utoken = 1;
inline bool Frd_FriendDelete_req::_internal_has_utoken() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || utoken_ != nullptr);
  return value;
}
inline bool Frd_FriendDelete_req::has_utoken() const {
  return _internal_has_utoken();
}
inline const ::PRO::UserToken& Frd_FriendDelete_req::_internal_utoken() const {
  const ::PRO::UserToken* p = utoken_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::UserToken&>(
      ::PRO::_UserToken_default_instance_);
}
inline const ::PRO::UserToken& Frd_FriendDelete_req::utoken() const {
  // @@protoc_insertion_point(field_get:PRO.Frd_FriendDelete_req.utoken)
  return _internal_utoken();
}
inline void Frd_FriendDelete_req::unsafe_arena_set_allocated_utoken(
    ::PRO::UserToken* utoken) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  utoken_ = utoken;
  if (utoken) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.Frd_FriendDelete_req.utoken)
}
inline ::PRO::UserToken* Frd_FriendDelete_req::release_utoken() {
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::UserToken* Frd_FriendDelete_req::unsafe_arena_release_utoken() {
  // @@protoc_insertion_point(field_release:PRO.Frd_FriendDelete_req.utoken)
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
  return temp;
}
inline ::PRO::UserToken* Frd_FriendDelete_req::_internal_mutable_utoken() {
  _has_bits_[0] |= 0x00000001u;
  if (utoken_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::UserToken>(GetArenaForAllocation());
    utoken_ = p;
  }
  return utoken_;
}
inline ::PRO::UserToken* Frd_FriendDelete_req::mutable_utoken() {
  ::PRO::UserToken* _msg = _internal_mutable_utoken();
  // @@protoc_insertion_point(field_mutable:PRO.Frd_FriendDelete_req.utoken)
  return _msg;
}
inline void Frd_FriendDelete_req::set_allocated_utoken(::PRO::UserToken* utoken) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  if (utoken) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken));
    if (message_arena != submessage_arena) {
      utoken = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, utoken, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  utoken_ = utoken;
  // @@protoc_insertion_point(field_set_allocated:PRO.Frd_FriendDelete_req.utoken)
}

// int64 friendiid = 2;
inline void Frd_FriendDelete_req::clear_friendiid() {
  friendiid_ = int64_t{0};
}
inline int64_t Frd_FriendDelete_req::_internal_friendiid() const {
  return friendiid_;
}
inline int64_t Frd_FriendDelete_req::friendiid() const {
  // @@protoc_insertion_point(field_get:PRO.Frd_FriendDelete_req.friendiid)
  return _internal_friendiid();
}
inline void Frd_FriendDelete_req::_internal_set_friendiid(int64_t value) {
  
  friendiid_ = value;
}
inline void Frd_FriendDelete_req::set_friendiid(int64_t value) {
  _internal_set_friendiid(value);
  // @@protoc_insertion_point(field_set:PRO.Frd_FriendDelete_req.friendiid)
}

// -------------------------------------------------------------------

// Frd_FriendDelete_ack

// optional .PRO.UserToken utoken = 1;
inline bool Frd_FriendDelete_ack::_internal_has_utoken() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || utoken_ != nullptr);
  return value;
}
inline bool Frd_FriendDelete_ack::has_utoken() const {
  return _internal_has_utoken();
}
inline const ::PRO::UserToken& Frd_FriendDelete_ack::_internal_utoken() const {
  const ::PRO::UserToken* p = utoken_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::UserToken&>(
      ::PRO::_UserToken_default_instance_);
}
inline const ::PRO::UserToken& Frd_FriendDelete_ack::utoken() const {
  // @@protoc_insertion_point(field_get:PRO.Frd_FriendDelete_ack.utoken)
  return _internal_utoken();
}
inline void Frd_FriendDelete_ack::unsafe_arena_set_allocated_utoken(
    ::PRO::UserToken* utoken) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  utoken_ = utoken;
  if (utoken) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.Frd_FriendDelete_ack.utoken)
}
inline ::PRO::UserToken* Frd_FriendDelete_ack::release_utoken() {
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::UserToken* Frd_FriendDelete_ack::unsafe_arena_release_utoken() {
  // @@protoc_insertion_point(field_release:PRO.Frd_FriendDelete_ack.utoken)
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
  return temp;
}
inline ::PRO::UserToken* Frd_FriendDelete_ack::_internal_mutable_utoken() {
  _has_bits_[0] |= 0x00000001u;
  if (utoken_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::UserToken>(GetArenaForAllocation());
    utoken_ = p;
  }
  return utoken_;
}
inline ::PRO::UserToken* Frd_FriendDelete_ack::mutable_utoken() {
  ::PRO::UserToken* _msg = _internal_mutable_utoken();
  // @@protoc_insertion_point(field_mutable:PRO.Frd_FriendDelete_ack.utoken)
  return _msg;
}
inline void Frd_FriendDelete_ack::set_allocated_utoken(::PRO::UserToken* utoken) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  if (utoken) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken));
    if (message_arena != submessage_arena) {
      utoken = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, utoken, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  utoken_ = utoken;
  // @@protoc_insertion_point(field_set_allocated:PRO.Frd_FriendDelete_ack.utoken)
}

// int64 friendiid = 2;
inline void Frd_FriendDelete_ack::clear_friendiid() {
  friendiid_ = int64_t{0};
}
inline int64_t Frd_FriendDelete_ack::_internal_friendiid() const {
  return friendiid_;
}
inline int64_t Frd_FriendDelete_ack::friendiid() const {
  // @@protoc_insertion_point(field_get:PRO.Frd_FriendDelete_ack.friendiid)
  return _internal_friendiid();
}
inline void Frd_FriendDelete_ack::_internal_set_friendiid(int64_t value) {
  
  friendiid_ = value;
}
inline void Frd_FriendDelete_ack::set_friendiid(int64_t value) {
  _internal_set_friendiid(value);
  // @@protoc_insertion_point(field_set:PRO.Frd_FriendDelete_ack.friendiid)
}

// int32 result = 3;
inline void Frd_FriendDelete_ack::clear_result() {
  result_ = 0;
}
inline int32_t Frd_FriendDelete_ack::_internal_result() const {
  return result_;
}
inline int32_t Frd_FriendDelete_ack::result() const {
  // @@protoc_insertion_point(field_get:PRO.Frd_FriendDelete_ack.result)
  return _internal_result();
}
inline void Frd_FriendDelete_ack::_internal_set_result(int32_t value) {
  
  result_ = value;
}
inline void Frd_FriendDelete_ack::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:PRO.Frd_FriendDelete_ack.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PRO

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_friend_5fsystem_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friend_system.proto

#include "friend_system.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace PRO {
constexpr Frd_FriendList_req::Frd_FriendList_req(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nickname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_invite_(int64_t{0})
  , friendindex_(0)
  , next_(false)
  , num_(0){}
struct Frd_FriendList_reqDefaultTypeInternal {
  constexpr Frd_FriendList_reqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Frd_FriendList_reqDefaultTypeInternal() {}
  union {
    Frd_FriendList_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Frd_FriendList_reqDefaultTypeInternal _Frd_FriendList_req_default_instance_;
constexpr Frd_FriendList_ack::Frd_FriendList_ack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invites_()
  , friends_()
  , totleinvite_(0)
  , totlefriend_(0)
  , next_(false){}
struct Frd_FriendList_ackDefaultTypeInternal {
  constexpr Frd_FriendList_ackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Frd_FriendList_ackDefaultTypeInternal() {}
  union {
    Frd_FriendList_ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Frd_FriendList_ackDefaultTypeInternal _Frd_FriendList_ack_default_instance_;
constexpr Frd_FriendInvite_req::Frd_FriendInvite_req(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invite_iid_(int64_t{0}){}
struct Frd_FriendInvite_reqDefaultTypeInternal {
  constexpr Frd_FriendInvite_reqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Frd_FriendInvite_reqDefaultTypeInternal() {}
  union {
    Frd_FriendInvite_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Frd_FriendInvite_reqDefaultTypeInternal _Frd_FriendInvite_req_default_instance_;
constexpr Frd_FriendInvite_ack::Frd_FriendInvite_ack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invite_(nullptr)
  , invite_iid_(int64_t{0})
  , result_(0){}
struct Frd_FriendInvite_ackDefaultTypeInternal {
  constexpr Frd_FriendInvite_ackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Frd_FriendInvite_ackDefaultTypeInternal() {}
  union {
    Frd_FriendInvite_ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Frd_FriendInvite_ackDefaultTypeInternal _Frd_FriendInvite_ack_default_instance_;
constexpr Frd_InviteConfirm_req::Frd_InviteConfirm_req(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : iid_(int64_t{0})
  , agree_(false){}
struct Frd_InviteConfirm_reqDefaultTypeInternal {
  constexpr Frd_InviteConfirm_reqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Frd_InviteConfirm_reqDefaultTypeInternal() {}
  union {
    Frd_InviteConfirm_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Frd_InviteConfirm_reqDefaultTypeInternal _Frd_InviteConfirm_req_default_instance_;
constexpr Frd_InviteConfirm_ack::Frd_InviteConfirm_ack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : friend__(nullptr)
  , iid_(int64_t{0})
  , agree_(false)
  , result_(0){}
struct Frd_InviteConfirm_ackDefaultTypeInternal {
  constexpr Frd_InviteConfirm_ackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Frd_InviteConfirm_ackDefaultTypeInternal() {}
  union {
    Frd_InviteConfirm_ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Frd_InviteConfirm_ackDefaultTypeInternal _Frd_InviteConfirm_ack_default_instance_;
constexpr Frd_FriendDelete_req::Frd_FriendDelete_req(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : friendiid_(int64_t{0}){}
struct Frd_FriendDelete_reqDefaultTypeInternal {
  constexpr Frd_FriendDelete_reqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Frd_FriendDelete_reqDefaultTypeInternal() {}
  union {
    Frd_FriendDelete_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Frd_FriendDelete_reqDefaultTypeInternal _Frd_FriendDelete_req_default_instance_;
constexpr Frd_FriendDelete_ack::Frd_FriendDelete_ack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : friendiid_(int64_t{0})
  , result_(0){}
struct Frd_FriendDelete_ackDefaultTypeInternal {
  constexpr Frd_FriendDelete_ackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Frd_FriendDelete_ackDefaultTypeInternal() {}
  union {
    Frd_FriendDelete_ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Frd_FriendDelete_ackDefaultTypeInternal _Frd_FriendDelete_ack_default_instance_;
}  // namespace PRO
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_friend_5fsystem_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_friend_5fsystem_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_friend_5fsystem_2eproto = nullptr;

const uint32_t TableStruct_friend_5fsystem_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Frd_FriendList_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Frd_FriendList_req, last_invite_),
  PROTOBUF_FIELD_OFFSET(::PRO::Frd_FriendList_req, friendindex_),
  PROTOBUF_FIELD_OFFSET(::PRO::Frd_FriendList_req, next_),
  PROTOBUF_FIELD_OFFSET(::PRO::Frd_FriendList_req, num_),
  PROTOBUF_FIELD_OFFSET(::PRO::Frd_FriendList_req, nickname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Frd_FriendList_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Frd_FriendList_ack, invites_),
  PROTOBUF_FIELD_OFFSET(::PRO::Frd_FriendList_ack, totleinvite_),
  PROTOBUF_FIELD_OFFSET(::PRO::Frd_FriendList_ack, friends_),
  PROTOBUF_FIELD_OFFSET(::PRO::Frd_FriendList_ack, totlefriend_),
  PROTOBUF_FIELD_OFFSET(::PRO::Frd_FriendList_ack, next_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Frd_FriendInvite_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Frd_FriendInvite_req, invite_iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::Frd_FriendInvite_ack, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PRO::Frd_FriendInvite_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Frd_FriendInvite_ack, invite_iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::Frd_FriendInvite_ack, result_),
  PROTOBUF_FIELD_OFFSET(::PRO::Frd_FriendInvite_ack, invite_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Frd_InviteConfirm_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Frd_InviteConfirm_req, iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::Frd_InviteConfirm_req, agree_),
  PROTOBUF_FIELD_OFFSET(::PRO::Frd_InviteConfirm_ack, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PRO::Frd_InviteConfirm_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Frd_InviteConfirm_ack, iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::Frd_InviteConfirm_ack, agree_),
  PROTOBUF_FIELD_OFFSET(::PRO::Frd_InviteConfirm_ack, result_),
  PROTOBUF_FIELD_OFFSET(::PRO::Frd_InviteConfirm_ack, friend__),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Frd_FriendDelete_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Frd_FriendDelete_req, friendiid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Frd_FriendDelete_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Frd_FriendDelete_ack, friendiid_),
  PROTOBUF_FIELD_OFFSET(::PRO::Frd_FriendDelete_ack, result_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::PRO::Frd_FriendList_req)},
  { 11, -1, -1, sizeof(::PRO::Frd_FriendList_ack)},
  { 22, -1, -1, sizeof(::PRO::Frd_FriendInvite_req)},
  { 29, 38, -1, sizeof(::PRO::Frd_FriendInvite_ack)},
  { 41, -1, -1, sizeof(::PRO::Frd_InviteConfirm_req)},
  { 49, 59, -1, sizeof(::PRO::Frd_InviteConfirm_ack)},
  { 63, -1, -1, sizeof(::PRO::Frd_FriendDelete_req)},
  { 70, -1, -1, sizeof(::PRO::Frd_FriendDelete_ack)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Frd_FriendList_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Frd_FriendList_ack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Frd_FriendInvite_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Frd_FriendInvite_ack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Frd_InviteConfirm_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Frd_InviteConfirm_ack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Frd_FriendDelete_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Frd_FriendDelete_ack_default_instance_),
};

const char descriptor_table_protodef_friend_5fsystem_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023friend_system.proto\022\003PRO\032\025global_inter"
  "nal.proto\"k\n\022Frd_FriendList_req\022\023\n\013last_"
  "invite\030\001 \001(\003\022\023\n\013friendindex\030\002 \001(\005\022\014\n\004nex"
  "t\030\003 \001(\010\022\013\n\003num\030\004 \001(\005\022\020\n\010nickname\030\n \001(\t\"\232"
  "\001\n\022Frd_FriendList_ack\022&\n\007invites\030\001 \003(\0132\025"
  ".PRO.FriendInviteItem\022\023\n\013totleinvite\030\002 \001"
  "(\005\022$\n\007friends\030\003 \003(\0132\023.PRO.FriendRelation"
  "\022\023\n\013totlefriend\030\004 \001(\005\022\014\n\004next\030\005 \001(\010\"*\n\024F"
  "rd_FriendInvite_req\022\022\n\ninvite_iid\030\001 \001(\003\""
  "q\n\024Frd_FriendInvite_ack\022\022\n\ninvite_iid\030\001 "
  "\001(\003\022\016\n\006result\030\002 \001(\005\022*\n\006invite\030\003 \001(\0132\025.PR"
  "O.FriendInviteItemH\000\210\001\001B\t\n\007_invite\"3\n\025Fr"
  "d_InviteConfirm_req\022\013\n\003iid\030\001 \001(\003\022\r\n\005agre"
  "e\030\002 \001(\010\"x\n\025Frd_InviteConfirm_ack\022\013\n\003iid\030"
  "\001 \001(\003\022\r\n\005agree\030\002 \001(\010\022\016\n\006result\030\003 \001(\005\022(\n\006"
  "friend\030\004 \001(\0132\023.PRO.FriendRelationH\000\210\001\001B\t"
  "\n\007_friend\")\n\024Frd_FriendDelete_req\022\021\n\tfri"
  "endiid\030\001 \001(\003\"9\n\024Frd_FriendDelete_ack\022\021\n\t"
  "friendiid\030\001 \001(\003\022\016\n\006result\030\002 \001(\005BT\n\033com.c"
  "ms.client.network.gproP\001Z\025gamelib/protob"
  "uf/gpro\252\002\033com.cms.client.network.gprob\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_friend_5fsystem_2eproto_deps[1] = {
  &::descriptor_table_global_5finternal_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_friend_5fsystem_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_friend_5fsystem_2eproto = {
  false, false, 845, descriptor_table_protodef_friend_5fsystem_2eproto, "friend_system.proto", 
  &descriptor_table_friend_5fsystem_2eproto_once, descriptor_table_friend_5fsystem_2eproto_deps, 1, 8,
  schemas, file_default_instances, TableStruct_friend_5fsystem_2eproto::offsets,
  file_level_metadata_friend_5fsystem_2eproto, file_level_enum_descriptors_friend_5fsystem_2eproto, file_level_service_descriptors_friend_5fsystem_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_friend_5fsystem_2eproto_getter() {
  return &descriptor_table_friend_5fsystem_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_friend_5fsystem_2eproto(&descriptor_table_friend_5fsystem_2eproto);
namespace PRO {

// ===================================================================

class Frd_FriendList_req::_Internal {
 public:
};

Frd_FriendList_req::Frd_FriendList_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Frd_FriendList_req)
}
Frd_FriendList_req::Frd_FriendList_req(const Frd_FriendList_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&last_invite_, &from.last_invite_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&last_invite_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:PRO.Frd_FriendList_req)
}

inline void Frd_FriendList_req::SharedCtor() {
nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&last_invite_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&last_invite_)) + sizeof(num_));
}

Frd_FriendList_req::~Frd_FriendList_req() {
  // @@protoc_insertion_point(destructor:PRO.Frd_FriendList_req)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Frd_FriendList_req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Frd_FriendList_req::ArenaDtor(void* object) {
  Frd_FriendList_req* _this = reinterpret_cast< Frd_FriendList_req* >(object);
  (void)_this;
}
void Frd_FriendList_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Frd_FriendList_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Frd_FriendList_req::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Frd_FriendList_req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nickname_.ClearToEmpty();
  ::memset(&last_invite_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&last_invite_)) + sizeof(num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Frd_FriendList_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 last_invite = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          last_invite_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 friendindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          friendindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool next = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          next_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nickname = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.Frd_FriendList_req.nickname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Frd_FriendList_req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Frd_FriendList_req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 last_invite = 1;
  if (this->_internal_last_invite() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_last_invite(), target);
  }

  // int32 friendindex = 2;
  if (this->_internal_friendindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_friendindex(), target);
  }

  // bool next = 3;
  if (this->_internal_next() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_next(), target);
  }

  // int32 num = 4;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_num(), target);
  }

  // string nickname = 10;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.Frd_FriendList_req.nickname");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_nickname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Frd_FriendList_req)
  return target;
}

size_t Frd_FriendList_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Frd_FriendList_req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 10;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // int64 last_invite = 1;
  if (this->_internal_last_invite() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_last_invite());
  }

  // int32 friendindex = 2;
  if (this->_internal_friendindex() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_friendindex());
  }

  // bool next = 3;
  if (this->_internal_next() != 0) {
    total_size += 1 + 1;
  }

  // int32 num = 4;
  if (this->_internal_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Frd_FriendList_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Frd_FriendList_req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Frd_FriendList_req::GetClassData() const { return &_class_data_; }

void Frd_FriendList_req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Frd_FriendList_req *>(to)->MergeFrom(
      static_cast<const Frd_FriendList_req &>(from));
}


void Frd_FriendList_req::MergeFrom(const Frd_FriendList_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Frd_FriendList_req)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nickname().empty()) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (from._internal_last_invite() != 0) {
    _internal_set_last_invite(from._internal_last_invite());
  }
  if (from._internal_friendindex() != 0) {
    _internal_set_friendindex(from._internal_friendindex());
  }
  if (from._internal_next() != 0) {
    _internal_set_next(from._internal_next());
  }
  if (from._internal_num() != 0) {
    _internal_set_num(from._internal_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Frd_FriendList_req::CopyFrom(const Frd_FriendList_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Frd_FriendList_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frd_FriendList_req::IsInitialized() const {
  return true;
}

void Frd_FriendList_req::InternalSwap(Frd_FriendList_req* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nickname_, lhs_arena,
      &other->nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Frd_FriendList_req, num_)
      + sizeof(Frd_FriendList_req::num_)
      - PROTOBUF_FIELD_OFFSET(Frd_FriendList_req, last_invite_)>(
          reinterpret_cast<char*>(&last_invite_),
          reinterpret_cast<char*>(&other->last_invite_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Frd_FriendList_req::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_friend_5fsystem_2eproto_getter, &descriptor_table_friend_5fsystem_2eproto_once,
      file_level_metadata_friend_5fsystem_2eproto[0]);
}

// ===================================================================

class Frd_FriendList_ack::_Internal {
 public:
};

void Frd_FriendList_ack::clear_invites() {
  invites_.Clear();
}
void Frd_FriendList_ack::clear_friends() {
  friends_.Clear();
}
Frd_FriendList_ack::Frd_FriendList_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  invites_(arena),
  friends_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Frd_FriendList_ack)
}
Frd_FriendList_ack::Frd_FriendList_ack(const Frd_FriendList_ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      invites_(from.invites_),
      friends_(from.friends_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&totleinvite_, &from.totleinvite_,
    static_cast<size_t>(reinterpret_cast<char*>(&next_) -
    reinterpret_cast<char*>(&totleinvite_)) + sizeof(next_));
  // @@protoc_insertion_point(copy_constructor:PRO.Frd_FriendList_ack)
}

inline void Frd_FriendList_ack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&totleinvite_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&next_) -
    reinterpret_cast<char*>(&totleinvite_)) + sizeof(next_));
}

Frd_FriendList_ack::~Frd_FriendList_ack() {
  // @@protoc_insertion_point(destructor:PRO.Frd_FriendList_ack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Frd_FriendList_ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Frd_FriendList_ack::ArenaDtor(void* object) {
  Frd_FriendList_ack* _this = reinterpret_cast< Frd_FriendList_ack* >(object);
  (void)_this;
}
void Frd_FriendList_ack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Frd_FriendList_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Frd_FriendList_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Frd_FriendList_ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  invites_.Clear();
  friends_.Clear();
  ::memset(&totleinvite_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_) -
      reinterpret_cast<char*>(&totleinvite_)) + sizeof(next_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Frd_FriendList_ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PRO.FriendInviteItem invites = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_invites(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 totleinvite = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          totleinvite_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PRO.FriendRelation friends = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_friends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 totlefriend = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          totlefriend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool next = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          next_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Frd_FriendList_ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Frd_FriendList_ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PRO.FriendInviteItem invites = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_invites_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_invites(i), target, stream);
  }

  // int32 totleinvite = 2;
  if (this->_internal_totleinvite() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_totleinvite(), target);
  }

  // repeated .PRO.FriendRelation friends = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_friends_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_friends(i), target, stream);
  }

  // int32 totlefriend = 4;
  if (this->_internal_totlefriend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_totlefriend(), target);
  }

  // bool next = 5;
  if (this->_internal_next() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_next(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Frd_FriendList_ack)
  return target;
}

size_t Frd_FriendList_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Frd_FriendList_ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PRO.FriendInviteItem invites = 1;
  total_size += 1UL * this->_internal_invites_size();
  for (const auto& msg : this->invites_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PRO.FriendRelation friends = 3;
  total_size += 1UL * this->_internal_friends_size();
  for (const auto& msg : this->friends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 totleinvite = 2;
  if (this->_internal_totleinvite() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_totleinvite());
  }

  // int32 totlefriend = 4;
  if (this->_internal_totlefriend() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_totlefriend());
  }

  // bool next = 5;
  if (this->_internal_next() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Frd_FriendList_ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Frd_FriendList_ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Frd_FriendList_ack::GetClassData() const { return &_class_data_; }

void Frd_FriendList_ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Frd_FriendList_ack *>(to)->MergeFrom(
      static_cast<const Frd_FriendList_ack &>(from));
}


void Frd_FriendList_ack::MergeFrom(const Frd_FriendList_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Frd_FriendList_ack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  invites_.MergeFrom(from.invites_);
  friends_.MergeFrom(from.friends_);
  if (from._internal_totleinvite() != 0) {
    _internal_set_totleinvite(from._internal_totleinvite());
  }
  if (from._internal_totlefriend() != 0) {
    _internal_set_totlefriend(from._internal_totlefriend());
  }
  if (from._internal_next() != 0) {
    _internal_set_next(from._internal_next());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Frd_FriendList_ack::CopyFrom(const Frd_FriendList_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Frd_FriendList_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frd_FriendList_ack::IsInitialized() const {
  return true;
}

void Frd_FriendList_ack::InternalSwap(Frd_FriendList_ack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  invites_.InternalSwap(&other->invites_);
  friends_.InternalSwap(&other->friends_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Frd_FriendList_ack, next_)
      + sizeof(Frd_FriendList_ack::next_)
      - PROTOBUF_FIELD_OFFSET(Frd_FriendList_ack, totleinvite_)>(
          reinterpret_cast<char*>(&totleinvite_),
          reinterpret_cast<char*>(&other->totleinvite_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Frd_FriendList_ack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_friend_5fsystem_2eproto_getter, &descriptor_table_friend_5fsystem_2eproto_once,
      file_level_metadata_friend_5fsystem_2eproto[1]);
}

// ===================================================================

class Frd_FriendInvite_req::_Internal {
 public:
};

Frd_FriendInvite_req::Frd_FriendInvite_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Frd_FriendInvite_req)
}
Frd_FriendInvite_req::Frd_FriendInvite_req(const Frd_FriendInvite_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invite_iid_ = from.invite_iid_;
  // @@protoc_insertion_point(copy_constructor:PRO.Frd_FriendInvite_req)
}

inline void Frd_FriendInvite_req::SharedCtor() {
invite_iid_ = int64_t{0};
}

Frd_FriendInvite_req::~Frd_FriendInvite_req() {
  // @@protoc_insertion_point(destructor:PRO.Frd_FriendInvite_req)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Frd_FriendInvite_req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Frd_FriendInvite_req::ArenaDtor(void* object) {
  Frd_FriendInvite_req* _this = reinterpret_cast< Frd_FriendInvite_req* >(object);
  (void)_this;
}
void Frd_FriendInvite_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Frd_FriendInvite_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Frd_FriendInvite_req::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Frd_FriendInvite_req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  invite_iid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Frd_FriendInvite_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 invite_iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          invite_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Frd_FriendInvite_req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Frd_FriendInvite_req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 invite_iid = 1;
  if (this->_internal_invite_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_invite_iid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Frd_FriendInvite_req)
  return target;
}

size_t Frd_FriendInvite_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Frd_FriendInvite_req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 invite_iid = 1;
  if (this->_internal_invite_iid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_invite_iid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Frd_FriendInvite_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Frd_FriendInvite_req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Frd_FriendInvite_req::GetClassData() const { return &_class_data_; }

void Frd_FriendInvite_req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Frd_FriendInvite_req *>(to)->MergeFrom(
      static_cast<const Frd_FriendInvite_req &>(from));
}


void Frd_FriendInvite_req::MergeFrom(const Frd_FriendInvite_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Frd_FriendInvite_req)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_invite_iid() != 0) {
    _internal_set_invite_iid(from._internal_invite_iid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Frd_FriendInvite_req::CopyFrom(const Frd_FriendInvite_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Frd_FriendInvite_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frd_FriendInvite_req::IsInitialized() const {
  return true;
}

void Frd_FriendInvite_req::InternalSwap(Frd_FriendInvite_req* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(invite_iid_, other->invite_iid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Frd_FriendInvite_req::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_friend_5fsystem_2eproto_getter, &descriptor_table_friend_5fsystem_2eproto_once,
      file_level_metadata_friend_5fsystem_2eproto[2]);
}

// ===================================================================

class Frd_FriendInvite_ack::_Internal {
 public:
  using HasBits = decltype(std::declval<Frd_FriendInvite_ack>()._has_bits_);
  static const ::PRO::FriendInviteItem& invite(const Frd_FriendInvite_ack* msg);
  static void set_has_invite(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PRO::FriendInviteItem&
Frd_FriendInvite_ack::_Internal::invite(const Frd_FriendInvite_ack* msg) {
  return *msg->invite_;
}
void Frd_FriendInvite_ack::clear_invite() {
  if (invite_ != nullptr) invite_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Frd_FriendInvite_ack::Frd_FriendInvite_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Frd_FriendInvite_ack)
}
Frd_FriendInvite_ack::Frd_FriendInvite_ack(const Frd_FriendInvite_ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_invite()) {
    invite_ = new ::PRO::FriendInviteItem(*from.invite_);
  } else {
    invite_ = nullptr;
  }
  ::memcpy(&invite_iid_, &from.invite_iid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&invite_iid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:PRO.Frd_FriendInvite_ack)
}

inline void Frd_FriendInvite_ack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&invite_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&invite_)) + sizeof(result_));
}

Frd_FriendInvite_ack::~Frd_FriendInvite_ack() {
  // @@protoc_insertion_point(destructor:PRO.Frd_FriendInvite_ack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Frd_FriendInvite_ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete invite_;
}

void Frd_FriendInvite_ack::ArenaDtor(void* object) {
  Frd_FriendInvite_ack* _this = reinterpret_cast< Frd_FriendInvite_ack* >(object);
  (void)_this;
}
void Frd_FriendInvite_ack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Frd_FriendInvite_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Frd_FriendInvite_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Frd_FriendInvite_ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(invite_ != nullptr);
    invite_->Clear();
  }
  ::memset(&invite_iid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&invite_iid_)) + sizeof(result_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Frd_FriendInvite_ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 invite_iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          invite_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PRO.FriendInviteItem invite = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_invite(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Frd_FriendInvite_ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Frd_FriendInvite_ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 invite_iid = 1;
  if (this->_internal_invite_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_invite_iid(), target);
  }

  // int32 result = 2;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_result(), target);
  }

  // optional .PRO.FriendInviteItem invite = 3;
  if (_internal_has_invite()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::invite(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Frd_FriendInvite_ack)
  return target;
}

size_t Frd_FriendInvite_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Frd_FriendInvite_ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PRO.FriendInviteItem invite = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *invite_);
  }

  // int64 invite_iid = 1;
  if (this->_internal_invite_iid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_invite_iid());
  }

  // int32 result = 2;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Frd_FriendInvite_ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Frd_FriendInvite_ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Frd_FriendInvite_ack::GetClassData() const { return &_class_data_; }

void Frd_FriendInvite_ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Frd_FriendInvite_ack *>(to)->MergeFrom(
      static_cast<const Frd_FriendInvite_ack &>(from));
}


void Frd_FriendInvite_ack::MergeFrom(const Frd_FriendInvite_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Frd_FriendInvite_ack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_invite()) {
    _internal_mutable_invite()->::PRO::FriendInviteItem::MergeFrom(from._internal_invite());
  }
  if (from._internal_invite_iid() != 0) {
    _internal_set_invite_iid(from._internal_invite_iid());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Frd_FriendInvite_ack::CopyFrom(const Frd_FriendInvite_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Frd_FriendInvite_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frd_FriendInvite_ack::IsInitialized() const {
  return true;
}

void Frd_FriendInvite_ack::InternalSwap(Frd_FriendInvite_ack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Frd_FriendInvite_ack, result_)
      + sizeof(Frd_FriendInvite_ack::result_)
      - PROTOBUF_FIELD_OFFSET(Frd_FriendInvite_ack, invite_)>(
          reinterpret_cast<char*>(&invite_),
          reinterpret_cast<char*>(&other->invite_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Frd_FriendInvite_ack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_friend_5fsystem_2eproto_getter, &descriptor_table_friend_5fsystem_2eproto_once,
      file_level_metadata_friend_5fsystem_2eproto[3]);
}

// ===================================================================

class Frd_InviteConfirm_req::_Internal {
 public:
};

Frd_InviteConfirm_req::Frd_InviteConfirm_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Frd_InviteConfirm_req)
}
Frd_InviteConfirm_req::Frd_InviteConfirm_req(const Frd_InviteConfirm_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&iid_, &from.iid_,
    static_cast<size_t>(reinterpret_cast<char*>(&agree_) -
    reinterpret_cast<char*>(&iid_)) + sizeof(agree_));
  // @@protoc_insertion_point(copy_constructor:PRO.Frd_InviteConfirm_req)
}

inline void Frd_InviteConfirm_req::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&iid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&agree_) -
    reinterpret_cast<char*>(&iid_)) + sizeof(agree_));
}

Frd_InviteConfirm_req::~Frd_InviteConfirm_req() {
  // @@protoc_insertion_point(destructor:PRO.Frd_InviteConfirm_req)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Frd_InviteConfirm_req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Frd_InviteConfirm_req::ArenaDtor(void* object) {
  Frd_InviteConfirm_req* _this = reinterpret_cast< Frd_InviteConfirm_req* >(object);
  (void)_this;
}
void Frd_InviteConfirm_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Frd_InviteConfirm_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Frd_InviteConfirm_req::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Frd_InviteConfirm_req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&iid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&agree_) -
      reinterpret_cast<char*>(&iid_)) + sizeof(agree_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Frd_InviteConfirm_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool agree = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          agree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Frd_InviteConfirm_req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Frd_InviteConfirm_req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 iid = 1;
  if (this->_internal_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_iid(), target);
  }

  // bool agree = 2;
  if (this->_internal_agree() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_agree(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Frd_InviteConfirm_req)
  return target;
}

size_t Frd_InviteConfirm_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Frd_InviteConfirm_req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 iid = 1;
  if (this->_internal_iid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_iid());
  }

  // bool agree = 2;
  if (this->_internal_agree() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Frd_InviteConfirm_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Frd_InviteConfirm_req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Frd_InviteConfirm_req::GetClassData() const { return &_class_data_; }

void Frd_InviteConfirm_req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Frd_InviteConfirm_req *>(to)->MergeFrom(
      static_cast<const Frd_InviteConfirm_req &>(from));
}


void Frd_InviteConfirm_req::MergeFrom(const Frd_InviteConfirm_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Frd_InviteConfirm_req)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_iid() != 0) {
    _internal_set_iid(from._internal_iid());
  }
  if (from._internal_agree() != 0) {
    _internal_set_agree(from._internal_agree());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Frd_InviteConfirm_req::CopyFrom(const Frd_InviteConfirm_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Frd_InviteConfirm_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frd_InviteConfirm_req::IsInitialized() const {
  return true;
}

void Frd_InviteConfirm_req::InternalSwap(Frd_InviteConfirm_req* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Frd_InviteConfirm_req, agree_)
      + sizeof(Frd_InviteConfirm_req::agree_)
      - PROTOBUF_FIELD_OFFSET(Frd_InviteConfirm_req, iid_)>(
          reinterpret_cast<char*>(&iid_),
          reinterpret_cast<char*>(&other->iid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Frd_InviteConfirm_req::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_friend_5fsystem_2eproto_getter, &descriptor_table_friend_5fsystem_2eproto_once,
      file_level_metadata_friend_5fsystem_2eproto[4]);
}

// ===================================================================

class Frd_InviteConfirm_ack::_Internal {
 public:
  using HasBits = decltype(std::declval<Frd_InviteConfirm_ack>()._has_bits_);
  static const ::PRO::FriendRelation& friend_(const Frd_InviteConfirm_ack* msg);
  static void set_has_friend_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PRO::FriendRelation&
Frd_InviteConfirm_ack::_Internal::friend_(const Frd_InviteConfirm_ack* msg) {
  return *msg->friend__;
}
void Frd_InviteConfirm_ack::clear_friend_() {
  if (friend__ != nullptr) friend__->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Frd_InviteConfirm_ack::Frd_InviteConfirm_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Frd_InviteConfirm_ack)
}
Frd_InviteConfirm_ack::Frd_InviteConfirm_ack(const Frd_InviteConfirm_ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_friend_()) {
    friend__ = new ::PRO::FriendRelation(*from.friend__);
  } else {
    friend__ = nullptr;
  }
  ::memcpy(&iid_, &from.iid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&iid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:PRO.Frd_InviteConfirm_ack)
}

inline void Frd_InviteConfirm_ack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&friend__) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&friend__)) + sizeof(result_));
}

Frd_InviteConfirm_ack::~Frd_InviteConfirm_ack() {
  // @@protoc_insertion_point(destructor:PRO.Frd_InviteConfirm_ack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Frd_InviteConfirm_ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete friend__;
}

void Frd_InviteConfirm_ack::ArenaDtor(void* object) {
  Frd_InviteConfirm_ack* _this = reinterpret_cast< Frd_InviteConfirm_ack* >(object);
  (void)_this;
}
void Frd_InviteConfirm_ack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Frd_InviteConfirm_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Frd_InviteConfirm_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Frd_InviteConfirm_ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(friend__ != nullptr);
    friend__->Clear();
  }
  ::memset(&iid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&iid_)) + sizeof(result_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Frd_InviteConfirm_ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool agree = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          agree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PRO.FriendRelation friend = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_friend_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Frd_InviteConfirm_ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Frd_InviteConfirm_ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 iid = 1;
  if (this->_internal_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_iid(), target);
  }

  // bool agree = 2;
  if (this->_internal_agree() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_agree(), target);
  }

  // int32 result = 3;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_result(), target);
  }

  // optional .PRO.FriendRelation friend = 4;
  if (_internal_has_friend_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::friend_(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Frd_InviteConfirm_ack)
  return target;
}

size_t Frd_InviteConfirm_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Frd_InviteConfirm_ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PRO.FriendRelation friend = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *friend__);
  }

  // int64 iid = 1;
  if (this->_internal_iid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_iid());
  }

  // bool agree = 2;
  if (this->_internal_agree() != 0) {
    total_size += 1 + 1;
  }

  // int32 result = 3;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Frd_InviteConfirm_ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Frd_InviteConfirm_ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Frd_InviteConfirm_ack::GetClassData() const { return &_class_data_; }

void Frd_InviteConfirm_ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Frd_InviteConfirm_ack *>(to)->MergeFrom(
      static_cast<const Frd_InviteConfirm_ack &>(from));
}


void Frd_InviteConfirm_ack::MergeFrom(const Frd_InviteConfirm_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Frd_InviteConfirm_ack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_friend_()) {
    _internal_mutable_friend_()->::PRO::FriendRelation::MergeFrom(from._internal_friend_());
  }
  if (from._internal_iid() != 0) {
    _internal_set_iid(from._internal_iid());
  }
  if (from._internal_agree() != 0) {
    _internal_set_agree(from._internal_agree());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Frd_InviteConfirm_ack::CopyFrom(const Frd_InviteConfirm_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Frd_InviteConfirm_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frd_InviteConfirm_ack::IsInitialized() const {
  return true;
}

void Frd_InviteConfirm_ack::InternalSwap(Frd_InviteConfirm_ack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Frd_InviteConfirm_ack, result_)
      + sizeof(Frd_InviteConfirm_ack::result_)
      - PROTOBUF_FIELD_OFFSET(Frd_InviteConfirm_ack, friend__)>(
          reinterpret_cast<char*>(&friend__),
          reinterpret_cast<char*>(&other->friend__));
}

::PROTOBUF_NAMESPACE_ID::Metadata Frd_InviteConfirm_ack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_friend_5fsystem_2eproto_getter, &descriptor_table_friend_5fsystem_2eproto_once,
      file_level_metadata_friend_5fsystem_2eproto[5]);
}

// ===================================================================

class Frd_FriendDelete_req::_Internal {
 public:
};

Frd_FriendDelete_req::Frd_FriendDelete_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Frd_FriendDelete_req)
}
Frd_FriendDelete_req::Frd_FriendDelete_req(const Frd_FriendDelete_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  friendiid_ = from.friendiid_;
  // @@protoc_insertion_point(copy_constructor:PRO.Frd_FriendDelete_req)
}

inline void Frd_FriendDelete_req::SharedCtor() {
friendiid_ = int64_t{0};
}

Frd_FriendDelete_req::~Frd_FriendDelete_req() {
  // @@protoc_insertion_point(destructor:PRO.Frd_FriendDelete_req)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Frd_FriendDelete_req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Frd_FriendDelete_req::ArenaDtor(void* object) {
  Frd_FriendDelete_req* _this = reinterpret_cast< Frd_FriendDelete_req* >(object);
  (void)_this;
}
void Frd_FriendDelete_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Frd_FriendDelete_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Frd_FriendDelete_req::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Frd_FriendDelete_req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friendiid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Frd_FriendDelete_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 friendiid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          friendiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Frd_FriendDelete_req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Frd_FriendDelete_req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 friendiid = 1;
  if (this->_internal_friendiid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_friendiid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Frd_FriendDelete_req)
  return target;
}

size_t Frd_FriendDelete_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Frd_FriendDelete_req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 friendiid = 1;
  if (this->_internal_friendiid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_friendiid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Frd_FriendDelete_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Frd_FriendDelete_req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Frd_FriendDelete_req::GetClassData() const { return &_class_data_; }

void Frd_FriendDelete_req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Frd_FriendDelete_req *>(to)->MergeFrom(
      static_cast<const Frd_FriendDelete_req &>(from));
}


void Frd_FriendDelete_req::MergeFrom(const Frd_FriendDelete_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Frd_FriendDelete_req)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_friendiid() != 0) {
    _internal_set_friendiid(from._internal_friendiid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Frd_FriendDelete_req::CopyFrom(const Frd_FriendDelete_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Frd_FriendDelete_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frd_FriendDelete_req::IsInitialized() const {
  return true;
}

void Frd_FriendDelete_req::InternalSwap(Frd_FriendDelete_req* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(friendiid_, other->friendiid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Frd_FriendDelete_req::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_friend_5fsystem_2eproto_getter, &descriptor_table_friend_5fsystem_2eproto_once,
      file_level_metadata_friend_5fsystem_2eproto[6]);
}

// ===================================================================

class Frd_FriendDelete_ack::_Internal {
 public:
};

Frd_FriendDelete_ack::Frd_FriendDelete_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Frd_FriendDelete_ack)
}
Frd_FriendDelete_ack::Frd_FriendDelete_ack(const Frd_FriendDelete_ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&friendiid_, &from.friendiid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&friendiid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:PRO.Frd_FriendDelete_ack)
}

inline void Frd_FriendDelete_ack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&friendiid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&friendiid_)) + sizeof(result_));
}

Frd_FriendDelete_ack::~Frd_FriendDelete_ack() {
  // @@protoc_insertion_point(destructor:PRO.Frd_FriendDelete_ack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Frd_FriendDelete_ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Frd_FriendDelete_ack::ArenaDtor(void* object) {
  Frd_FriendDelete_ack* _this = reinterpret_cast< Frd_FriendDelete_ack* >(object);
  (void)_this;
}
void Frd_FriendDelete_ack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Frd_FriendDelete_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Frd_FriendDelete_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Frd_FriendDelete_ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&friendiid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&friendiid_)) + sizeof(result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Frd_FriendDelete_ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 friendiid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          friendiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Frd_FriendDelete_ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Frd_FriendDelete_ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 friendiid = 1;
  if (this->_internal_friendiid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_friendiid(), target);
  }

  // int32 result = 2;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Frd_FriendDelete_ack)
  return target;
}

size_t Frd_FriendDelete_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Frd_FriendDelete_ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 friendiid = 1;
  if (this->_internal_friendiid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_friendiid());
  }

  // int32 result = 2;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Frd_FriendDelete_ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Frd_FriendDelete_ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Frd_FriendDelete_ack::GetClassData() const { return &_class_data_; }

void Frd_FriendDelete_ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Frd_FriendDelete_ack *>(to)->MergeFrom(
      static_cast<const Frd_FriendDelete_ack &>(from));
}


void Frd_FriendDelete_ack::MergeFrom(const Frd_FriendDelete_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Frd_FriendDelete_ack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_friendiid() != 0) {
    _internal_set_friendiid(from._internal_friendiid());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Frd_FriendDelete_ack::CopyFrom(const Frd_FriendDelete_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Frd_FriendDelete_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frd_FriendDelete_ack::IsInitialized() const {
  return true;
}

void Frd_FriendDelete_ack::InternalSwap(Frd_FriendDelete_ack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Frd_FriendDelete_ack, result_)
      + sizeof(Frd_FriendDelete_ack::result_)
      - PROTOBUF_FIELD_OFFSET(Frd_FriendDelete_ack, friendiid_)>(
          reinterpret_cast<char*>(&friendiid_),
          reinterpret_cast<char*>(&other->friendiid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Frd_FriendDelete_ack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_friend_5fsystem_2eproto_getter, &descriptor_table_friend_5fsystem_2eproto_once,
      file_level_metadata_friend_5fsystem_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace PRO
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PRO::Frd_FriendList_req* Arena::CreateMaybeMessage< ::PRO::Frd_FriendList_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Frd_FriendList_req >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Frd_FriendList_ack* Arena::CreateMaybeMessage< ::PRO::Frd_FriendList_ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Frd_FriendList_ack >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Frd_FriendInvite_req* Arena::CreateMaybeMessage< ::PRO::Frd_FriendInvite_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Frd_FriendInvite_req >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Frd_FriendInvite_ack* Arena::CreateMaybeMessage< ::PRO::Frd_FriendInvite_ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Frd_FriendInvite_ack >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Frd_InviteConfirm_req* Arena::CreateMaybeMessage< ::PRO::Frd_InviteConfirm_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Frd_InviteConfirm_req >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Frd_InviteConfirm_ack* Arena::CreateMaybeMessage< ::PRO::Frd_InviteConfirm_ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Frd_InviteConfirm_ack >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Frd_FriendDelete_req* Arena::CreateMaybeMessage< ::PRO::Frd_FriendDelete_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Frd_FriendDelete_req >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Frd_FriendDelete_ack* Arena::CreateMaybeMessage< ::PRO::Frd_FriendDelete_ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Frd_FriendDelete_ack >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

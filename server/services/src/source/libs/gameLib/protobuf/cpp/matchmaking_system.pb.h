// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: matchmaking_system.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_matchmaking_5fsystem_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_matchmaking_5fsystem_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "global_internal.pb.h"
#include "db_internal.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_matchmaking_5fsystem_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_matchmaking_5fsystem_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_matchmaking_5fsystem_2eproto;
namespace PRO {
class MMS_MatchMaking_ack;
struct MMS_MatchMaking_ackDefaultTypeInternal;
extern MMS_MatchMaking_ackDefaultTypeInternal _MMS_MatchMaking_ack_default_instance_;
class MMS_MatchMaking_req;
struct MMS_MatchMaking_reqDefaultTypeInternal;
extern MMS_MatchMaking_reqDefaultTypeInternal _MMS_MatchMaking_req_default_instance_;
}  // namespace PRO
PROTOBUF_NAMESPACE_OPEN
template<> ::PRO::MMS_MatchMaking_ack* Arena::CreateMaybeMessage<::PRO::MMS_MatchMaking_ack>(Arena*);
template<> ::PRO::MMS_MatchMaking_req* Arena::CreateMaybeMessage<::PRO::MMS_MatchMaking_req>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PRO {

// ===================================================================

class MMS_MatchMaking_req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.MMS_MatchMaking_req) */ {
 public:
  inline MMS_MatchMaking_req() : MMS_MatchMaking_req(nullptr) {}
  ~MMS_MatchMaking_req() override;
  explicit constexpr MMS_MatchMaking_req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MMS_MatchMaking_req(const MMS_MatchMaking_req& from);
  MMS_MatchMaking_req(MMS_MatchMaking_req&& from) noexcept
    : MMS_MatchMaking_req() {
    *this = ::std::move(from);
  }

  inline MMS_MatchMaking_req& operator=(const MMS_MatchMaking_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline MMS_MatchMaking_req& operator=(MMS_MatchMaking_req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MMS_MatchMaking_req& default_instance() {
    return *internal_default_instance();
  }
  static inline const MMS_MatchMaking_req* internal_default_instance() {
    return reinterpret_cast<const MMS_MatchMaking_req*>(
               &_MMS_MatchMaking_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MMS_MatchMaking_req& a, MMS_MatchMaking_req& b) {
    a.Swap(&b);
  }
  inline void Swap(MMS_MatchMaking_req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MMS_MatchMaking_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MMS_MatchMaking_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MMS_MatchMaking_req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MMS_MatchMaking_req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MMS_MatchMaking_req& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MMS_MatchMaking_req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.MMS_MatchMaking_req";
  }
  protected:
  explicit MMS_MatchMaking_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUtokenFieldNumber = 1,
    kBattlesFieldNumber = 2,
  };
  // optional .PRO.UserToken utoken = 1;
  bool has_utoken() const;
  private:
  bool _internal_has_utoken() const;
  public:
  void clear_utoken();
  const ::PRO::UserToken& utoken() const;
  PROTOBUF_NODISCARD ::PRO::UserToken* release_utoken();
  ::PRO::UserToken* mutable_utoken();
  void set_allocated_utoken(::PRO::UserToken* utoken);
  private:
  const ::PRO::UserToken& _internal_utoken() const;
  ::PRO::UserToken* _internal_mutable_utoken();
  public:
  void unsafe_arena_set_allocated_utoken(
      ::PRO::UserToken* utoken);
  ::PRO::UserToken* unsafe_arena_release_utoken();

  // .PRO.DBUserBattles battles = 2;
  bool has_battles() const;
  private:
  bool _internal_has_battles() const;
  public:
  void clear_battles();
  const ::PRO::DBUserBattles& battles() const;
  PROTOBUF_NODISCARD ::PRO::DBUserBattles* release_battles();
  ::PRO::DBUserBattles* mutable_battles();
  void set_allocated_battles(::PRO::DBUserBattles* battles);
  private:
  const ::PRO::DBUserBattles& _internal_battles() const;
  ::PRO::DBUserBattles* _internal_mutable_battles();
  public:
  void unsafe_arena_set_allocated_battles(
      ::PRO::DBUserBattles* battles);
  ::PRO::DBUserBattles* unsafe_arena_release_battles();

  // @@protoc_insertion_point(class_scope:PRO.MMS_MatchMaking_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PRO::UserToken* utoken_;
  ::PRO::DBUserBattles* battles_;
  friend struct ::TableStruct_matchmaking_5fsystem_2eproto;
};
// -------------------------------------------------------------------

class MMS_MatchMaking_ack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.MMS_MatchMaking_ack) */ {
 public:
  inline MMS_MatchMaking_ack() : MMS_MatchMaking_ack(nullptr) {}
  ~MMS_MatchMaking_ack() override;
  explicit constexpr MMS_MatchMaking_ack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MMS_MatchMaking_ack(const MMS_MatchMaking_ack& from);
  MMS_MatchMaking_ack(MMS_MatchMaking_ack&& from) noexcept
    : MMS_MatchMaking_ack() {
    *this = ::std::move(from);
  }

  inline MMS_MatchMaking_ack& operator=(const MMS_MatchMaking_ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline MMS_MatchMaking_ack& operator=(MMS_MatchMaking_ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MMS_MatchMaking_ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const MMS_MatchMaking_ack* internal_default_instance() {
    return reinterpret_cast<const MMS_MatchMaking_ack*>(
               &_MMS_MatchMaking_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MMS_MatchMaking_ack& a, MMS_MatchMaking_ack& b) {
    a.Swap(&b);
  }
  inline void Swap(MMS_MatchMaking_ack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MMS_MatchMaking_ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MMS_MatchMaking_ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MMS_MatchMaking_ack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MMS_MatchMaking_ack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MMS_MatchMaking_ack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MMS_MatchMaking_ack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.MMS_MatchMaking_ack";
  }
  protected:
  explicit MMS_MatchMaking_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUtokenFieldNumber = 1,
  };
  // optional .PRO.UserToken utoken = 1;
  bool has_utoken() const;
  private:
  bool _internal_has_utoken() const;
  public:
  void clear_utoken();
  const ::PRO::UserToken& utoken() const;
  PROTOBUF_NODISCARD ::PRO::UserToken* release_utoken();
  ::PRO::UserToken* mutable_utoken();
  void set_allocated_utoken(::PRO::UserToken* utoken);
  private:
  const ::PRO::UserToken& _internal_utoken() const;
  ::PRO::UserToken* _internal_mutable_utoken();
  public:
  void unsafe_arena_set_allocated_utoken(
      ::PRO::UserToken* utoken);
  ::PRO::UserToken* unsafe_arena_release_utoken();

  // @@protoc_insertion_point(class_scope:PRO.MMS_MatchMaking_ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PRO::UserToken* utoken_;
  friend struct ::TableStruct_matchmaking_5fsystem_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MMS_MatchMaking_req

// optional .PRO.UserToken utoken = 1;
inline bool MMS_MatchMaking_req::_internal_has_utoken() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || utoken_ != nullptr);
  return value;
}
inline bool MMS_MatchMaking_req::has_utoken() const {
  return _internal_has_utoken();
}
inline const ::PRO::UserToken& MMS_MatchMaking_req::_internal_utoken() const {
  const ::PRO::UserToken* p = utoken_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::UserToken&>(
      ::PRO::_UserToken_default_instance_);
}
inline const ::PRO::UserToken& MMS_MatchMaking_req::utoken() const {
  // @@protoc_insertion_point(field_get:PRO.MMS_MatchMaking_req.utoken)
  return _internal_utoken();
}
inline void MMS_MatchMaking_req::unsafe_arena_set_allocated_utoken(
    ::PRO::UserToken* utoken) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  utoken_ = utoken;
  if (utoken) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.MMS_MatchMaking_req.utoken)
}
inline ::PRO::UserToken* MMS_MatchMaking_req::release_utoken() {
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::UserToken* MMS_MatchMaking_req::unsafe_arena_release_utoken() {
  // @@protoc_insertion_point(field_release:PRO.MMS_MatchMaking_req.utoken)
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
  return temp;
}
inline ::PRO::UserToken* MMS_MatchMaking_req::_internal_mutable_utoken() {
  _has_bits_[0] |= 0x00000001u;
  if (utoken_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::UserToken>(GetArenaForAllocation());
    utoken_ = p;
  }
  return utoken_;
}
inline ::PRO::UserToken* MMS_MatchMaking_req::mutable_utoken() {
  ::PRO::UserToken* _msg = _internal_mutable_utoken();
  // @@protoc_insertion_point(field_mutable:PRO.MMS_MatchMaking_req.utoken)
  return _msg;
}
inline void MMS_MatchMaking_req::set_allocated_utoken(::PRO::UserToken* utoken) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  if (utoken) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken));
    if (message_arena != submessage_arena) {
      utoken = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, utoken, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  utoken_ = utoken;
  // @@protoc_insertion_point(field_set_allocated:PRO.MMS_MatchMaking_req.utoken)
}

// .PRO.DBUserBattles battles = 2;
inline bool MMS_MatchMaking_req::_internal_has_battles() const {
  return this != internal_default_instance() && battles_ != nullptr;
}
inline bool MMS_MatchMaking_req::has_battles() const {
  return _internal_has_battles();
}
inline const ::PRO::DBUserBattles& MMS_MatchMaking_req::_internal_battles() const {
  const ::PRO::DBUserBattles* p = battles_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::DBUserBattles&>(
      ::PRO::_DBUserBattles_default_instance_);
}
inline const ::PRO::DBUserBattles& MMS_MatchMaking_req::battles() const {
  // @@protoc_insertion_point(field_get:PRO.MMS_MatchMaking_req.battles)
  return _internal_battles();
}
inline void MMS_MatchMaking_req::unsafe_arena_set_allocated_battles(
    ::PRO::DBUserBattles* battles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(battles_);
  }
  battles_ = battles;
  if (battles) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.MMS_MatchMaking_req.battles)
}
inline ::PRO::DBUserBattles* MMS_MatchMaking_req::release_battles() {
  
  ::PRO::DBUserBattles* temp = battles_;
  battles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::DBUserBattles* MMS_MatchMaking_req::unsafe_arena_release_battles() {
  // @@protoc_insertion_point(field_release:PRO.MMS_MatchMaking_req.battles)
  
  ::PRO::DBUserBattles* temp = battles_;
  battles_ = nullptr;
  return temp;
}
inline ::PRO::DBUserBattles* MMS_MatchMaking_req::_internal_mutable_battles() {
  
  if (battles_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::DBUserBattles>(GetArenaForAllocation());
    battles_ = p;
  }
  return battles_;
}
inline ::PRO::DBUserBattles* MMS_MatchMaking_req::mutable_battles() {
  ::PRO::DBUserBattles* _msg = _internal_mutable_battles();
  // @@protoc_insertion_point(field_mutable:PRO.MMS_MatchMaking_req.battles)
  return _msg;
}
inline void MMS_MatchMaking_req::set_allocated_battles(::PRO::DBUserBattles* battles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(battles_);
  }
  if (battles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(battles));
    if (message_arena != submessage_arena) {
      battles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, battles, submessage_arena);
    }
    
  } else {
    
  }
  battles_ = battles;
  // @@protoc_insertion_point(field_set_allocated:PRO.MMS_MatchMaking_req.battles)
}

// -------------------------------------------------------------------

// MMS_MatchMaking_ack

// optional .PRO.UserToken utoken = 1;
inline bool MMS_MatchMaking_ack::_internal_has_utoken() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || utoken_ != nullptr);
  return value;
}
inline bool MMS_MatchMaking_ack::has_utoken() const {
  return _internal_has_utoken();
}
inline const ::PRO::UserToken& MMS_MatchMaking_ack::_internal_utoken() const {
  const ::PRO::UserToken* p = utoken_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::UserToken&>(
      ::PRO::_UserToken_default_instance_);
}
inline const ::PRO::UserToken& MMS_MatchMaking_ack::utoken() const {
  // @@protoc_insertion_point(field_get:PRO.MMS_MatchMaking_ack.utoken)
  return _internal_utoken();
}
inline void MMS_MatchMaking_ack::unsafe_arena_set_allocated_utoken(
    ::PRO::UserToken* utoken) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  utoken_ = utoken;
  if (utoken) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.MMS_MatchMaking_ack.utoken)
}
inline ::PRO::UserToken* MMS_MatchMaking_ack::release_utoken() {
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::UserToken* MMS_MatchMaking_ack::unsafe_arena_release_utoken() {
  // @@protoc_insertion_point(field_release:PRO.MMS_MatchMaking_ack.utoken)
  _has_bits_[0] &= ~0x00000001u;
  ::PRO::UserToken* temp = utoken_;
  utoken_ = nullptr;
  return temp;
}
inline ::PRO::UserToken* MMS_MatchMaking_ack::_internal_mutable_utoken() {
  _has_bits_[0] |= 0x00000001u;
  if (utoken_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::UserToken>(GetArenaForAllocation());
    utoken_ = p;
  }
  return utoken_;
}
inline ::PRO::UserToken* MMS_MatchMaking_ack::mutable_utoken() {
  ::PRO::UserToken* _msg = _internal_mutable_utoken();
  // @@protoc_insertion_point(field_mutable:PRO.MMS_MatchMaking_ack.utoken)
  return _msg;
}
inline void MMS_MatchMaking_ack::set_allocated_utoken(::PRO::UserToken* utoken) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken_);
  }
  if (utoken) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utoken));
    if (message_arena != submessage_arena) {
      utoken = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, utoken, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  utoken_ = utoken;
  // @@protoc_insertion_point(field_set_allocated:PRO.MMS_MatchMaking_ack.utoken)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PRO

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_matchmaking_5fsystem_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: res_internal.proto

#include "res_internal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace PRO {
constexpr Res_UserSlot_req::Res_UserSlot_req(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lsno_(int64_t{0})
  , sequence_(int64_t{0})
  , user_iid_(int64_t{0}){}
struct Res_UserSlot_reqDefaultTypeInternal {
  constexpr Res_UserSlot_reqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Res_UserSlot_reqDefaultTypeInternal() {}
  union {
    Res_UserSlot_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Res_UserSlot_reqDefaultTypeInternal _Res_UserSlot_req_default_instance_;
constexpr Res_UserSlot_ack::Res_UserSlot_ack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : proxyip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0)
  , slot_(0)
  , slottoken_(int64_t{0})
  , proxyport_(0)
  , lsno_(int64_t{0})
  , sequence_(int64_t{0})
  , user_iid_(int64_t{0}){}
struct Res_UserSlot_ackDefaultTypeInternal {
  constexpr Res_UserSlot_ackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Res_UserSlot_ackDefaultTypeInternal() {}
  union {
    Res_UserSlot_ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Res_UserSlot_ackDefaultTypeInternal _Res_UserSlot_ack_default_instance_;
constexpr Res_ProxyUserSlot_req::Res_ProxyUserSlot_req(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : proxytoken_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hgtype_(0)
  , homeiid_(int64_t{0})
  , gateiid_(int64_t{0})
  , lsno_(int64_t{0})
  , sequence_(int64_t{0})
  , user_iid_(int64_t{0}){}
struct Res_ProxyUserSlot_reqDefaultTypeInternal {
  constexpr Res_ProxyUserSlot_reqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Res_ProxyUserSlot_reqDefaultTypeInternal() {}
  union {
    Res_ProxyUserSlot_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Res_ProxyUserSlot_reqDefaultTypeInternal _Res_ProxyUserSlot_req_default_instance_;
constexpr Res_ProxyUserSlot_ack::Res_ProxyUserSlot_ack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : proxyip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , proxytoken_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0)
  , slot_(0)
  , slottoken_(int64_t{0})
  , proxyport_(0)
  , hgtype_(0)
  , homeiid_(int64_t{0})
  , gateiid_(int64_t{0})
  , lsno_(int64_t{0})
  , sequence_(int64_t{0})
  , user_iid_(int64_t{0}){}
struct Res_ProxyUserSlot_ackDefaultTypeInternal {
  constexpr Res_ProxyUserSlot_ackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Res_ProxyUserSlot_ackDefaultTypeInternal() {}
  union {
    Res_ProxyUserSlot_ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Res_ProxyUserSlot_ackDefaultTypeInternal _Res_ProxyUserSlot_ack_default_instance_;
constexpr Res_SyncGateSlot_ntf::Res_SyncGateSlot_ntf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : syncsequence_(int64_t{0})
  , homeiid_(int64_t{0})
  , gateiid_(int64_t{0})
  , freeslots_(0){}
struct Res_SyncGateSlot_ntfDefaultTypeInternal {
  constexpr Res_SyncGateSlot_ntfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Res_SyncGateSlot_ntfDefaultTypeInternal() {}
  union {
    Res_SyncGateSlot_ntf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Res_SyncGateSlot_ntfDefaultTypeInternal _Res_SyncGateSlot_ntf_default_instance_;
}  // namespace PRO
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_res_5finternal_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_res_5finternal_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_res_5finternal_2eproto = nullptr;

const uint32_t TableStruct_res_5finternal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Res_UserSlot_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Res_UserSlot_req, lsno_),
  PROTOBUF_FIELD_OFFSET(::PRO::Res_UserSlot_req, sequence_),
  PROTOBUF_FIELD_OFFSET(::PRO::Res_UserSlot_req, user_iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::Res_UserSlot_ack, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PRO::Res_UserSlot_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Res_UserSlot_ack, result_),
  PROTOBUF_FIELD_OFFSET(::PRO::Res_UserSlot_ack, slot_),
  PROTOBUF_FIELD_OFFSET(::PRO::Res_UserSlot_ack, proxyip_),
  PROTOBUF_FIELD_OFFSET(::PRO::Res_UserSlot_ack, proxyport_),
  PROTOBUF_FIELD_OFFSET(::PRO::Res_UserSlot_ack, slottoken_),
  PROTOBUF_FIELD_OFFSET(::PRO::Res_UserSlot_ack, lsno_),
  PROTOBUF_FIELD_OFFSET(::PRO::Res_UserSlot_ack, sequence_),
  PROTOBUF_FIELD_OFFSET(::PRO::Res_UserSlot_ack, user_iid_),
  ~0u,
  1,
  0,
  3,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Res_ProxyUserSlot_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Res_ProxyUserSlot_req, proxytoken_),
  PROTOBUF_FIELD_OFFSET(::PRO::Res_ProxyUserSlot_req, homeiid_),
  PROTOBUF_FIELD_OFFSET(::PRO::Res_ProxyUserSlot_req, gateiid_),
  PROTOBUF_FIELD_OFFSET(::PRO::Res_ProxyUserSlot_req, hgtype_),
  PROTOBUF_FIELD_OFFSET(::PRO::Res_ProxyUserSlot_req, lsno_),
  PROTOBUF_FIELD_OFFSET(::PRO::Res_ProxyUserSlot_req, sequence_),
  PROTOBUF_FIELD_OFFSET(::PRO::Res_ProxyUserSlot_req, user_iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::Res_ProxyUserSlot_ack, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PRO::Res_ProxyUserSlot_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Res_ProxyUserSlot_ack, result_),
  PROTOBUF_FIELD_OFFSET(::PRO::Res_ProxyUserSlot_ack, slot_),
  PROTOBUF_FIELD_OFFSET(::PRO::Res_ProxyUserSlot_ack, proxyip_),
  PROTOBUF_FIELD_OFFSET(::PRO::Res_ProxyUserSlot_ack, proxyport_),
  PROTOBUF_FIELD_OFFSET(::PRO::Res_ProxyUserSlot_ack, slottoken_),
  PROTOBUF_FIELD_OFFSET(::PRO::Res_ProxyUserSlot_ack, proxytoken_),
  PROTOBUF_FIELD_OFFSET(::PRO::Res_ProxyUserSlot_ack, homeiid_),
  PROTOBUF_FIELD_OFFSET(::PRO::Res_ProxyUserSlot_ack, gateiid_),
  PROTOBUF_FIELD_OFFSET(::PRO::Res_ProxyUserSlot_ack, hgtype_),
  PROTOBUF_FIELD_OFFSET(::PRO::Res_ProxyUserSlot_ack, lsno_),
  PROTOBUF_FIELD_OFFSET(::PRO::Res_ProxyUserSlot_ack, sequence_),
  PROTOBUF_FIELD_OFFSET(::PRO::Res_ProxyUserSlot_ack, user_iid_),
  ~0u,
  1,
  0,
  3,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Res_SyncGateSlot_ntf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Res_SyncGateSlot_ntf, freeslots_),
  PROTOBUF_FIELD_OFFSET(::PRO::Res_SyncGateSlot_ntf, syncsequence_),
  PROTOBUF_FIELD_OFFSET(::PRO::Res_SyncGateSlot_ntf, homeiid_),
  PROTOBUF_FIELD_OFFSET(::PRO::Res_SyncGateSlot_ntf, gateiid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::PRO::Res_UserSlot_req)},
  { 9, 23, -1, sizeof(::PRO::Res_UserSlot_ack)},
  { 31, -1, -1, sizeof(::PRO::Res_ProxyUserSlot_req)},
  { 44, 62, -1, sizeof(::PRO::Res_ProxyUserSlot_ack)},
  { 74, -1, -1, sizeof(::PRO::Res_SyncGateSlot_ntf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Res_UserSlot_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Res_UserSlot_ack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Res_ProxyUserSlot_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Res_ProxyUserSlot_ack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Res_SyncGateSlot_ntf_default_instance_),
};

const char descriptor_table_protodef_res_5finternal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022res_internal.proto\022\003PRO\"D\n\020Res_UserSlo"
  "t_req\022\014\n\004lsno\030\001 \001(\003\022\020\n\010sequence\030\002 \001(\003\022\020\n"
  "\010user_iid\030\003 \001(\003\"\336\001\n\020Res_UserSlot_ack\022\016\n\006"
  "result\030\001 \001(\005\022\021\n\004slot\030\002 \001(\005H\000\210\001\001\022\024\n\007proxy"
  "ip\030\003 \001(\tH\001\210\001\001\022\026\n\tproxyport\030\004 \001(\005H\002\210\001\001\022\026\n"
  "\tslottoken\030\005 \001(\003H\003\210\001\001\022\014\n\004lsno\030\024 \001(\003\022\020\n\010s"
  "equence\030\025 \001(\003\022\020\n\010user_iid\030\026 \001(\003B\007\n\005_slot"
  "B\n\n\010_proxyipB\014\n\n_proxyportB\014\n\n_slottoken"
  "\"\217\001\n\025Res_ProxyUserSlot_req\022\022\n\nproxytoken"
  "\030\n \001(\t\022\017\n\007homeiid\030\013 \001(\003\022\017\n\007gateiid\030\014 \001(\003"
  "\022\016\n\006hgtype\030\r \001(\005\022\014\n\004lsno\030\024 \001(\003\022\020\n\010sequen"
  "ce\030\025 \001(\003\022\020\n\010user_iid\030\026 \001(\003\"\251\002\n\025Res_Proxy"
  "UserSlot_ack\022\016\n\006result\030\001 \001(\005\022\021\n\004slot\030\002 \001"
  "(\005H\000\210\001\001\022\024\n\007proxyip\030\003 \001(\tH\001\210\001\001\022\026\n\tproxypo"
  "rt\030\004 \001(\005H\002\210\001\001\022\026\n\tslottoken\030\005 \001(\003H\003\210\001\001\022\022\n"
  "\nproxytoken\030\n \001(\t\022\017\n\007homeiid\030\013 \001(\003\022\017\n\007ga"
  "teiid\030\014 \001(\003\022\016\n\006hgtype\030\r \001(\005\022\014\n\004lsno\030\024 \001("
  "\003\022\020\n\010sequence\030\025 \001(\003\022\020\n\010user_iid\030\026 \001(\003B\007\n"
  "\005_slotB\n\n\010_proxyipB\014\n\n_proxyportB\014\n\n_slo"
  "ttoken\"a\n\024Res_SyncGateSlot_ntf\022\021\n\tfreesl"
  "ots\030\001 \001(\005\022\024\n\014syncsequence\030\002 \001(\003\022\017\n\007homei"
  "id\030\004 \001(\003\022\017\n\007gateiid\030\005 \001(\003BT\n\033com.cms.cli"
  "ent.network.gproP\001Z\025gamelib/protobuf/gpr"
  "o\252\002\033com.cms.client.network.gprob\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_res_5finternal_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_res_5finternal_2eproto = {
  false, false, 959, descriptor_table_protodef_res_5finternal_2eproto, "res_internal.proto", 
  &descriptor_table_res_5finternal_2eproto_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_res_5finternal_2eproto::offsets,
  file_level_metadata_res_5finternal_2eproto, file_level_enum_descriptors_res_5finternal_2eproto, file_level_service_descriptors_res_5finternal_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_res_5finternal_2eproto_getter() {
  return &descriptor_table_res_5finternal_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_res_5finternal_2eproto(&descriptor_table_res_5finternal_2eproto);
namespace PRO {

// ===================================================================

class Res_UserSlot_req::_Internal {
 public:
};

Res_UserSlot_req::Res_UserSlot_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Res_UserSlot_req)
}
Res_UserSlot_req::Res_UserSlot_req(const Res_UserSlot_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lsno_, &from.lsno_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_iid_) -
    reinterpret_cast<char*>(&lsno_)) + sizeof(user_iid_));
  // @@protoc_insertion_point(copy_constructor:PRO.Res_UserSlot_req)
}

inline void Res_UserSlot_req::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lsno_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_iid_) -
    reinterpret_cast<char*>(&lsno_)) + sizeof(user_iid_));
}

Res_UserSlot_req::~Res_UserSlot_req() {
  // @@protoc_insertion_point(destructor:PRO.Res_UserSlot_req)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Res_UserSlot_req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Res_UserSlot_req::ArenaDtor(void* object) {
  Res_UserSlot_req* _this = reinterpret_cast< Res_UserSlot_req* >(object);
  (void)_this;
}
void Res_UserSlot_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Res_UserSlot_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Res_UserSlot_req::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Res_UserSlot_req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lsno_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_iid_) -
      reinterpret_cast<char*>(&lsno_)) + sizeof(user_iid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Res_UserSlot_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 lsno = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          lsno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 sequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 user_iid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          user_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Res_UserSlot_req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Res_UserSlot_req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 lsno = 1;
  if (this->_internal_lsno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_lsno(), target);
  }

  // int64 sequence = 2;
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_sequence(), target);
  }

  // int64 user_iid = 3;
  if (this->_internal_user_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_user_iid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Res_UserSlot_req)
  return target;
}

size_t Res_UserSlot_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Res_UserSlot_req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 lsno = 1;
  if (this->_internal_lsno() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_lsno());
  }

  // int64 sequence = 2;
  if (this->_internal_sequence() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_sequence());
  }

  // int64 user_iid = 3;
  if (this->_internal_user_iid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_user_iid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Res_UserSlot_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Res_UserSlot_req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Res_UserSlot_req::GetClassData() const { return &_class_data_; }

void Res_UserSlot_req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Res_UserSlot_req *>(to)->MergeFrom(
      static_cast<const Res_UserSlot_req &>(from));
}


void Res_UserSlot_req::MergeFrom(const Res_UserSlot_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Res_UserSlot_req)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_lsno() != 0) {
    _internal_set_lsno(from._internal_lsno());
  }
  if (from._internal_sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
  if (from._internal_user_iid() != 0) {
    _internal_set_user_iid(from._internal_user_iid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Res_UserSlot_req::CopyFrom(const Res_UserSlot_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Res_UserSlot_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Res_UserSlot_req::IsInitialized() const {
  return true;
}

void Res_UserSlot_req::InternalSwap(Res_UserSlot_req* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Res_UserSlot_req, user_iid_)
      + sizeof(Res_UserSlot_req::user_iid_)
      - PROTOBUF_FIELD_OFFSET(Res_UserSlot_req, lsno_)>(
          reinterpret_cast<char*>(&lsno_),
          reinterpret_cast<char*>(&other->lsno_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Res_UserSlot_req::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_res_5finternal_2eproto_getter, &descriptor_table_res_5finternal_2eproto_once,
      file_level_metadata_res_5finternal_2eproto[0]);
}

// ===================================================================

class Res_UserSlot_ack::_Internal {
 public:
  using HasBits = decltype(std::declval<Res_UserSlot_ack>()._has_bits_);
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_proxyip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_proxyport(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_slottoken(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Res_UserSlot_ack::Res_UserSlot_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Res_UserSlot_ack)
}
Res_UserSlot_ack::Res_UserSlot_ack(const Res_UserSlot_ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  proxyip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    proxyip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_proxyip()) {
    proxyip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proxyip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_iid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(user_iid_));
  // @@protoc_insertion_point(copy_constructor:PRO.Res_UserSlot_ack)
}

inline void Res_UserSlot_ack::SharedCtor() {
proxyip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  proxyip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_iid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(user_iid_));
}

Res_UserSlot_ack::~Res_UserSlot_ack() {
  // @@protoc_insertion_point(destructor:PRO.Res_UserSlot_ack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Res_UserSlot_ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  proxyip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Res_UserSlot_ack::ArenaDtor(void* object) {
  Res_UserSlot_ack* _this = reinterpret_cast< Res_UserSlot_ack* >(object);
  (void)_this;
}
void Res_UserSlot_ack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Res_UserSlot_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Res_UserSlot_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Res_UserSlot_ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    proxyip_.ClearNonDefaultToEmpty();
  }
  result_ = 0;
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&slot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&proxyport_) -
        reinterpret_cast<char*>(&slot_)) + sizeof(proxyport_));
  }
  ::memset(&lsno_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_iid_) -
      reinterpret_cast<char*>(&lsno_)) + sizeof(user_iid_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Res_UserSlot_ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_slot(&has_bits);
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string proxyip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_proxyip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.Res_UserSlot_ack.proxyip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 proxyport = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_proxyport(&has_bits);
          proxyport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 slottoken = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_slottoken(&has_bits);
          slottoken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 lsno = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          lsno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 sequence = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 user_iid = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          user_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Res_UserSlot_ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Res_UserSlot_ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // optional int32 slot = 2;
  if (_internal_has_slot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_slot(), target);
  }

  // optional string proxyip = 3;
  if (_internal_has_proxyip()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proxyip().data(), static_cast<int>(this->_internal_proxyip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.Res_UserSlot_ack.proxyip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_proxyip(), target);
  }

  // optional int32 proxyport = 4;
  if (_internal_has_proxyport()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_proxyport(), target);
  }

  // optional int64 slottoken = 5;
  if (_internal_has_slottoken()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_slottoken(), target);
  }

  // int64 lsno = 20;
  if (this->_internal_lsno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(20, this->_internal_lsno(), target);
  }

  // int64 sequence = 21;
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->_internal_sequence(), target);
  }

  // int64 user_iid = 22;
  if (this->_internal_user_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(22, this->_internal_user_iid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Res_UserSlot_ack)
  return target;
}

size_t Res_UserSlot_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Res_UserSlot_ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string proxyip = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proxyip());
  }

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  if (cached_has_bits & 0x0000000eu) {
    // optional int32 slot = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_slot());
    }

    // optional int64 slottoken = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_slottoken());
    }

    // optional int32 proxyport = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_proxyport());
    }

  }
  // int64 lsno = 20;
  if (this->_internal_lsno() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lsno());
  }

  // int64 sequence = 21;
  if (this->_internal_sequence() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sequence());
  }

  // int64 user_iid = 22;
  if (this->_internal_user_iid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_iid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Res_UserSlot_ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Res_UserSlot_ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Res_UserSlot_ack::GetClassData() const { return &_class_data_; }

void Res_UserSlot_ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Res_UserSlot_ack *>(to)->MergeFrom(
      static_cast<const Res_UserSlot_ack &>(from));
}


void Res_UserSlot_ack::MergeFrom(const Res_UserSlot_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Res_UserSlot_ack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_proxyip()) {
    _internal_set_proxyip(from._internal_proxyip());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    if (cached_has_bits & 0x00000002u) {
      slot_ = from.slot_;
    }
    if (cached_has_bits & 0x00000004u) {
      slottoken_ = from.slottoken_;
    }
    if (cached_has_bits & 0x00000008u) {
      proxyport_ = from.proxyport_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_lsno() != 0) {
    _internal_set_lsno(from._internal_lsno());
  }
  if (from._internal_sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
  if (from._internal_user_iid() != 0) {
    _internal_set_user_iid(from._internal_user_iid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Res_UserSlot_ack::CopyFrom(const Res_UserSlot_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Res_UserSlot_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Res_UserSlot_ack::IsInitialized() const {
  return true;
}

void Res_UserSlot_ack::InternalSwap(Res_UserSlot_ack* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &proxyip_, lhs_arena,
      &other->proxyip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Res_UserSlot_ack, user_iid_)
      + sizeof(Res_UserSlot_ack::user_iid_)
      - PROTOBUF_FIELD_OFFSET(Res_UserSlot_ack, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Res_UserSlot_ack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_res_5finternal_2eproto_getter, &descriptor_table_res_5finternal_2eproto_once,
      file_level_metadata_res_5finternal_2eproto[1]);
}

// ===================================================================

class Res_ProxyUserSlot_req::_Internal {
 public:
};

Res_ProxyUserSlot_req::Res_ProxyUserSlot_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Res_ProxyUserSlot_req)
}
Res_ProxyUserSlot_req::Res_ProxyUserSlot_req(const Res_ProxyUserSlot_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  proxytoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    proxytoken_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proxytoken().empty()) {
    proxytoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proxytoken(), 
      GetArenaForAllocation());
  }
  ::memcpy(&hgtype_, &from.hgtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_iid_) -
    reinterpret_cast<char*>(&hgtype_)) + sizeof(user_iid_));
  // @@protoc_insertion_point(copy_constructor:PRO.Res_ProxyUserSlot_req)
}

inline void Res_ProxyUserSlot_req::SharedCtor() {
proxytoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  proxytoken_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hgtype_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_iid_) -
    reinterpret_cast<char*>(&hgtype_)) + sizeof(user_iid_));
}

Res_ProxyUserSlot_req::~Res_ProxyUserSlot_req() {
  // @@protoc_insertion_point(destructor:PRO.Res_ProxyUserSlot_req)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Res_ProxyUserSlot_req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  proxytoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Res_ProxyUserSlot_req::ArenaDtor(void* object) {
  Res_ProxyUserSlot_req* _this = reinterpret_cast< Res_ProxyUserSlot_req* >(object);
  (void)_this;
}
void Res_ProxyUserSlot_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Res_ProxyUserSlot_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Res_ProxyUserSlot_req::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Res_ProxyUserSlot_req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proxytoken_.ClearToEmpty();
  ::memset(&hgtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_iid_) -
      reinterpret_cast<char*>(&hgtype_)) + sizeof(user_iid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Res_ProxyUserSlot_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string proxytoken = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_proxytoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.Res_ProxyUserSlot_req.proxytoken"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 homeiid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          homeiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 gateiid = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          gateiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hgtype = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          hgtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 lsno = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          lsno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 sequence = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 user_iid = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          user_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Res_ProxyUserSlot_req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Res_ProxyUserSlot_req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string proxytoken = 10;
  if (!this->_internal_proxytoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proxytoken().data(), static_cast<int>(this->_internal_proxytoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.Res_ProxyUserSlot_req.proxytoken");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_proxytoken(), target);
  }

  // int64 homeiid = 11;
  if (this->_internal_homeiid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_homeiid(), target);
  }

  // int64 gateiid = 12;
  if (this->_internal_gateiid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_gateiid(), target);
  }

  // int32 hgtype = 13;
  if (this->_internal_hgtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_hgtype(), target);
  }

  // int64 lsno = 20;
  if (this->_internal_lsno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(20, this->_internal_lsno(), target);
  }

  // int64 sequence = 21;
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->_internal_sequence(), target);
  }

  // int64 user_iid = 22;
  if (this->_internal_user_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(22, this->_internal_user_iid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Res_ProxyUserSlot_req)
  return target;
}

size_t Res_ProxyUserSlot_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Res_ProxyUserSlot_req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string proxytoken = 10;
  if (!this->_internal_proxytoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proxytoken());
  }

  // int32 hgtype = 13;
  if (this->_internal_hgtype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_hgtype());
  }

  // int64 homeiid = 11;
  if (this->_internal_homeiid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_homeiid());
  }

  // int64 gateiid = 12;
  if (this->_internal_gateiid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_gateiid());
  }

  // int64 lsno = 20;
  if (this->_internal_lsno() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lsno());
  }

  // int64 sequence = 21;
  if (this->_internal_sequence() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sequence());
  }

  // int64 user_iid = 22;
  if (this->_internal_user_iid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_iid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Res_ProxyUserSlot_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Res_ProxyUserSlot_req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Res_ProxyUserSlot_req::GetClassData() const { return &_class_data_; }

void Res_ProxyUserSlot_req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Res_ProxyUserSlot_req *>(to)->MergeFrom(
      static_cast<const Res_ProxyUserSlot_req &>(from));
}


void Res_ProxyUserSlot_req::MergeFrom(const Res_ProxyUserSlot_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Res_ProxyUserSlot_req)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_proxytoken().empty()) {
    _internal_set_proxytoken(from._internal_proxytoken());
  }
  if (from._internal_hgtype() != 0) {
    _internal_set_hgtype(from._internal_hgtype());
  }
  if (from._internal_homeiid() != 0) {
    _internal_set_homeiid(from._internal_homeiid());
  }
  if (from._internal_gateiid() != 0) {
    _internal_set_gateiid(from._internal_gateiid());
  }
  if (from._internal_lsno() != 0) {
    _internal_set_lsno(from._internal_lsno());
  }
  if (from._internal_sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
  if (from._internal_user_iid() != 0) {
    _internal_set_user_iid(from._internal_user_iid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Res_ProxyUserSlot_req::CopyFrom(const Res_ProxyUserSlot_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Res_ProxyUserSlot_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Res_ProxyUserSlot_req::IsInitialized() const {
  return true;
}

void Res_ProxyUserSlot_req::InternalSwap(Res_ProxyUserSlot_req* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &proxytoken_, lhs_arena,
      &other->proxytoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Res_ProxyUserSlot_req, user_iid_)
      + sizeof(Res_ProxyUserSlot_req::user_iid_)
      - PROTOBUF_FIELD_OFFSET(Res_ProxyUserSlot_req, hgtype_)>(
          reinterpret_cast<char*>(&hgtype_),
          reinterpret_cast<char*>(&other->hgtype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Res_ProxyUserSlot_req::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_res_5finternal_2eproto_getter, &descriptor_table_res_5finternal_2eproto_once,
      file_level_metadata_res_5finternal_2eproto[2]);
}

// ===================================================================

class Res_ProxyUserSlot_ack::_Internal {
 public:
  using HasBits = decltype(std::declval<Res_ProxyUserSlot_ack>()._has_bits_);
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_proxyip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_proxyport(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_slottoken(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Res_ProxyUserSlot_ack::Res_ProxyUserSlot_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Res_ProxyUserSlot_ack)
}
Res_ProxyUserSlot_ack::Res_ProxyUserSlot_ack(const Res_ProxyUserSlot_ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  proxyip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    proxyip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_proxyip()) {
    proxyip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proxyip(), 
      GetArenaForAllocation());
  }
  proxytoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    proxytoken_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proxytoken().empty()) {
    proxytoken_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proxytoken(), 
      GetArenaForAllocation());
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_iid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(user_iid_));
  // @@protoc_insertion_point(copy_constructor:PRO.Res_ProxyUserSlot_ack)
}

inline void Res_ProxyUserSlot_ack::SharedCtor() {
proxyip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  proxyip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
proxytoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  proxytoken_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_iid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(user_iid_));
}

Res_ProxyUserSlot_ack::~Res_ProxyUserSlot_ack() {
  // @@protoc_insertion_point(destructor:PRO.Res_ProxyUserSlot_ack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Res_ProxyUserSlot_ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  proxyip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proxytoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Res_ProxyUserSlot_ack::ArenaDtor(void* object) {
  Res_ProxyUserSlot_ack* _this = reinterpret_cast< Res_ProxyUserSlot_ack* >(object);
  (void)_this;
}
void Res_ProxyUserSlot_ack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Res_ProxyUserSlot_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Res_ProxyUserSlot_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Res_ProxyUserSlot_ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    proxyip_.ClearNonDefaultToEmpty();
  }
  proxytoken_.ClearToEmpty();
  result_ = 0;
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&slot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&proxyport_) -
        reinterpret_cast<char*>(&slot_)) + sizeof(proxyport_));
  }
  ::memset(&hgtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_iid_) -
      reinterpret_cast<char*>(&hgtype_)) + sizeof(user_iid_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Res_ProxyUserSlot_ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_slot(&has_bits);
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string proxyip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_proxyip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.Res_ProxyUserSlot_ack.proxyip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 proxyport = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_proxyport(&has_bits);
          proxyport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 slottoken = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_slottoken(&has_bits);
          slottoken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string proxytoken = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_proxytoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.Res_ProxyUserSlot_ack.proxytoken"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 homeiid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          homeiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 gateiid = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          gateiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hgtype = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          hgtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 lsno = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          lsno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 sequence = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 user_iid = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          user_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Res_ProxyUserSlot_ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Res_ProxyUserSlot_ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // optional int32 slot = 2;
  if (_internal_has_slot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_slot(), target);
  }

  // optional string proxyip = 3;
  if (_internal_has_proxyip()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proxyip().data(), static_cast<int>(this->_internal_proxyip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.Res_ProxyUserSlot_ack.proxyip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_proxyip(), target);
  }

  // optional int32 proxyport = 4;
  if (_internal_has_proxyport()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_proxyport(), target);
  }

  // optional int64 slottoken = 5;
  if (_internal_has_slottoken()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_slottoken(), target);
  }

  // string proxytoken = 10;
  if (!this->_internal_proxytoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proxytoken().data(), static_cast<int>(this->_internal_proxytoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.Res_ProxyUserSlot_ack.proxytoken");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_proxytoken(), target);
  }

  // int64 homeiid = 11;
  if (this->_internal_homeiid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_homeiid(), target);
  }

  // int64 gateiid = 12;
  if (this->_internal_gateiid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_gateiid(), target);
  }

  // int32 hgtype = 13;
  if (this->_internal_hgtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_hgtype(), target);
  }

  // int64 lsno = 20;
  if (this->_internal_lsno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(20, this->_internal_lsno(), target);
  }

  // int64 sequence = 21;
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->_internal_sequence(), target);
  }

  // int64 user_iid = 22;
  if (this->_internal_user_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(22, this->_internal_user_iid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Res_ProxyUserSlot_ack)
  return target;
}

size_t Res_ProxyUserSlot_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Res_ProxyUserSlot_ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string proxyip = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proxyip());
  }

  // string proxytoken = 10;
  if (!this->_internal_proxytoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proxytoken());
  }

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  if (cached_has_bits & 0x0000000eu) {
    // optional int32 slot = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_slot());
    }

    // optional int64 slottoken = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_slottoken());
    }

    // optional int32 proxyport = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_proxyport());
    }

  }
  // int32 hgtype = 13;
  if (this->_internal_hgtype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_hgtype());
  }

  // int64 homeiid = 11;
  if (this->_internal_homeiid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_homeiid());
  }

  // int64 gateiid = 12;
  if (this->_internal_gateiid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_gateiid());
  }

  // int64 lsno = 20;
  if (this->_internal_lsno() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lsno());
  }

  // int64 sequence = 21;
  if (this->_internal_sequence() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sequence());
  }

  // int64 user_iid = 22;
  if (this->_internal_user_iid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_user_iid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Res_ProxyUserSlot_ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Res_ProxyUserSlot_ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Res_ProxyUserSlot_ack::GetClassData() const { return &_class_data_; }

void Res_ProxyUserSlot_ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Res_ProxyUserSlot_ack *>(to)->MergeFrom(
      static_cast<const Res_ProxyUserSlot_ack &>(from));
}


void Res_ProxyUserSlot_ack::MergeFrom(const Res_ProxyUserSlot_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Res_ProxyUserSlot_ack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_proxyip()) {
    _internal_set_proxyip(from._internal_proxyip());
  }
  if (!from._internal_proxytoken().empty()) {
    _internal_set_proxytoken(from._internal_proxytoken());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    if (cached_has_bits & 0x00000002u) {
      slot_ = from.slot_;
    }
    if (cached_has_bits & 0x00000004u) {
      slottoken_ = from.slottoken_;
    }
    if (cached_has_bits & 0x00000008u) {
      proxyport_ = from.proxyport_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_hgtype() != 0) {
    _internal_set_hgtype(from._internal_hgtype());
  }
  if (from._internal_homeiid() != 0) {
    _internal_set_homeiid(from._internal_homeiid());
  }
  if (from._internal_gateiid() != 0) {
    _internal_set_gateiid(from._internal_gateiid());
  }
  if (from._internal_lsno() != 0) {
    _internal_set_lsno(from._internal_lsno());
  }
  if (from._internal_sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
  if (from._internal_user_iid() != 0) {
    _internal_set_user_iid(from._internal_user_iid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Res_ProxyUserSlot_ack::CopyFrom(const Res_ProxyUserSlot_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Res_ProxyUserSlot_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Res_ProxyUserSlot_ack::IsInitialized() const {
  return true;
}

void Res_ProxyUserSlot_ack::InternalSwap(Res_ProxyUserSlot_ack* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &proxyip_, lhs_arena,
      &other->proxyip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &proxytoken_, lhs_arena,
      &other->proxytoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Res_ProxyUserSlot_ack, user_iid_)
      + sizeof(Res_ProxyUserSlot_ack::user_iid_)
      - PROTOBUF_FIELD_OFFSET(Res_ProxyUserSlot_ack, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Res_ProxyUserSlot_ack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_res_5finternal_2eproto_getter, &descriptor_table_res_5finternal_2eproto_once,
      file_level_metadata_res_5finternal_2eproto[3]);
}

// ===================================================================

class Res_SyncGateSlot_ntf::_Internal {
 public:
};

Res_SyncGateSlot_ntf::Res_SyncGateSlot_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Res_SyncGateSlot_ntf)
}
Res_SyncGateSlot_ntf::Res_SyncGateSlot_ntf(const Res_SyncGateSlot_ntf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&syncsequence_, &from.syncsequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&freeslots_) -
    reinterpret_cast<char*>(&syncsequence_)) + sizeof(freeslots_));
  // @@protoc_insertion_point(copy_constructor:PRO.Res_SyncGateSlot_ntf)
}

inline void Res_SyncGateSlot_ntf::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&syncsequence_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&freeslots_) -
    reinterpret_cast<char*>(&syncsequence_)) + sizeof(freeslots_));
}

Res_SyncGateSlot_ntf::~Res_SyncGateSlot_ntf() {
  // @@protoc_insertion_point(destructor:PRO.Res_SyncGateSlot_ntf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Res_SyncGateSlot_ntf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Res_SyncGateSlot_ntf::ArenaDtor(void* object) {
  Res_SyncGateSlot_ntf* _this = reinterpret_cast< Res_SyncGateSlot_ntf* >(object);
  (void)_this;
}
void Res_SyncGateSlot_ntf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Res_SyncGateSlot_ntf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Res_SyncGateSlot_ntf::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Res_SyncGateSlot_ntf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&syncsequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&freeslots_) -
      reinterpret_cast<char*>(&syncsequence_)) + sizeof(freeslots_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Res_SyncGateSlot_ntf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 freeslots = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          freeslots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 syncsequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          syncsequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 homeiid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          homeiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 gateiid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          gateiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Res_SyncGateSlot_ntf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Res_SyncGateSlot_ntf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 freeslots = 1;
  if (this->_internal_freeslots() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_freeslots(), target);
  }

  // int64 syncsequence = 2;
  if (this->_internal_syncsequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_syncsequence(), target);
  }

  // int64 homeiid = 4;
  if (this->_internal_homeiid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_homeiid(), target);
  }

  // int64 gateiid = 5;
  if (this->_internal_gateiid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_gateiid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Res_SyncGateSlot_ntf)
  return target;
}

size_t Res_SyncGateSlot_ntf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Res_SyncGateSlot_ntf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 syncsequence = 2;
  if (this->_internal_syncsequence() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_syncsequence());
  }

  // int64 homeiid = 4;
  if (this->_internal_homeiid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_homeiid());
  }

  // int64 gateiid = 5;
  if (this->_internal_gateiid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_gateiid());
  }

  // int32 freeslots = 1;
  if (this->_internal_freeslots() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_freeslots());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Res_SyncGateSlot_ntf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Res_SyncGateSlot_ntf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Res_SyncGateSlot_ntf::GetClassData() const { return &_class_data_; }

void Res_SyncGateSlot_ntf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Res_SyncGateSlot_ntf *>(to)->MergeFrom(
      static_cast<const Res_SyncGateSlot_ntf &>(from));
}


void Res_SyncGateSlot_ntf::MergeFrom(const Res_SyncGateSlot_ntf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Res_SyncGateSlot_ntf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_syncsequence() != 0) {
    _internal_set_syncsequence(from._internal_syncsequence());
  }
  if (from._internal_homeiid() != 0) {
    _internal_set_homeiid(from._internal_homeiid());
  }
  if (from._internal_gateiid() != 0) {
    _internal_set_gateiid(from._internal_gateiid());
  }
  if (from._internal_freeslots() != 0) {
    _internal_set_freeslots(from._internal_freeslots());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Res_SyncGateSlot_ntf::CopyFrom(const Res_SyncGateSlot_ntf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Res_SyncGateSlot_ntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Res_SyncGateSlot_ntf::IsInitialized() const {
  return true;
}

void Res_SyncGateSlot_ntf::InternalSwap(Res_SyncGateSlot_ntf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Res_SyncGateSlot_ntf, freeslots_)
      + sizeof(Res_SyncGateSlot_ntf::freeslots_)
      - PROTOBUF_FIELD_OFFSET(Res_SyncGateSlot_ntf, syncsequence_)>(
          reinterpret_cast<char*>(&syncsequence_),
          reinterpret_cast<char*>(&other->syncsequence_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Res_SyncGateSlot_ntf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_res_5finternal_2eproto_getter, &descriptor_table_res_5finternal_2eproto_once,
      file_level_metadata_res_5finternal_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace PRO
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PRO::Res_UserSlot_req* Arena::CreateMaybeMessage< ::PRO::Res_UserSlot_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Res_UserSlot_req >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Res_UserSlot_ack* Arena::CreateMaybeMessage< ::PRO::Res_UserSlot_ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Res_UserSlot_ack >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Res_ProxyUserSlot_req* Arena::CreateMaybeMessage< ::PRO::Res_ProxyUserSlot_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Res_ProxyUserSlot_req >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Res_ProxyUserSlot_ack* Arena::CreateMaybeMessage< ::PRO::Res_ProxyUserSlot_ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Res_ProxyUserSlot_ack >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Res_SyncGateSlot_ntf* Arena::CreateMaybeMessage< ::PRO::Res_SyncGateSlot_ntf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Res_SyncGateSlot_ntf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

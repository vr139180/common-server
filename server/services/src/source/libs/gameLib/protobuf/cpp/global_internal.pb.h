// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: global_internal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_global_5finternal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_global_5finternal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_global_5finternal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_global_5finternal_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_global_5finternal_2eproto;
namespace PRO {
class FriendInviteItem;
struct FriendInviteItemDefaultTypeInternal;
extern FriendInviteItemDefaultTypeInternal _FriendInviteItem_default_instance_;
class FriendRelation;
struct FriendRelationDefaultTypeInternal;
extern FriendRelationDefaultTypeInternal _FriendRelation_default_instance_;
class FriendUserInfo;
struct FriendUserInfoDefaultTypeInternal;
extern FriendUserInfoDefaultTypeInternal _FriendUserInfo_default_instance_;
class MailNormalItem;
struct MailNormalItemDefaultTypeInternal;
extern MailNormalItemDefaultTypeInternal _MailNormalItem_default_instance_;
class MailNormalItems;
struct MailNormalItemsDefaultTypeInternal;
extern MailNormalItemsDefaultTypeInternal _MailNormalItems_default_instance_;
class MailSystemItem;
struct MailSystemItemDefaultTypeInternal;
extern MailSystemItemDefaultTypeInternal _MailSystemItem_default_instance_;
class MailSystemItems;
struct MailSystemItemsDefaultTypeInternal;
extern MailSystemItemsDefaultTypeInternal _MailSystemItems_default_instance_;
class UserToken;
struct UserTokenDefaultTypeInternal;
extern UserTokenDefaultTypeInternal _UserToken_default_instance_;
}  // namespace PRO
PROTOBUF_NAMESPACE_OPEN
template<> ::PRO::FriendInviteItem* Arena::CreateMaybeMessage<::PRO::FriendInviteItem>(Arena*);
template<> ::PRO::FriendRelation* Arena::CreateMaybeMessage<::PRO::FriendRelation>(Arena*);
template<> ::PRO::FriendUserInfo* Arena::CreateMaybeMessage<::PRO::FriendUserInfo>(Arena*);
template<> ::PRO::MailNormalItem* Arena::CreateMaybeMessage<::PRO::MailNormalItem>(Arena*);
template<> ::PRO::MailNormalItems* Arena::CreateMaybeMessage<::PRO::MailNormalItems>(Arena*);
template<> ::PRO::MailSystemItem* Arena::CreateMaybeMessage<::PRO::MailSystemItem>(Arena*);
template<> ::PRO::MailSystemItems* Arena::CreateMaybeMessage<::PRO::MailSystemItems>(Arena*);
template<> ::PRO::UserToken* Arena::CreateMaybeMessage<::PRO::UserToken>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PRO {

// ===================================================================

class UserToken final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.UserToken) */ {
 public:
  inline UserToken() : UserToken(nullptr) {}
  ~UserToken() override;
  explicit constexpr UserToken(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserToken(const UserToken& from);
  UserToken(UserToken&& from) noexcept
    : UserToken() {
    *this = ::std::move(from);
  }

  inline UserToken& operator=(const UserToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserToken& operator=(UserToken&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserToken& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserToken* internal_default_instance() {
    return reinterpret_cast<const UserToken*>(
               &_UserToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserToken& a, UserToken& b) {
    a.Swap(&b);
  }
  inline void Swap(UserToken* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserToken>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserToken& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserToken& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserToken* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.UserToken";
  }
  protected:
  explicit UserToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGiduidFieldNumber = 1,
    kSlottokenFieldNumber = 2,
  };
  // int64 giduid = 1;
  void clear_giduid();
  int64_t giduid() const;
  void set_giduid(int64_t value);
  private:
  int64_t _internal_giduid() const;
  void _internal_set_giduid(int64_t value);
  public:

  // int64 slottoken = 2;
  void clear_slottoken();
  int64_t slottoken() const;
  void set_slottoken(int64_t value);
  private:
  int64_t _internal_slottoken() const;
  void _internal_set_slottoken(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.UserToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t giduid_;
  int64_t slottoken_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_global_5finternal_2eproto;
};
// -------------------------------------------------------------------

class MailSystemItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.MailSystemItem) */ {
 public:
  inline MailSystemItem() : MailSystemItem(nullptr) {}
  ~MailSystemItem() override;
  explicit constexpr MailSystemItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MailSystemItem(const MailSystemItem& from);
  MailSystemItem(MailSystemItem&& from) noexcept
    : MailSystemItem() {
    *this = ::std::move(from);
  }

  inline MailSystemItem& operator=(const MailSystemItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline MailSystemItem& operator=(MailSystemItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MailSystemItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const MailSystemItem* internal_default_instance() {
    return reinterpret_cast<const MailSystemItem*>(
               &_MailSystemItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MailSystemItem& a, MailSystemItem& b) {
    a.Swap(&b);
  }
  inline void Swap(MailSystemItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MailSystemItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MailSystemItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MailSystemItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MailSystemItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MailSystemItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MailSystemItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.MailSystemItem";
  }
  protected:
  explicit MailSystemItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 3,
    kContentsFieldNumber = 4,
    kAttachinfoFieldNumber = 6,
    kIidFieldNumber = 1,
    kSenderIidFieldNumber = 2,
    kAttachmentFieldNumber = 5,
    kCreatetimeFieldNumber = 7,
  };
  // string title = 3;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string contents = 4;
  void clear_contents();
  const std::string& contents() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contents(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contents();
  PROTOBUF_NODISCARD std::string* release_contents();
  void set_allocated_contents(std::string* contents);
  private:
  const std::string& _internal_contents() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contents(const std::string& value);
  std::string* _internal_mutable_contents();
  public:

  // string attachinfo = 6;
  void clear_attachinfo();
  const std::string& attachinfo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attachinfo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attachinfo();
  PROTOBUF_NODISCARD std::string* release_attachinfo();
  void set_allocated_attachinfo(std::string* attachinfo);
  private:
  const std::string& _internal_attachinfo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attachinfo(const std::string& value);
  std::string* _internal_mutable_attachinfo();
  public:

  // int64 iid = 1;
  void clear_iid();
  int64_t iid() const;
  void set_iid(int64_t value);
  private:
  int64_t _internal_iid() const;
  void _internal_set_iid(int64_t value);
  public:

  // int64 sender_iid = 2;
  void clear_sender_iid();
  int64_t sender_iid() const;
  void set_sender_iid(int64_t value);
  private:
  int64_t _internal_sender_iid() const;
  void _internal_set_sender_iid(int64_t value);
  public:

  // int32 attachment = 5;
  void clear_attachment();
  int32_t attachment() const;
  void set_attachment(int32_t value);
  private:
  int32_t _internal_attachment() const;
  void _internal_set_attachment(int32_t value);
  public:

  // int32 createtime = 7;
  void clear_createtime();
  int32_t createtime() const;
  void set_createtime(int32_t value);
  private:
  int32_t _internal_createtime() const;
  void _internal_set_createtime(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.MailSystemItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contents_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attachinfo_;
  int64_t iid_;
  int64_t sender_iid_;
  int32_t attachment_;
  int32_t createtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_global_5finternal_2eproto;
};
// -------------------------------------------------------------------

class MailSystemItems final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.MailSystemItems) */ {
 public:
  inline MailSystemItems() : MailSystemItems(nullptr) {}
  ~MailSystemItems() override;
  explicit constexpr MailSystemItems(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MailSystemItems(const MailSystemItems& from);
  MailSystemItems(MailSystemItems&& from) noexcept
    : MailSystemItems() {
    *this = ::std::move(from);
  }

  inline MailSystemItems& operator=(const MailSystemItems& from) {
    CopyFrom(from);
    return *this;
  }
  inline MailSystemItems& operator=(MailSystemItems&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MailSystemItems& default_instance() {
    return *internal_default_instance();
  }
  static inline const MailSystemItems* internal_default_instance() {
    return reinterpret_cast<const MailSystemItems*>(
               &_MailSystemItems_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MailSystemItems& a, MailSystemItems& b) {
    a.Swap(&b);
  }
  inline void Swap(MailSystemItems* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MailSystemItems* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MailSystemItems* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MailSystemItems>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MailSystemItems& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MailSystemItems& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MailSystemItems* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.MailSystemItems";
  }
  protected:
  explicit MailSystemItems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMailsFieldNumber = 1,
  };
  // repeated .PRO.MailSystemItem mails = 1;
  int mails_size() const;
  private:
  int _internal_mails_size() const;
  public:
  void clear_mails();
  ::PRO::MailSystemItem* mutable_mails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::MailSystemItem >*
      mutable_mails();
  private:
  const ::PRO::MailSystemItem& _internal_mails(int index) const;
  ::PRO::MailSystemItem* _internal_add_mails();
  public:
  const ::PRO::MailSystemItem& mails(int index) const;
  ::PRO::MailSystemItem* add_mails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::MailSystemItem >&
      mails() const;

  // @@protoc_insertion_point(class_scope:PRO.MailSystemItems)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::MailSystemItem > mails_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_global_5finternal_2eproto;
};
// -------------------------------------------------------------------

class MailNormalItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.MailNormalItem) */ {
 public:
  inline MailNormalItem() : MailNormalItem(nullptr) {}
  ~MailNormalItem() override;
  explicit constexpr MailNormalItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MailNormalItem(const MailNormalItem& from);
  MailNormalItem(MailNormalItem&& from) noexcept
    : MailNormalItem() {
    *this = ::std::move(from);
  }

  inline MailNormalItem& operator=(const MailNormalItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline MailNormalItem& operator=(MailNormalItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MailNormalItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const MailNormalItem* internal_default_instance() {
    return reinterpret_cast<const MailNormalItem*>(
               &_MailNormalItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MailNormalItem& a, MailNormalItem& b) {
    a.Swap(&b);
  }
  inline void Swap(MailNormalItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MailNormalItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MailNormalItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MailNormalItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MailNormalItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MailNormalItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MailNormalItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.MailNormalItem";
  }
  protected:
  explicit MailNormalItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachinfoFieldNumber = 6,
    kTitleFieldNumber = 7,
    kContentsFieldNumber = 8,
    kIidFieldNumber = 1,
    kSenderIidFieldNumber = 3,
    kStypeFieldNumber = 2,
    kAttachmentFieldNumber = 5,
    kReceiverIidFieldNumber = 4,
    kCreatetimeFieldNumber = 9,
    kReadtimeFieldNumber = 10,
  };
  // string attachinfo = 6;
  void clear_attachinfo();
  const std::string& attachinfo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attachinfo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attachinfo();
  PROTOBUF_NODISCARD std::string* release_attachinfo();
  void set_allocated_attachinfo(std::string* attachinfo);
  private:
  const std::string& _internal_attachinfo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attachinfo(const std::string& value);
  std::string* _internal_mutable_attachinfo();
  public:

  // string title = 7;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string contents = 8;
  void clear_contents();
  const std::string& contents() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contents(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contents();
  PROTOBUF_NODISCARD std::string* release_contents();
  void set_allocated_contents(std::string* contents);
  private:
  const std::string& _internal_contents() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contents(const std::string& value);
  std::string* _internal_mutable_contents();
  public:

  // int64 iid = 1;
  void clear_iid();
  int64_t iid() const;
  void set_iid(int64_t value);
  private:
  int64_t _internal_iid() const;
  void _internal_set_iid(int64_t value);
  public:

  // int64 sender_iid = 3;
  void clear_sender_iid();
  int64_t sender_iid() const;
  void set_sender_iid(int64_t value);
  private:
  int64_t _internal_sender_iid() const;
  void _internal_set_sender_iid(int64_t value);
  public:

  // int32 stype = 2;
  void clear_stype();
  int32_t stype() const;
  void set_stype(int32_t value);
  private:
  int32_t _internal_stype() const;
  void _internal_set_stype(int32_t value);
  public:

  // int32 attachment = 5;
  void clear_attachment();
  int32_t attachment() const;
  void set_attachment(int32_t value);
  private:
  int32_t _internal_attachment() const;
  void _internal_set_attachment(int32_t value);
  public:

  // int64 receiver_iid = 4;
  void clear_receiver_iid();
  int64_t receiver_iid() const;
  void set_receiver_iid(int64_t value);
  private:
  int64_t _internal_receiver_iid() const;
  void _internal_set_receiver_iid(int64_t value);
  public:

  // int32 createtime = 9;
  void clear_createtime();
  int32_t createtime() const;
  void set_createtime(int32_t value);
  private:
  int32_t _internal_createtime() const;
  void _internal_set_createtime(int32_t value);
  public:

  // int32 readtime = 10;
  void clear_readtime();
  int32_t readtime() const;
  void set_readtime(int32_t value);
  private:
  int32_t _internal_readtime() const;
  void _internal_set_readtime(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.MailNormalItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attachinfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contents_;
  int64_t iid_;
  int64_t sender_iid_;
  int32_t stype_;
  int32_t attachment_;
  int64_t receiver_iid_;
  int32_t createtime_;
  int32_t readtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_global_5finternal_2eproto;
};
// -------------------------------------------------------------------

class MailNormalItems final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.MailNormalItems) */ {
 public:
  inline MailNormalItems() : MailNormalItems(nullptr) {}
  ~MailNormalItems() override;
  explicit constexpr MailNormalItems(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MailNormalItems(const MailNormalItems& from);
  MailNormalItems(MailNormalItems&& from) noexcept
    : MailNormalItems() {
    *this = ::std::move(from);
  }

  inline MailNormalItems& operator=(const MailNormalItems& from) {
    CopyFrom(from);
    return *this;
  }
  inline MailNormalItems& operator=(MailNormalItems&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MailNormalItems& default_instance() {
    return *internal_default_instance();
  }
  static inline const MailNormalItems* internal_default_instance() {
    return reinterpret_cast<const MailNormalItems*>(
               &_MailNormalItems_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MailNormalItems& a, MailNormalItems& b) {
    a.Swap(&b);
  }
  inline void Swap(MailNormalItems* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MailNormalItems* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MailNormalItems* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MailNormalItems>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MailNormalItems& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MailNormalItems& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MailNormalItems* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.MailNormalItems";
  }
  protected:
  explicit MailNormalItems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMailsFieldNumber = 1,
  };
  // repeated .PRO.MailNormalItem mails = 1;
  int mails_size() const;
  private:
  int _internal_mails_size() const;
  public:
  void clear_mails();
  ::PRO::MailNormalItem* mutable_mails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::MailNormalItem >*
      mutable_mails();
  private:
  const ::PRO::MailNormalItem& _internal_mails(int index) const;
  ::PRO::MailNormalItem* _internal_add_mails();
  public:
  const ::PRO::MailNormalItem& mails(int index) const;
  ::PRO::MailNormalItem* add_mails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::MailNormalItem >&
      mails() const;

  // @@protoc_insertion_point(class_scope:PRO.MailNormalItems)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::MailNormalItem > mails_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_global_5finternal_2eproto;
};
// -------------------------------------------------------------------

class FriendInviteItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.FriendInviteItem) */ {
 public:
  inline FriendInviteItem() : FriendInviteItem(nullptr) {}
  ~FriendInviteItem() override;
  explicit constexpr FriendInviteItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendInviteItem(const FriendInviteItem& from);
  FriendInviteItem(FriendInviteItem&& from) noexcept
    : FriendInviteItem() {
    *this = ::std::move(from);
  }

  inline FriendInviteItem& operator=(const FriendInviteItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendInviteItem& operator=(FriendInviteItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendInviteItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendInviteItem* internal_default_instance() {
    return reinterpret_cast<const FriendInviteItem*>(
               &_FriendInviteItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FriendInviteItem& a, FriendInviteItem& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendInviteItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendInviteItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendInviteItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendInviteItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendInviteItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FriendInviteItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendInviteItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.FriendInviteItem";
  }
  protected:
  explicit FriendInviteItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 3,
    kIidFieldNumber = 1,
    kFromIidFieldNumber = 2,
    kInvitetimeFieldNumber = 4,
  };
  // string nickname = 3;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // int64 iid = 1;
  void clear_iid();
  int64_t iid() const;
  void set_iid(int64_t value);
  private:
  int64_t _internal_iid() const;
  void _internal_set_iid(int64_t value);
  public:

  // int64 from_iid = 2;
  void clear_from_iid();
  int64_t from_iid() const;
  void set_from_iid(int64_t value);
  private:
  int64_t _internal_from_iid() const;
  void _internal_set_from_iid(int64_t value);
  public:

  // int32 invitetime = 4;
  void clear_invitetime();
  int32_t invitetime() const;
  void set_invitetime(int32_t value);
  private:
  int32_t _internal_invitetime() const;
  void _internal_set_invitetime(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.FriendInviteItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  int64_t iid_;
  int64_t from_iid_;
  int32_t invitetime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_global_5finternal_2eproto;
};
// -------------------------------------------------------------------

class FriendRelation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.FriendRelation) */ {
 public:
  inline FriendRelation() : FriendRelation(nullptr) {}
  ~FriendRelation() override;
  explicit constexpr FriendRelation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendRelation(const FriendRelation& from);
  FriendRelation(FriendRelation&& from) noexcept
    : FriendRelation() {
    *this = ::std::move(from);
  }

  inline FriendRelation& operator=(const FriendRelation& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendRelation& operator=(FriendRelation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendRelation& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendRelation* internal_default_instance() {
    return reinterpret_cast<const FriendRelation*>(
               &_FriendRelation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FriendRelation& a, FriendRelation& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendRelation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendRelation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendRelation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendRelation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendRelation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FriendRelation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendRelation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.FriendRelation";
  }
  protected:
  explicit FriendRelation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 3,
    kIidFieldNumber = 1,
    kFriendiidFieldNumber = 2,
    kOnlineFieldNumber = 4,
  };
  // string nickname = 3;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // int64 iid = 1;
  void clear_iid();
  int64_t iid() const;
  void set_iid(int64_t value);
  private:
  int64_t _internal_iid() const;
  void _internal_set_iid(int64_t value);
  public:

  // int64 friendiid = 2;
  void clear_friendiid();
  int64_t friendiid() const;
  void set_friendiid(int64_t value);
  private:
  int64_t _internal_friendiid() const;
  void _internal_set_friendiid(int64_t value);
  public:

  // bool online = 4;
  void clear_online();
  bool online() const;
  void set_online(bool value);
  private:
  bool _internal_online() const;
  void _internal_set_online(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PRO.FriendRelation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  int64_t iid_;
  int64_t friendiid_;
  bool online_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_global_5finternal_2eproto;
};
// -------------------------------------------------------------------

class FriendUserInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRO.FriendUserInfo) */ {
 public:
  inline FriendUserInfo() : FriendUserInfo(nullptr) {}
  ~FriendUserInfo() override;
  explicit constexpr FriendUserInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendUserInfo(const FriendUserInfo& from);
  FriendUserInfo(FriendUserInfo&& from) noexcept
    : FriendUserInfo() {
    *this = ::std::move(from);
  }

  inline FriendUserInfo& operator=(const FriendUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendUserInfo& operator=(FriendUserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendUserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendUserInfo* internal_default_instance() {
    return reinterpret_cast<const FriendUserInfo*>(
               &_FriendUserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FriendUserInfo& a, FriendUserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendUserInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendUserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendUserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendUserInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendUserInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FriendUserInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendUserInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRO.FriendUserInfo";
  }
  protected:
  explicit FriendUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // .PRO.UserToken token = 1;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const ::PRO::UserToken& token() const;
  PROTOBUF_NODISCARD ::PRO::UserToken* release_token();
  ::PRO::UserToken* mutable_token();
  void set_allocated_token(::PRO::UserToken* token);
  private:
  const ::PRO::UserToken& _internal_token() const;
  ::PRO::UserToken* _internal_mutable_token();
  public:
  void unsafe_arena_set_allocated_token(
      ::PRO::UserToken* token);
  ::PRO::UserToken* unsafe_arena_release_token();

  // @@protoc_insertion_point(class_scope:PRO.FriendUserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PRO::UserToken* token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_global_5finternal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserToken

// int64 giduid = 1;
inline void UserToken::clear_giduid() {
  giduid_ = int64_t{0};
}
inline int64_t UserToken::_internal_giduid() const {
  return giduid_;
}
inline int64_t UserToken::giduid() const {
  // @@protoc_insertion_point(field_get:PRO.UserToken.giduid)
  return _internal_giduid();
}
inline void UserToken::_internal_set_giduid(int64_t value) {
  
  giduid_ = value;
}
inline void UserToken::set_giduid(int64_t value) {
  _internal_set_giduid(value);
  // @@protoc_insertion_point(field_set:PRO.UserToken.giduid)
}

// int64 slottoken = 2;
inline void UserToken::clear_slottoken() {
  slottoken_ = int64_t{0};
}
inline int64_t UserToken::_internal_slottoken() const {
  return slottoken_;
}
inline int64_t UserToken::slottoken() const {
  // @@protoc_insertion_point(field_get:PRO.UserToken.slottoken)
  return _internal_slottoken();
}
inline void UserToken::_internal_set_slottoken(int64_t value) {
  
  slottoken_ = value;
}
inline void UserToken::set_slottoken(int64_t value) {
  _internal_set_slottoken(value);
  // @@protoc_insertion_point(field_set:PRO.UserToken.slottoken)
}

// -------------------------------------------------------------------

// MailSystemItem

// int64 iid = 1;
inline void MailSystemItem::clear_iid() {
  iid_ = int64_t{0};
}
inline int64_t MailSystemItem::_internal_iid() const {
  return iid_;
}
inline int64_t MailSystemItem::iid() const {
  // @@protoc_insertion_point(field_get:PRO.MailSystemItem.iid)
  return _internal_iid();
}
inline void MailSystemItem::_internal_set_iid(int64_t value) {
  
  iid_ = value;
}
inline void MailSystemItem::set_iid(int64_t value) {
  _internal_set_iid(value);
  // @@protoc_insertion_point(field_set:PRO.MailSystemItem.iid)
}

// int64 sender_iid = 2;
inline void MailSystemItem::clear_sender_iid() {
  sender_iid_ = int64_t{0};
}
inline int64_t MailSystemItem::_internal_sender_iid() const {
  return sender_iid_;
}
inline int64_t MailSystemItem::sender_iid() const {
  // @@protoc_insertion_point(field_get:PRO.MailSystemItem.sender_iid)
  return _internal_sender_iid();
}
inline void MailSystemItem::_internal_set_sender_iid(int64_t value) {
  
  sender_iid_ = value;
}
inline void MailSystemItem::set_sender_iid(int64_t value) {
  _internal_set_sender_iid(value);
  // @@protoc_insertion_point(field_set:PRO.MailSystemItem.sender_iid)
}

// string title = 3;
inline void MailSystemItem::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& MailSystemItem::title() const {
  // @@protoc_insertion_point(field_get:PRO.MailSystemItem.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MailSystemItem::set_title(ArgT0&& arg0, ArgT... args) {
 
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.MailSystemItem.title)
}
inline std::string* MailSystemItem::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:PRO.MailSystemItem.title)
  return _s;
}
inline const std::string& MailSystemItem::_internal_title() const {
  return title_.Get();
}
inline void MailSystemItem::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MailSystemItem::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MailSystemItem::release_title() {
  // @@protoc_insertion_point(field_release:PRO.MailSystemItem.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MailSystemItem::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.MailSystemItem.title)
}

// string contents = 4;
inline void MailSystemItem::clear_contents() {
  contents_.ClearToEmpty();
}
inline const std::string& MailSystemItem::contents() const {
  // @@protoc_insertion_point(field_get:PRO.MailSystemItem.contents)
  return _internal_contents();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MailSystemItem::set_contents(ArgT0&& arg0, ArgT... args) {
 
 contents_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.MailSystemItem.contents)
}
inline std::string* MailSystemItem::mutable_contents() {
  std::string* _s = _internal_mutable_contents();
  // @@protoc_insertion_point(field_mutable:PRO.MailSystemItem.contents)
  return _s;
}
inline const std::string& MailSystemItem::_internal_contents() const {
  return contents_.Get();
}
inline void MailSystemItem::_internal_set_contents(const std::string& value) {
  
  contents_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MailSystemItem::_internal_mutable_contents() {
  
  return contents_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MailSystemItem::release_contents() {
  // @@protoc_insertion_point(field_release:PRO.MailSystemItem.contents)
  return contents_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MailSystemItem::set_allocated_contents(std::string* contents) {
  if (contents != nullptr) {
    
  } else {
    
  }
  contents_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contents,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (contents_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    contents_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.MailSystemItem.contents)
}

// int32 attachment = 5;
inline void MailSystemItem::clear_attachment() {
  attachment_ = 0;
}
inline int32_t MailSystemItem::_internal_attachment() const {
  return attachment_;
}
inline int32_t MailSystemItem::attachment() const {
  // @@protoc_insertion_point(field_get:PRO.MailSystemItem.attachment)
  return _internal_attachment();
}
inline void MailSystemItem::_internal_set_attachment(int32_t value) {
  
  attachment_ = value;
}
inline void MailSystemItem::set_attachment(int32_t value) {
  _internal_set_attachment(value);
  // @@protoc_insertion_point(field_set:PRO.MailSystemItem.attachment)
}

// string attachinfo = 6;
inline void MailSystemItem::clear_attachinfo() {
  attachinfo_.ClearToEmpty();
}
inline const std::string& MailSystemItem::attachinfo() const {
  // @@protoc_insertion_point(field_get:PRO.MailSystemItem.attachinfo)
  return _internal_attachinfo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MailSystemItem::set_attachinfo(ArgT0&& arg0, ArgT... args) {
 
 attachinfo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.MailSystemItem.attachinfo)
}
inline std::string* MailSystemItem::mutable_attachinfo() {
  std::string* _s = _internal_mutable_attachinfo();
  // @@protoc_insertion_point(field_mutable:PRO.MailSystemItem.attachinfo)
  return _s;
}
inline const std::string& MailSystemItem::_internal_attachinfo() const {
  return attachinfo_.Get();
}
inline void MailSystemItem::_internal_set_attachinfo(const std::string& value) {
  
  attachinfo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MailSystemItem::_internal_mutable_attachinfo() {
  
  return attachinfo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MailSystemItem::release_attachinfo() {
  // @@protoc_insertion_point(field_release:PRO.MailSystemItem.attachinfo)
  return attachinfo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MailSystemItem::set_allocated_attachinfo(std::string* attachinfo) {
  if (attachinfo != nullptr) {
    
  } else {
    
  }
  attachinfo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attachinfo,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (attachinfo_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    attachinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.MailSystemItem.attachinfo)
}

// int32 createtime = 7;
inline void MailSystemItem::clear_createtime() {
  createtime_ = 0;
}
inline int32_t MailSystemItem::_internal_createtime() const {
  return createtime_;
}
inline int32_t MailSystemItem::createtime() const {
  // @@protoc_insertion_point(field_get:PRO.MailSystemItem.createtime)
  return _internal_createtime();
}
inline void MailSystemItem::_internal_set_createtime(int32_t value) {
  
  createtime_ = value;
}
inline void MailSystemItem::set_createtime(int32_t value) {
  _internal_set_createtime(value);
  // @@protoc_insertion_point(field_set:PRO.MailSystemItem.createtime)
}

// -------------------------------------------------------------------

// MailSystemItems

// repeated .PRO.MailSystemItem mails = 1;
inline int MailSystemItems::_internal_mails_size() const {
  return mails_.size();
}
inline int MailSystemItems::mails_size() const {
  return _internal_mails_size();
}
inline void MailSystemItems::clear_mails() {
  mails_.Clear();
}
inline ::PRO::MailSystemItem* MailSystemItems::mutable_mails(int index) {
  // @@protoc_insertion_point(field_mutable:PRO.MailSystemItems.mails)
  return mails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::MailSystemItem >*
MailSystemItems::mutable_mails() {
  // @@protoc_insertion_point(field_mutable_list:PRO.MailSystemItems.mails)
  return &mails_;
}
inline const ::PRO::MailSystemItem& MailSystemItems::_internal_mails(int index) const {
  return mails_.Get(index);
}
inline const ::PRO::MailSystemItem& MailSystemItems::mails(int index) const {
  // @@protoc_insertion_point(field_get:PRO.MailSystemItems.mails)
  return _internal_mails(index);
}
inline ::PRO::MailSystemItem* MailSystemItems::_internal_add_mails() {
  return mails_.Add();
}
inline ::PRO::MailSystemItem* MailSystemItems::add_mails() {
  ::PRO::MailSystemItem* _add = _internal_add_mails();
  // @@protoc_insertion_point(field_add:PRO.MailSystemItems.mails)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::MailSystemItem >&
MailSystemItems::mails() const {
  // @@protoc_insertion_point(field_list:PRO.MailSystemItems.mails)
  return mails_;
}

// -------------------------------------------------------------------

// MailNormalItem

// int64 iid = 1;
inline void MailNormalItem::clear_iid() {
  iid_ = int64_t{0};
}
inline int64_t MailNormalItem::_internal_iid() const {
  return iid_;
}
inline int64_t MailNormalItem::iid() const {
  // @@protoc_insertion_point(field_get:PRO.MailNormalItem.iid)
  return _internal_iid();
}
inline void MailNormalItem::_internal_set_iid(int64_t value) {
  
  iid_ = value;
}
inline void MailNormalItem::set_iid(int64_t value) {
  _internal_set_iid(value);
  // @@protoc_insertion_point(field_set:PRO.MailNormalItem.iid)
}

// int32 stype = 2;
inline void MailNormalItem::clear_stype() {
  stype_ = 0;
}
inline int32_t MailNormalItem::_internal_stype() const {
  return stype_;
}
inline int32_t MailNormalItem::stype() const {
  // @@protoc_insertion_point(field_get:PRO.MailNormalItem.stype)
  return _internal_stype();
}
inline void MailNormalItem::_internal_set_stype(int32_t value) {
  
  stype_ = value;
}
inline void MailNormalItem::set_stype(int32_t value) {
  _internal_set_stype(value);
  // @@protoc_insertion_point(field_set:PRO.MailNormalItem.stype)
}

// int64 sender_iid = 3;
inline void MailNormalItem::clear_sender_iid() {
  sender_iid_ = int64_t{0};
}
inline int64_t MailNormalItem::_internal_sender_iid() const {
  return sender_iid_;
}
inline int64_t MailNormalItem::sender_iid() const {
  // @@protoc_insertion_point(field_get:PRO.MailNormalItem.sender_iid)
  return _internal_sender_iid();
}
inline void MailNormalItem::_internal_set_sender_iid(int64_t value) {
  
  sender_iid_ = value;
}
inline void MailNormalItem::set_sender_iid(int64_t value) {
  _internal_set_sender_iid(value);
  // @@protoc_insertion_point(field_set:PRO.MailNormalItem.sender_iid)
}

// int64 receiver_iid = 4;
inline void MailNormalItem::clear_receiver_iid() {
  receiver_iid_ = int64_t{0};
}
inline int64_t MailNormalItem::_internal_receiver_iid() const {
  return receiver_iid_;
}
inline int64_t MailNormalItem::receiver_iid() const {
  // @@protoc_insertion_point(field_get:PRO.MailNormalItem.receiver_iid)
  return _internal_receiver_iid();
}
inline void MailNormalItem::_internal_set_receiver_iid(int64_t value) {
  
  receiver_iid_ = value;
}
inline void MailNormalItem::set_receiver_iid(int64_t value) {
  _internal_set_receiver_iid(value);
  // @@protoc_insertion_point(field_set:PRO.MailNormalItem.receiver_iid)
}

// int32 attachment = 5;
inline void MailNormalItem::clear_attachment() {
  attachment_ = 0;
}
inline int32_t MailNormalItem::_internal_attachment() const {
  return attachment_;
}
inline int32_t MailNormalItem::attachment() const {
  // @@protoc_insertion_point(field_get:PRO.MailNormalItem.attachment)
  return _internal_attachment();
}
inline void MailNormalItem::_internal_set_attachment(int32_t value) {
  
  attachment_ = value;
}
inline void MailNormalItem::set_attachment(int32_t value) {
  _internal_set_attachment(value);
  // @@protoc_insertion_point(field_set:PRO.MailNormalItem.attachment)
}

// string attachinfo = 6;
inline void MailNormalItem::clear_attachinfo() {
  attachinfo_.ClearToEmpty();
}
inline const std::string& MailNormalItem::attachinfo() const {
  // @@protoc_insertion_point(field_get:PRO.MailNormalItem.attachinfo)
  return _internal_attachinfo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MailNormalItem::set_attachinfo(ArgT0&& arg0, ArgT... args) {
 
 attachinfo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.MailNormalItem.attachinfo)
}
inline std::string* MailNormalItem::mutable_attachinfo() {
  std::string* _s = _internal_mutable_attachinfo();
  // @@protoc_insertion_point(field_mutable:PRO.MailNormalItem.attachinfo)
  return _s;
}
inline const std::string& MailNormalItem::_internal_attachinfo() const {
  return attachinfo_.Get();
}
inline void MailNormalItem::_internal_set_attachinfo(const std::string& value) {
  
  attachinfo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MailNormalItem::_internal_mutable_attachinfo() {
  
  return attachinfo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MailNormalItem::release_attachinfo() {
  // @@protoc_insertion_point(field_release:PRO.MailNormalItem.attachinfo)
  return attachinfo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MailNormalItem::set_allocated_attachinfo(std::string* attachinfo) {
  if (attachinfo != nullptr) {
    
  } else {
    
  }
  attachinfo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attachinfo,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (attachinfo_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    attachinfo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.MailNormalItem.attachinfo)
}

// string title = 7;
inline void MailNormalItem::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& MailNormalItem::title() const {
  // @@protoc_insertion_point(field_get:PRO.MailNormalItem.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MailNormalItem::set_title(ArgT0&& arg0, ArgT... args) {
 
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.MailNormalItem.title)
}
inline std::string* MailNormalItem::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:PRO.MailNormalItem.title)
  return _s;
}
inline const std::string& MailNormalItem::_internal_title() const {
  return title_.Get();
}
inline void MailNormalItem::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MailNormalItem::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MailNormalItem::release_title() {
  // @@protoc_insertion_point(field_release:PRO.MailNormalItem.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MailNormalItem::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.MailNormalItem.title)
}

// string contents = 8;
inline void MailNormalItem::clear_contents() {
  contents_.ClearToEmpty();
}
inline const std::string& MailNormalItem::contents() const {
  // @@protoc_insertion_point(field_get:PRO.MailNormalItem.contents)
  return _internal_contents();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MailNormalItem::set_contents(ArgT0&& arg0, ArgT... args) {
 
 contents_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.MailNormalItem.contents)
}
inline std::string* MailNormalItem::mutable_contents() {
  std::string* _s = _internal_mutable_contents();
  // @@protoc_insertion_point(field_mutable:PRO.MailNormalItem.contents)
  return _s;
}
inline const std::string& MailNormalItem::_internal_contents() const {
  return contents_.Get();
}
inline void MailNormalItem::_internal_set_contents(const std::string& value) {
  
  contents_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MailNormalItem::_internal_mutable_contents() {
  
  return contents_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MailNormalItem::release_contents() {
  // @@protoc_insertion_point(field_release:PRO.MailNormalItem.contents)
  return contents_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MailNormalItem::set_allocated_contents(std::string* contents) {
  if (contents != nullptr) {
    
  } else {
    
  }
  contents_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contents,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (contents_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    contents_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.MailNormalItem.contents)
}

// int32 createtime = 9;
inline void MailNormalItem::clear_createtime() {
  createtime_ = 0;
}
inline int32_t MailNormalItem::_internal_createtime() const {
  return createtime_;
}
inline int32_t MailNormalItem::createtime() const {
  // @@protoc_insertion_point(field_get:PRO.MailNormalItem.createtime)
  return _internal_createtime();
}
inline void MailNormalItem::_internal_set_createtime(int32_t value) {
  
  createtime_ = value;
}
inline void MailNormalItem::set_createtime(int32_t value) {
  _internal_set_createtime(value);
  // @@protoc_insertion_point(field_set:PRO.MailNormalItem.createtime)
}

// int32 readtime = 10;
inline void MailNormalItem::clear_readtime() {
  readtime_ = 0;
}
inline int32_t MailNormalItem::_internal_readtime() const {
  return readtime_;
}
inline int32_t MailNormalItem::readtime() const {
  // @@protoc_insertion_point(field_get:PRO.MailNormalItem.readtime)
  return _internal_readtime();
}
inline void MailNormalItem::_internal_set_readtime(int32_t value) {
  
  readtime_ = value;
}
inline void MailNormalItem::set_readtime(int32_t value) {
  _internal_set_readtime(value);
  // @@protoc_insertion_point(field_set:PRO.MailNormalItem.readtime)
}

// -------------------------------------------------------------------

// MailNormalItems

// repeated .PRO.MailNormalItem mails = 1;
inline int MailNormalItems::_internal_mails_size() const {
  return mails_.size();
}
inline int MailNormalItems::mails_size() const {
  return _internal_mails_size();
}
inline void MailNormalItems::clear_mails() {
  mails_.Clear();
}
inline ::PRO::MailNormalItem* MailNormalItems::mutable_mails(int index) {
  // @@protoc_insertion_point(field_mutable:PRO.MailNormalItems.mails)
  return mails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::MailNormalItem >*
MailNormalItems::mutable_mails() {
  // @@protoc_insertion_point(field_mutable_list:PRO.MailNormalItems.mails)
  return &mails_;
}
inline const ::PRO::MailNormalItem& MailNormalItems::_internal_mails(int index) const {
  return mails_.Get(index);
}
inline const ::PRO::MailNormalItem& MailNormalItems::mails(int index) const {
  // @@protoc_insertion_point(field_get:PRO.MailNormalItems.mails)
  return _internal_mails(index);
}
inline ::PRO::MailNormalItem* MailNormalItems::_internal_add_mails() {
  return mails_.Add();
}
inline ::PRO::MailNormalItem* MailNormalItems::add_mails() {
  ::PRO::MailNormalItem* _add = _internal_add_mails();
  // @@protoc_insertion_point(field_add:PRO.MailNormalItems.mails)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PRO::MailNormalItem >&
MailNormalItems::mails() const {
  // @@protoc_insertion_point(field_list:PRO.MailNormalItems.mails)
  return mails_;
}

// -------------------------------------------------------------------

// FriendInviteItem

// int64 iid = 1;
inline void FriendInviteItem::clear_iid() {
  iid_ = int64_t{0};
}
inline int64_t FriendInviteItem::_internal_iid() const {
  return iid_;
}
inline int64_t FriendInviteItem::iid() const {
  // @@protoc_insertion_point(field_get:PRO.FriendInviteItem.iid)
  return _internal_iid();
}
inline void FriendInviteItem::_internal_set_iid(int64_t value) {
  
  iid_ = value;
}
inline void FriendInviteItem::set_iid(int64_t value) {
  _internal_set_iid(value);
  // @@protoc_insertion_point(field_set:PRO.FriendInviteItem.iid)
}

// int64 from_iid = 2;
inline void FriendInviteItem::clear_from_iid() {
  from_iid_ = int64_t{0};
}
inline int64_t FriendInviteItem::_internal_from_iid() const {
  return from_iid_;
}
inline int64_t FriendInviteItem::from_iid() const {
  // @@protoc_insertion_point(field_get:PRO.FriendInviteItem.from_iid)
  return _internal_from_iid();
}
inline void FriendInviteItem::_internal_set_from_iid(int64_t value) {
  
  from_iid_ = value;
}
inline void FriendInviteItem::set_from_iid(int64_t value) {
  _internal_set_from_iid(value);
  // @@protoc_insertion_point(field_set:PRO.FriendInviteItem.from_iid)
}

// string nickname = 3;
inline void FriendInviteItem::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& FriendInviteItem::nickname() const {
  // @@protoc_insertion_point(field_get:PRO.FriendInviteItem.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendInviteItem::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.FriendInviteItem.nickname)
}
inline std::string* FriendInviteItem::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:PRO.FriendInviteItem.nickname)
  return _s;
}
inline const std::string& FriendInviteItem::_internal_nickname() const {
  return nickname_.Get();
}
inline void FriendInviteItem::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FriendInviteItem::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FriendInviteItem::release_nickname() {
  // @@protoc_insertion_point(field_release:PRO.FriendInviteItem.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FriendInviteItem::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nickname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.FriendInviteItem.nickname)
}

// int32 invitetime = 4;
inline void FriendInviteItem::clear_invitetime() {
  invitetime_ = 0;
}
inline int32_t FriendInviteItem::_internal_invitetime() const {
  return invitetime_;
}
inline int32_t FriendInviteItem::invitetime() const {
  // @@protoc_insertion_point(field_get:PRO.FriendInviteItem.invitetime)
  return _internal_invitetime();
}
inline void FriendInviteItem::_internal_set_invitetime(int32_t value) {
  
  invitetime_ = value;
}
inline void FriendInviteItem::set_invitetime(int32_t value) {
  _internal_set_invitetime(value);
  // @@protoc_insertion_point(field_set:PRO.FriendInviteItem.invitetime)
}

// -------------------------------------------------------------------

// FriendRelation

// int64 iid = 1;
inline void FriendRelation::clear_iid() {
  iid_ = int64_t{0};
}
inline int64_t FriendRelation::_internal_iid() const {
  return iid_;
}
inline int64_t FriendRelation::iid() const {
  // @@protoc_insertion_point(field_get:PRO.FriendRelation.iid)
  return _internal_iid();
}
inline void FriendRelation::_internal_set_iid(int64_t value) {
  
  iid_ = value;
}
inline void FriendRelation::set_iid(int64_t value) {
  _internal_set_iid(value);
  // @@protoc_insertion_point(field_set:PRO.FriendRelation.iid)
}

// int64 friendiid = 2;
inline void FriendRelation::clear_friendiid() {
  friendiid_ = int64_t{0};
}
inline int64_t FriendRelation::_internal_friendiid() const {
  return friendiid_;
}
inline int64_t FriendRelation::friendiid() const {
  // @@protoc_insertion_point(field_get:PRO.FriendRelation.friendiid)
  return _internal_friendiid();
}
inline void FriendRelation::_internal_set_friendiid(int64_t value) {
  
  friendiid_ = value;
}
inline void FriendRelation::set_friendiid(int64_t value) {
  _internal_set_friendiid(value);
  // @@protoc_insertion_point(field_set:PRO.FriendRelation.friendiid)
}

// string nickname = 3;
inline void FriendRelation::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& FriendRelation::nickname() const {
  // @@protoc_insertion_point(field_get:PRO.FriendRelation.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendRelation::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PRO.FriendRelation.nickname)
}
inline std::string* FriendRelation::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:PRO.FriendRelation.nickname)
  return _s;
}
inline const std::string& FriendRelation::_internal_nickname() const {
  return nickname_.Get();
}
inline void FriendRelation::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FriendRelation::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FriendRelation::release_nickname() {
  // @@protoc_insertion_point(field_release:PRO.FriendRelation.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FriendRelation::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nickname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PRO.FriendRelation.nickname)
}

// bool online = 4;
inline void FriendRelation::clear_online() {
  online_ = false;
}
inline bool FriendRelation::_internal_online() const {
  return online_;
}
inline bool FriendRelation::online() const {
  // @@protoc_insertion_point(field_get:PRO.FriendRelation.online)
  return _internal_online();
}
inline void FriendRelation::_internal_set_online(bool value) {
  
  online_ = value;
}
inline void FriendRelation::set_online(bool value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:PRO.FriendRelation.online)
}

// -------------------------------------------------------------------

// FriendUserInfo

// .PRO.UserToken token = 1;
inline bool FriendUserInfo::_internal_has_token() const {
  return this != internal_default_instance() && token_ != nullptr;
}
inline bool FriendUserInfo::has_token() const {
  return _internal_has_token();
}
inline void FriendUserInfo::clear_token() {
  if (GetArenaForAllocation() == nullptr && token_ != nullptr) {
    delete token_;
  }
  token_ = nullptr;
}
inline const ::PRO::UserToken& FriendUserInfo::_internal_token() const {
  const ::PRO::UserToken* p = token_;
  return p != nullptr ? *p : reinterpret_cast<const ::PRO::UserToken&>(
      ::PRO::_UserToken_default_instance_);
}
inline const ::PRO::UserToken& FriendUserInfo::token() const {
  // @@protoc_insertion_point(field_get:PRO.FriendUserInfo.token)
  return _internal_token();
}
inline void FriendUserInfo::unsafe_arena_set_allocated_token(
    ::PRO::UserToken* token) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(token_);
  }
  token_ = token;
  if (token) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PRO.FriendUserInfo.token)
}
inline ::PRO::UserToken* FriendUserInfo::release_token() {
  
  ::PRO::UserToken* temp = token_;
  token_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PRO::UserToken* FriendUserInfo::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_release:PRO.FriendUserInfo.token)
  
  ::PRO::UserToken* temp = token_;
  token_ = nullptr;
  return temp;
}
inline ::PRO::UserToken* FriendUserInfo::_internal_mutable_token() {
  
  if (token_ == nullptr) {
    auto* p = CreateMaybeMessage<::PRO::UserToken>(GetArenaForAllocation());
    token_ = p;
  }
  return token_;
}
inline ::PRO::UserToken* FriendUserInfo::mutable_token() {
  ::PRO::UserToken* _msg = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:PRO.FriendUserInfo.token)
  return _msg;
}
inline void FriendUserInfo::set_allocated_token(::PRO::UserToken* token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete token_;
  }
  if (token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PRO::UserToken>::GetOwningArena(token);
    if (message_arena != submessage_arena) {
      token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token, submessage_arena);
    }
    
  } else {
    
  }
  token_ = token;
  // @@protoc_insertion_point(field_set_allocated:PRO.FriendUserInfo.token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PRO

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_global_5finternal_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_chat.proto

#include "user_chat.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace PRO {
constexpr ChatMessageItem::ChatMessageItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : send_nickname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msg_content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , send_user_iid_(int64_t{0})
  , send_time_(0){}
struct ChatMessageItemDefaultTypeInternal {
  constexpr ChatMessageItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChatMessageItemDefaultTypeInternal() {}
  union {
    ChatMessageItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChatMessageItemDefaultTypeInternal _ChatMessageItem_default_instance_;
constexpr ChatMessageItems::ChatMessageItems(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msgs_(){}
struct ChatMessageItemsDefaultTypeInternal {
  constexpr ChatMessageItemsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChatMessageItemsDefaultTypeInternal() {}
  union {
    ChatMessageItems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChatMessageItemsDefaultTypeInternal _ChatMessageItems_default_instance_;
constexpr ChatChannelInfo::ChatChannelInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channeldid_(int64_t{0})
  , type_(0)
{}
struct ChatChannelInfoDefaultTypeInternal {
  constexpr ChatChannelInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChatChannelInfoDefaultTypeInternal() {}
  union {
    ChatChannelInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChatChannelInfoDefaultTypeInternal _ChatChannelInfo_default_instance_;
constexpr Chat_GlobalMsg_ntf::Chat_GlobalMsg_ntf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msgs_(nullptr){}
struct Chat_GlobalMsg_ntfDefaultTypeInternal {
  constexpr Chat_GlobalMsg_ntfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Chat_GlobalMsg_ntfDefaultTypeInternal() {}
  union {
    Chat_GlobalMsg_ntf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Chat_GlobalMsg_ntfDefaultTypeInternal _Chat_GlobalMsg_ntf_default_instance_;
constexpr Chat_UserChannels_active::Chat_UserChannels_active(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channels_(){}
struct Chat_UserChannels_activeDefaultTypeInternal {
  constexpr Chat_UserChannels_activeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Chat_UserChannels_activeDefaultTypeInternal() {}
  union {
    Chat_UserChannels_active _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Chat_UserChannels_activeDefaultTypeInternal _Chat_UserChannels_active_default_instance_;
constexpr Chat_CustomChannelId_req::Chat_CustomChannelId_req(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Chat_CustomChannelId_reqDefaultTypeInternal {
  constexpr Chat_CustomChannelId_reqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Chat_CustomChannelId_reqDefaultTypeInternal() {}
  union {
    Chat_CustomChannelId_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Chat_CustomChannelId_reqDefaultTypeInternal _Chat_CustomChannelId_req_default_instance_;
constexpr Chat_CustomChannelId_ack::Chat_CustomChannelId_ack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_(nullptr)
  , result_(0){}
struct Chat_CustomChannelId_ackDefaultTypeInternal {
  constexpr Chat_CustomChannelId_ackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Chat_CustomChannelId_ackDefaultTypeInternal() {}
  union {
    Chat_CustomChannelId_ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Chat_CustomChannelId_ackDefaultTypeInternal _Chat_CustomChannelId_ack_default_instance_;
constexpr Chat_UserMsg_say::Chat_UserMsg_say(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nickname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msg_content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , channel_(nullptr){}
struct Chat_UserMsg_sayDefaultTypeInternal {
  constexpr Chat_UserMsg_sayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Chat_UserMsg_sayDefaultTypeInternal() {}
  union {
    Chat_UserMsg_say _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Chat_UserMsg_sayDefaultTypeInternal _Chat_UserMsg_say_default_instance_;
constexpr Chat_ChatMsg_ntf::Chat_ChatMsg_ntf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_(nullptr)
  , msgs_(nullptr){}
struct Chat_ChatMsg_ntfDefaultTypeInternal {
  constexpr Chat_ChatMsg_ntfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Chat_ChatMsg_ntfDefaultTypeInternal() {}
  union {
    Chat_ChatMsg_ntf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Chat_ChatMsg_ntfDefaultTypeInternal _Chat_ChatMsg_ntf_default_instance_;
}  // namespace PRO
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_user_5fchat_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_user_5fchat_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_user_5fchat_2eproto = nullptr;

const uint32_t TableStruct_user_5fchat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::ChatMessageItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::ChatMessageItem, send_user_iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::ChatMessageItem, send_nickname_),
  PROTOBUF_FIELD_OFFSET(::PRO::ChatMessageItem, send_time_),
  PROTOBUF_FIELD_OFFSET(::PRO::ChatMessageItem, msg_content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::ChatMessageItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::ChatMessageItems, msgs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::ChatChannelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::ChatChannelInfo, type_),
  PROTOBUF_FIELD_OFFSET(::PRO::ChatChannelInfo, channeldid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Chat_GlobalMsg_ntf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Chat_GlobalMsg_ntf, msgs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Chat_UserChannels_active, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Chat_UserChannels_active, channels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Chat_CustomChannelId_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Chat_CustomChannelId_ack, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PRO::Chat_CustomChannelId_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Chat_CustomChannelId_ack, result_),
  PROTOBUF_FIELD_OFFSET(::PRO::Chat_CustomChannelId_ack, channel_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Chat_UserMsg_say, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Chat_UserMsg_say, channel_),
  PROTOBUF_FIELD_OFFSET(::PRO::Chat_UserMsg_say, nickname_),
  PROTOBUF_FIELD_OFFSET(::PRO::Chat_UserMsg_say, msg_content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Chat_ChatMsg_ntf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Chat_ChatMsg_ntf, channel_),
  PROTOBUF_FIELD_OFFSET(::PRO::Chat_ChatMsg_ntf, msgs_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::PRO::ChatMessageItem)},
  { 10, -1, -1, sizeof(::PRO::ChatMessageItems)},
  { 17, -1, -1, sizeof(::PRO::ChatChannelInfo)},
  { 25, -1, -1, sizeof(::PRO::Chat_GlobalMsg_ntf)},
  { 32, -1, -1, sizeof(::PRO::Chat_UserChannels_active)},
  { 39, -1, -1, sizeof(::PRO::Chat_CustomChannelId_req)},
  { 45, 53, -1, sizeof(::PRO::Chat_CustomChannelId_ack)},
  { 55, -1, -1, sizeof(::PRO::Chat_UserMsg_say)},
  { 64, -1, -1, sizeof(::PRO::Chat_ChatMsg_ntf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_ChatMessageItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_ChatMessageItems_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_ChatChannelInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Chat_GlobalMsg_ntf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Chat_UserChannels_active_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Chat_CustomChannelId_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Chat_CustomChannelId_ack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Chat_UserMsg_say_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Chat_ChatMsg_ntf_default_instance_),
};

const char descriptor_table_protodef_user_5fchat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017user_chat.proto\022\003PRO\"g\n\017ChatMessageIte"
  "m\022\025\n\rsend_user_iid\030\001 \001(\003\022\025\n\rsend_nicknam"
  "e\030\002 \001(\t\022\021\n\tsend_time\030\003 \001(\005\022\023\n\013msg_conten"
  "t\030\005 \001(\t\"6\n\020ChatMessageItems\022\"\n\004msgs\030\001 \003("
  "\0132\024.PRO.ChatMessageItem\"I\n\017ChatChannelIn"
  "fo\022\"\n\004type\030\001 \001(\0162\024.PRO.ChatChannelType\022\022"
  "\n\nchanneldid\030\002 \001(\003\"9\n\022Chat_GlobalMsg_ntf"
  "\022#\n\004msgs\030\001 \001(\0132\025.PRO.ChatMessageItems\"B\n"
  "\030Chat_UserChannels_active\022&\n\010channels\030\001 "
  "\003(\0132\024.PRO.ChatChannelInfo\"\032\n\030Chat_Custom"
  "ChannelId_req\"b\n\030Chat_CustomChannelId_ac"
  "k\022\016\n\006result\030\001 \001(\005\022*\n\007channel\030\002 \001(\0132\024.PRO"
  ".ChatChannelInfoH\000\210\001\001B\n\n\010_channel\"`\n\020Cha"
  "t_UserMsg_say\022%\n\007channel\030\001 \001(\0132\024.PRO.Cha"
  "tChannelInfo\022\020\n\010nickname\030\002 \001(\t\022\023\n\013msg_co"
  "ntent\030\003 \001(\t\"^\n\020Chat_ChatMsg_ntf\022%\n\007chann"
  "el\030\001 \001(\0132\024.PRO.ChatChannelInfo\022#\n\004msgs\030\002"
  " \001(\0132\025.PRO.ChatMessageItems*\273\001\n\017ChatChan"
  "nelType\022\025\n\021ChatChannelT_Init\020\000\022\027\n\023ChatCh"
  "annelT_Global\020\001\022\030\n\024ChatChannelT_Channel\020"
  "\002\022\026\n\022ChatChannelT_Union\020\003\022\027\n\023ChatChannel"
  "T_Single\020\004\022\027\n\023ChatChannelT_Custom\020\005\022\024\n\020C"
  "hatChannelT_Max\020\006BT\n\033com.cms.client.netw"
  "ork.gproP\001Z\025gamelib/protobuf/gpro\252\002\033com."
  "cms.client.network.gprob\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_user_5fchat_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_user_5fchat_2eproto = {
  false, false, 991, descriptor_table_protodef_user_5fchat_2eproto, "user_chat.proto", 
  &descriptor_table_user_5fchat_2eproto_once, nullptr, 0, 9,
  schemas, file_default_instances, TableStruct_user_5fchat_2eproto::offsets,
  file_level_metadata_user_5fchat_2eproto, file_level_enum_descriptors_user_5fchat_2eproto, file_level_service_descriptors_user_5fchat_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_user_5fchat_2eproto_getter() {
  return &descriptor_table_user_5fchat_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_user_5fchat_2eproto(&descriptor_table_user_5fchat_2eproto);
namespace PRO {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChatChannelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_user_5fchat_2eproto);
  return file_level_enum_descriptors_user_5fchat_2eproto[0];
}
bool ChatChannelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ChatMessageItem::_Internal {
 public:
};

ChatMessageItem::ChatMessageItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.ChatMessageItem)
}
ChatMessageItem::ChatMessageItem(const ChatMessageItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  send_nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    send_nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_send_nickname().empty()) {
    send_nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_send_nickname(), 
      GetArenaForAllocation());
  }
  msg_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg_content().empty()) {
    msg_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg_content(), 
      GetArenaForAllocation());
  }
  ::memcpy(&send_user_iid_, &from.send_user_iid_,
    static_cast<size_t>(reinterpret_cast<char*>(&send_time_) -
    reinterpret_cast<char*>(&send_user_iid_)) + sizeof(send_time_));
  // @@protoc_insertion_point(copy_constructor:PRO.ChatMessageItem)
}

inline void ChatMessageItem::SharedCtor() {
send_nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  send_nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
msg_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&send_user_iid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&send_time_) -
    reinterpret_cast<char*>(&send_user_iid_)) + sizeof(send_time_));
}

ChatMessageItem::~ChatMessageItem() {
  // @@protoc_insertion_point(destructor:PRO.ChatMessageItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChatMessageItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  send_nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChatMessageItem::ArenaDtor(void* object) {
  ChatMessageItem* _this = reinterpret_cast< ChatMessageItem* >(object);
  (void)_this;
}
void ChatMessageItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChatMessageItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatMessageItem::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.ChatMessageItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  send_nickname_.ClearToEmpty();
  msg_content_.ClearToEmpty();
  ::memset(&send_user_iid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_time_) -
      reinterpret_cast<char*>(&send_user_iid_)) + sizeof(send_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatMessageItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 send_user_iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          send_user_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string send_nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_send_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.ChatMessageItem.send_nickname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 send_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          send_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg_content = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_msg_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.ChatMessageItem.msg_content"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatMessageItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.ChatMessageItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 send_user_iid = 1;
  if (this->_internal_send_user_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_send_user_iid(), target);
  }

  // string send_nickname = 2;
  if (!this->_internal_send_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_send_nickname().data(), static_cast<int>(this->_internal_send_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.ChatMessageItem.send_nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_send_nickname(), target);
  }

  // int32 send_time = 3;
  if (this->_internal_send_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_send_time(), target);
  }

  // string msg_content = 5;
  if (!this->_internal_msg_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg_content().data(), static_cast<int>(this->_internal_msg_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.ChatMessageItem.msg_content");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_msg_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.ChatMessageItem)
  return target;
}

size_t ChatMessageItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.ChatMessageItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string send_nickname = 2;
  if (!this->_internal_send_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_send_nickname());
  }

  // string msg_content = 5;
  if (!this->_internal_msg_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg_content());
  }

  // int64 send_user_iid = 1;
  if (this->_internal_send_user_iid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_send_user_iid());
  }

  // int32 send_time = 3;
  if (this->_internal_send_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_send_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatMessageItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChatMessageItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatMessageItem::GetClassData() const { return &_class_data_; }

void ChatMessageItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChatMessageItem *>(to)->MergeFrom(
      static_cast<const ChatMessageItem &>(from));
}


void ChatMessageItem::MergeFrom(const ChatMessageItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.ChatMessageItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_send_nickname().empty()) {
    _internal_set_send_nickname(from._internal_send_nickname());
  }
  if (!from._internal_msg_content().empty()) {
    _internal_set_msg_content(from._internal_msg_content());
  }
  if (from._internal_send_user_iid() != 0) {
    _internal_set_send_user_iid(from._internal_send_user_iid());
  }
  if (from._internal_send_time() != 0) {
    _internal_set_send_time(from._internal_send_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatMessageItem::CopyFrom(const ChatMessageItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.ChatMessageItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessageItem::IsInitialized() const {
  return true;
}

void ChatMessageItem::InternalSwap(ChatMessageItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &send_nickname_, lhs_arena,
      &other->send_nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_content_, lhs_arena,
      &other->msg_content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatMessageItem, send_time_)
      + sizeof(ChatMessageItem::send_time_)
      - PROTOBUF_FIELD_OFFSET(ChatMessageItem, send_user_iid_)>(
          reinterpret_cast<char*>(&send_user_iid_),
          reinterpret_cast<char*>(&other->send_user_iid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatMessageItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_5fchat_2eproto_getter, &descriptor_table_user_5fchat_2eproto_once,
      file_level_metadata_user_5fchat_2eproto[0]);
}

// ===================================================================

class ChatMessageItems::_Internal {
 public:
};

ChatMessageItems::ChatMessageItems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  msgs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.ChatMessageItems)
}
ChatMessageItems::ChatMessageItems(const ChatMessageItems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      msgs_(from.msgs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PRO.ChatMessageItems)
}

inline void ChatMessageItems::SharedCtor() {
}

ChatMessageItems::~ChatMessageItems() {
  // @@protoc_insertion_point(destructor:PRO.ChatMessageItems)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChatMessageItems::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChatMessageItems::ArenaDtor(void* object) {
  ChatMessageItems* _this = reinterpret_cast< ChatMessageItems* >(object);
  (void)_this;
}
void ChatMessageItems::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChatMessageItems::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatMessageItems::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.ChatMessageItems)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msgs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatMessageItems::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PRO.ChatMessageItem msgs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msgs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatMessageItems::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.ChatMessageItems)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PRO.ChatMessageItem msgs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msgs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_msgs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.ChatMessageItems)
  return target;
}

size_t ChatMessageItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.ChatMessageItems)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PRO.ChatMessageItem msgs = 1;
  total_size += 1UL * this->_internal_msgs_size();
  for (const auto& msg : this->msgs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatMessageItems::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChatMessageItems::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatMessageItems::GetClassData() const { return &_class_data_; }

void ChatMessageItems::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChatMessageItems *>(to)->MergeFrom(
      static_cast<const ChatMessageItems &>(from));
}


void ChatMessageItems::MergeFrom(const ChatMessageItems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.ChatMessageItems)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  msgs_.MergeFrom(from.msgs_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatMessageItems::CopyFrom(const ChatMessageItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.ChatMessageItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessageItems::IsInitialized() const {
  return true;
}

void ChatMessageItems::InternalSwap(ChatMessageItems* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  msgs_.InternalSwap(&other->msgs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatMessageItems::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_5fchat_2eproto_getter, &descriptor_table_user_5fchat_2eproto_once,
      file_level_metadata_user_5fchat_2eproto[1]);
}

// ===================================================================

class ChatChannelInfo::_Internal {
 public:
};

ChatChannelInfo::ChatChannelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.ChatChannelInfo)
}
ChatChannelInfo::ChatChannelInfo(const ChatChannelInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channeldid_, &from.channeldid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&channeldid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:PRO.ChatChannelInfo)
}

inline void ChatChannelInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channeldid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&channeldid_)) + sizeof(type_));
}

ChatChannelInfo::~ChatChannelInfo() {
  // @@protoc_insertion_point(destructor:PRO.ChatChannelInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChatChannelInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChatChannelInfo::ArenaDtor(void* object) {
  ChatChannelInfo* _this = reinterpret_cast< ChatChannelInfo* >(object);
  (void)_this;
}
void ChatChannelInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChatChannelInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatChannelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.ChatChannelInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channeldid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&channeldid_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatChannelInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PRO.ChatChannelType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::PRO::ChatChannelType>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 channeldid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channeldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatChannelInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.ChatChannelInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PRO.ChatChannelType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int64 channeldid = 2;
  if (this->_internal_channeldid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_channeldid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.ChatChannelInfo)
  return target;
}

size_t ChatChannelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.ChatChannelInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 channeldid = 2;
  if (this->_internal_channeldid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_channeldid());
  }

  // .PRO.ChatChannelType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatChannelInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChatChannelInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatChannelInfo::GetClassData() const { return &_class_data_; }

void ChatChannelInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChatChannelInfo *>(to)->MergeFrom(
      static_cast<const ChatChannelInfo &>(from));
}


void ChatChannelInfo::MergeFrom(const ChatChannelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.ChatChannelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channeldid() != 0) {
    _internal_set_channeldid(from._internal_channeldid());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatChannelInfo::CopyFrom(const ChatChannelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.ChatChannelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatChannelInfo::IsInitialized() const {
  return true;
}

void ChatChannelInfo::InternalSwap(ChatChannelInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatChannelInfo, type_)
      + sizeof(ChatChannelInfo::type_)
      - PROTOBUF_FIELD_OFFSET(ChatChannelInfo, channeldid_)>(
          reinterpret_cast<char*>(&channeldid_),
          reinterpret_cast<char*>(&other->channeldid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatChannelInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_5fchat_2eproto_getter, &descriptor_table_user_5fchat_2eproto_once,
      file_level_metadata_user_5fchat_2eproto[2]);
}

// ===================================================================

class Chat_GlobalMsg_ntf::_Internal {
 public:
  static const ::PRO::ChatMessageItems& msgs(const Chat_GlobalMsg_ntf* msg);
};

const ::PRO::ChatMessageItems&
Chat_GlobalMsg_ntf::_Internal::msgs(const Chat_GlobalMsg_ntf* msg) {
  return *msg->msgs_;
}
Chat_GlobalMsg_ntf::Chat_GlobalMsg_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Chat_GlobalMsg_ntf)
}
Chat_GlobalMsg_ntf::Chat_GlobalMsg_ntf(const Chat_GlobalMsg_ntf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_msgs()) {
    msgs_ = new ::PRO::ChatMessageItems(*from.msgs_);
  } else {
    msgs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PRO.Chat_GlobalMsg_ntf)
}

inline void Chat_GlobalMsg_ntf::SharedCtor() {
msgs_ = nullptr;
}

Chat_GlobalMsg_ntf::~Chat_GlobalMsg_ntf() {
  // @@protoc_insertion_point(destructor:PRO.Chat_GlobalMsg_ntf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Chat_GlobalMsg_ntf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete msgs_;
}

void Chat_GlobalMsg_ntf::ArenaDtor(void* object) {
  Chat_GlobalMsg_ntf* _this = reinterpret_cast< Chat_GlobalMsg_ntf* >(object);
  (void)_this;
}
void Chat_GlobalMsg_ntf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Chat_GlobalMsg_ntf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Chat_GlobalMsg_ntf::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Chat_GlobalMsg_ntf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && msgs_ != nullptr) {
    delete msgs_;
  }
  msgs_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chat_GlobalMsg_ntf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PRO.ChatMessageItems msgs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msgs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chat_GlobalMsg_ntf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Chat_GlobalMsg_ntf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PRO.ChatMessageItems msgs = 1;
  if (this->_internal_has_msgs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::msgs(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Chat_GlobalMsg_ntf)
  return target;
}

size_t Chat_GlobalMsg_ntf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Chat_GlobalMsg_ntf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PRO.ChatMessageItems msgs = 1;
  if (this->_internal_has_msgs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msgs_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chat_GlobalMsg_ntf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Chat_GlobalMsg_ntf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chat_GlobalMsg_ntf::GetClassData() const { return &_class_data_; }

void Chat_GlobalMsg_ntf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Chat_GlobalMsg_ntf *>(to)->MergeFrom(
      static_cast<const Chat_GlobalMsg_ntf &>(from));
}


void Chat_GlobalMsg_ntf::MergeFrom(const Chat_GlobalMsg_ntf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Chat_GlobalMsg_ntf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_msgs()) {
    _internal_mutable_msgs()->::PRO::ChatMessageItems::MergeFrom(from._internal_msgs());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chat_GlobalMsg_ntf::CopyFrom(const Chat_GlobalMsg_ntf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Chat_GlobalMsg_ntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chat_GlobalMsg_ntf::IsInitialized() const {
  return true;
}

void Chat_GlobalMsg_ntf::InternalSwap(Chat_GlobalMsg_ntf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(msgs_, other->msgs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Chat_GlobalMsg_ntf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_5fchat_2eproto_getter, &descriptor_table_user_5fchat_2eproto_once,
      file_level_metadata_user_5fchat_2eproto[3]);
}

// ===================================================================

class Chat_UserChannels_active::_Internal {
 public:
};

Chat_UserChannels_active::Chat_UserChannels_active(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  channels_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Chat_UserChannels_active)
}
Chat_UserChannels_active::Chat_UserChannels_active(const Chat_UserChannels_active& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PRO.Chat_UserChannels_active)
}

inline void Chat_UserChannels_active::SharedCtor() {
}

Chat_UserChannels_active::~Chat_UserChannels_active() {
  // @@protoc_insertion_point(destructor:PRO.Chat_UserChannels_active)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Chat_UserChannels_active::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Chat_UserChannels_active::ArenaDtor(void* object) {
  Chat_UserChannels_active* _this = reinterpret_cast< Chat_UserChannels_active* >(object);
  (void)_this;
}
void Chat_UserChannels_active::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Chat_UserChannels_active::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Chat_UserChannels_active::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Chat_UserChannels_active)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chat_UserChannels_active::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PRO.ChatChannelInfo channels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chat_UserChannels_active::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Chat_UserChannels_active)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PRO.ChatChannelInfo channels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_channels(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Chat_UserChannels_active)
  return target;
}

size_t Chat_UserChannels_active::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Chat_UserChannels_active)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PRO.ChatChannelInfo channels = 1;
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chat_UserChannels_active::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Chat_UserChannels_active::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chat_UserChannels_active::GetClassData() const { return &_class_data_; }

void Chat_UserChannels_active::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Chat_UserChannels_active *>(to)->MergeFrom(
      static_cast<const Chat_UserChannels_active &>(from));
}


void Chat_UserChannels_active::MergeFrom(const Chat_UserChannels_active& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Chat_UserChannels_active)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chat_UserChannels_active::CopyFrom(const Chat_UserChannels_active& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Chat_UserChannels_active)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chat_UserChannels_active::IsInitialized() const {
  return true;
}

void Chat_UserChannels_active::InternalSwap(Chat_UserChannels_active* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Chat_UserChannels_active::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_5fchat_2eproto_getter, &descriptor_table_user_5fchat_2eproto_once,
      file_level_metadata_user_5fchat_2eproto[4]);
}

// ===================================================================

class Chat_CustomChannelId_req::_Internal {
 public:
};

Chat_CustomChannelId_req::Chat_CustomChannelId_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:PRO.Chat_CustomChannelId_req)
}
Chat_CustomChannelId_req::Chat_CustomChannelId_req(const Chat_CustomChannelId_req& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PRO.Chat_CustomChannelId_req)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chat_CustomChannelId_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chat_CustomChannelId_req::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Chat_CustomChannelId_req::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_5fchat_2eproto_getter, &descriptor_table_user_5fchat_2eproto_once,
      file_level_metadata_user_5fchat_2eproto[5]);
}

// ===================================================================

class Chat_CustomChannelId_ack::_Internal {
 public:
  using HasBits = decltype(std::declval<Chat_CustomChannelId_ack>()._has_bits_);
  static const ::PRO::ChatChannelInfo& channel(const Chat_CustomChannelId_ack* msg);
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PRO::ChatChannelInfo&
Chat_CustomChannelId_ack::_Internal::channel(const Chat_CustomChannelId_ack* msg) {
  return *msg->channel_;
}
Chat_CustomChannelId_ack::Chat_CustomChannelId_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Chat_CustomChannelId_ack)
}
Chat_CustomChannelId_ack::Chat_CustomChannelId_ack(const Chat_CustomChannelId_ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_channel()) {
    channel_ = new ::PRO::ChatChannelInfo(*from.channel_);
  } else {
    channel_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:PRO.Chat_CustomChannelId_ack)
}

inline void Chat_CustomChannelId_ack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&channel_)) + sizeof(result_));
}

Chat_CustomChannelId_ack::~Chat_CustomChannelId_ack() {
  // @@protoc_insertion_point(destructor:PRO.Chat_CustomChannelId_ack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Chat_CustomChannelId_ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete channel_;
}

void Chat_CustomChannelId_ack::ArenaDtor(void* object) {
  Chat_CustomChannelId_ack* _this = reinterpret_cast< Chat_CustomChannelId_ack* >(object);
  (void)_this;
}
void Chat_CustomChannelId_ack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Chat_CustomChannelId_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Chat_CustomChannelId_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Chat_CustomChannelId_ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(channel_ != nullptr);
    channel_->Clear();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chat_CustomChannelId_ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PRO.ChatChannelInfo channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chat_CustomChannelId_ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Chat_CustomChannelId_ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // optional .PRO.ChatChannelInfo channel = 2;
  if (_internal_has_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::channel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Chat_CustomChannelId_ack)
  return target;
}

size_t Chat_CustomChannelId_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Chat_CustomChannelId_ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PRO.ChatChannelInfo channel = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_);
  }

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chat_CustomChannelId_ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Chat_CustomChannelId_ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chat_CustomChannelId_ack::GetClassData() const { return &_class_data_; }

void Chat_CustomChannelId_ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Chat_CustomChannelId_ack *>(to)->MergeFrom(
      static_cast<const Chat_CustomChannelId_ack &>(from));
}


void Chat_CustomChannelId_ack::MergeFrom(const Chat_CustomChannelId_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Chat_CustomChannelId_ack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_channel()) {
    _internal_mutable_channel()->::PRO::ChatChannelInfo::MergeFrom(from._internal_channel());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chat_CustomChannelId_ack::CopyFrom(const Chat_CustomChannelId_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Chat_CustomChannelId_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chat_CustomChannelId_ack::IsInitialized() const {
  return true;
}

void Chat_CustomChannelId_ack::InternalSwap(Chat_CustomChannelId_ack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Chat_CustomChannelId_ack, result_)
      + sizeof(Chat_CustomChannelId_ack::result_)
      - PROTOBUF_FIELD_OFFSET(Chat_CustomChannelId_ack, channel_)>(
          reinterpret_cast<char*>(&channel_),
          reinterpret_cast<char*>(&other->channel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Chat_CustomChannelId_ack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_5fchat_2eproto_getter, &descriptor_table_user_5fchat_2eproto_once,
      file_level_metadata_user_5fchat_2eproto[6]);
}

// ===================================================================

class Chat_UserMsg_say::_Internal {
 public:
  static const ::PRO::ChatChannelInfo& channel(const Chat_UserMsg_say* msg);
};

const ::PRO::ChatChannelInfo&
Chat_UserMsg_say::_Internal::channel(const Chat_UserMsg_say* msg) {
  return *msg->channel_;
}
Chat_UserMsg_say::Chat_UserMsg_say(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Chat_UserMsg_say)
}
Chat_UserMsg_say::Chat_UserMsg_say(const Chat_UserMsg_say& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArenaForAllocation());
  }
  msg_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg_content().empty()) {
    msg_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg_content(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_channel()) {
    channel_ = new ::PRO::ChatChannelInfo(*from.channel_);
  } else {
    channel_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PRO.Chat_UserMsg_say)
}

inline void Chat_UserMsg_say::SharedCtor() {
nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
msg_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
channel_ = nullptr;
}

Chat_UserMsg_say::~Chat_UserMsg_say() {
  // @@protoc_insertion_point(destructor:PRO.Chat_UserMsg_say)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Chat_UserMsg_say::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete channel_;
}

void Chat_UserMsg_say::ArenaDtor(void* object) {
  Chat_UserMsg_say* _this = reinterpret_cast< Chat_UserMsg_say* >(object);
  (void)_this;
}
void Chat_UserMsg_say::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Chat_UserMsg_say::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Chat_UserMsg_say::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Chat_UserMsg_say)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nickname_.ClearToEmpty();
  msg_content_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chat_UserMsg_say::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PRO.ChatChannelInfo channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.Chat_UserMsg_say.nickname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg_content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_msg_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.Chat_UserMsg_say.msg_content"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chat_UserMsg_say::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Chat_UserMsg_say)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PRO.ChatChannelInfo channel = 1;
  if (this->_internal_has_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::channel(this), target, stream);
  }

  // string nickname = 2;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.Chat_UserMsg_say.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // string msg_content = 3;
  if (!this->_internal_msg_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg_content().data(), static_cast<int>(this->_internal_msg_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.Chat_UserMsg_say.msg_content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Chat_UserMsg_say)
  return target;
}

size_t Chat_UserMsg_say::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Chat_UserMsg_say)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 2;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string msg_content = 3;
  if (!this->_internal_msg_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg_content());
  }

  // .PRO.ChatChannelInfo channel = 1;
  if (this->_internal_has_channel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chat_UserMsg_say::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Chat_UserMsg_say::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chat_UserMsg_say::GetClassData() const { return &_class_data_; }

void Chat_UserMsg_say::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Chat_UserMsg_say *>(to)->MergeFrom(
      static_cast<const Chat_UserMsg_say &>(from));
}


void Chat_UserMsg_say::MergeFrom(const Chat_UserMsg_say& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Chat_UserMsg_say)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nickname().empty()) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (!from._internal_msg_content().empty()) {
    _internal_set_msg_content(from._internal_msg_content());
  }
  if (from._internal_has_channel()) {
    _internal_mutable_channel()->::PRO::ChatChannelInfo::MergeFrom(from._internal_channel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chat_UserMsg_say::CopyFrom(const Chat_UserMsg_say& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Chat_UserMsg_say)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chat_UserMsg_say::IsInitialized() const {
  return true;
}

void Chat_UserMsg_say::InternalSwap(Chat_UserMsg_say* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nickname_, lhs_arena,
      &other->nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_content_, lhs_arena,
      &other->msg_content_, rhs_arena
  );
  swap(channel_, other->channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Chat_UserMsg_say::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_5fchat_2eproto_getter, &descriptor_table_user_5fchat_2eproto_once,
      file_level_metadata_user_5fchat_2eproto[7]);
}

// ===================================================================

class Chat_ChatMsg_ntf::_Internal {
 public:
  static const ::PRO::ChatChannelInfo& channel(const Chat_ChatMsg_ntf* msg);
  static const ::PRO::ChatMessageItems& msgs(const Chat_ChatMsg_ntf* msg);
};

const ::PRO::ChatChannelInfo&
Chat_ChatMsg_ntf::_Internal::channel(const Chat_ChatMsg_ntf* msg) {
  return *msg->channel_;
}
const ::PRO::ChatMessageItems&
Chat_ChatMsg_ntf::_Internal::msgs(const Chat_ChatMsg_ntf* msg) {
  return *msg->msgs_;
}
Chat_ChatMsg_ntf::Chat_ChatMsg_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Chat_ChatMsg_ntf)
}
Chat_ChatMsg_ntf::Chat_ChatMsg_ntf(const Chat_ChatMsg_ntf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_channel()) {
    channel_ = new ::PRO::ChatChannelInfo(*from.channel_);
  } else {
    channel_ = nullptr;
  }
  if (from._internal_has_msgs()) {
    msgs_ = new ::PRO::ChatMessageItems(*from.msgs_);
  } else {
    msgs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PRO.Chat_ChatMsg_ntf)
}

inline void Chat_ChatMsg_ntf::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&msgs_) -
    reinterpret_cast<char*>(&channel_)) + sizeof(msgs_));
}

Chat_ChatMsg_ntf::~Chat_ChatMsg_ntf() {
  // @@protoc_insertion_point(destructor:PRO.Chat_ChatMsg_ntf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Chat_ChatMsg_ntf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete channel_;
  if (this != internal_default_instance()) delete msgs_;
}

void Chat_ChatMsg_ntf::ArenaDtor(void* object) {
  Chat_ChatMsg_ntf* _this = reinterpret_cast< Chat_ChatMsg_ntf* >(object);
  (void)_this;
}
void Chat_ChatMsg_ntf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Chat_ChatMsg_ntf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Chat_ChatMsg_ntf::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Chat_ChatMsg_ntf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
  if (GetArenaForAllocation() == nullptr && msgs_ != nullptr) {
    delete msgs_;
  }
  msgs_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chat_ChatMsg_ntf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PRO.ChatChannelInfo channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PRO.ChatMessageItems msgs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msgs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chat_ChatMsg_ntf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Chat_ChatMsg_ntf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PRO.ChatChannelInfo channel = 1;
  if (this->_internal_has_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::channel(this), target, stream);
  }

  // .PRO.ChatMessageItems msgs = 2;
  if (this->_internal_has_msgs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::msgs(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Chat_ChatMsg_ntf)
  return target;
}

size_t Chat_ChatMsg_ntf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Chat_ChatMsg_ntf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PRO.ChatChannelInfo channel = 1;
  if (this->_internal_has_channel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_);
  }

  // .PRO.ChatMessageItems msgs = 2;
  if (this->_internal_has_msgs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msgs_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chat_ChatMsg_ntf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Chat_ChatMsg_ntf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chat_ChatMsg_ntf::GetClassData() const { return &_class_data_; }

void Chat_ChatMsg_ntf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Chat_ChatMsg_ntf *>(to)->MergeFrom(
      static_cast<const Chat_ChatMsg_ntf &>(from));
}


void Chat_ChatMsg_ntf::MergeFrom(const Chat_ChatMsg_ntf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Chat_ChatMsg_ntf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_channel()) {
    _internal_mutable_channel()->::PRO::ChatChannelInfo::MergeFrom(from._internal_channel());
  }
  if (from._internal_has_msgs()) {
    _internal_mutable_msgs()->::PRO::ChatMessageItems::MergeFrom(from._internal_msgs());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chat_ChatMsg_ntf::CopyFrom(const Chat_ChatMsg_ntf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Chat_ChatMsg_ntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chat_ChatMsg_ntf::IsInitialized() const {
  return true;
}

void Chat_ChatMsg_ntf::InternalSwap(Chat_ChatMsg_ntf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Chat_ChatMsg_ntf, msgs_)
      + sizeof(Chat_ChatMsg_ntf::msgs_)
      - PROTOBUF_FIELD_OFFSET(Chat_ChatMsg_ntf, channel_)>(
          reinterpret_cast<char*>(&channel_),
          reinterpret_cast<char*>(&other->channel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Chat_ChatMsg_ntf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_5fchat_2eproto_getter, &descriptor_table_user_5fchat_2eproto_once,
      file_level_metadata_user_5fchat_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace PRO
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PRO::ChatMessageItem* Arena::CreateMaybeMessage< ::PRO::ChatMessageItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::ChatMessageItem >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::ChatMessageItems* Arena::CreateMaybeMessage< ::PRO::ChatMessageItems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::ChatMessageItems >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::ChatChannelInfo* Arena::CreateMaybeMessage< ::PRO::ChatChannelInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::ChatChannelInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Chat_GlobalMsg_ntf* Arena::CreateMaybeMessage< ::PRO::Chat_GlobalMsg_ntf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Chat_GlobalMsg_ntf >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Chat_UserChannels_active* Arena::CreateMaybeMessage< ::PRO::Chat_UserChannels_active >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Chat_UserChannels_active >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Chat_CustomChannelId_req* Arena::CreateMaybeMessage< ::PRO::Chat_CustomChannelId_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Chat_CustomChannelId_req >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Chat_CustomChannelId_ack* Arena::CreateMaybeMessage< ::PRO::Chat_CustomChannelId_ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Chat_CustomChannelId_ack >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Chat_UserMsg_say* Arena::CreateMaybeMessage< ::PRO::Chat_UserMsg_say >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Chat_UserMsg_say >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Chat_ChatMsg_ntf* Arena::CreateMaybeMessage< ::PRO::Chat_ChatMsg_ntf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Chat_ChatMsg_ntf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_login.proto

#include "user_login.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace PRO {
constexpr User_Login_req::User_Login_req(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pwd_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_(int64_t{0})
  , userid_(int64_t{0})
  , type_(0){}
struct User_Login_reqDefaultTypeInternal {
  constexpr User_Login_reqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~User_Login_reqDefaultTypeInternal() {}
  union {
    User_Login_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT User_Login_reqDefaultTypeInternal _User_Login_req_default_instance_;
constexpr User_Login_ack::User_Login_ack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)
  , result_(0)
  , user_iid_(int64_t{0})
  , logintoken_(int64_t{0}){}
struct User_Login_ackDefaultTypeInternal {
  constexpr User_Login_ackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~User_Login_ackDefaultTypeInternal() {}
  union {
    User_Login_ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT User_Login_ackDefaultTypeInternal _User_Login_ack_default_instance_;
constexpr User_ReLogin_req::User_ReLogin_req(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_iid_(int64_t{0})
  , logintoken_(int64_t{0}){}
struct User_ReLogin_reqDefaultTypeInternal {
  constexpr User_ReLogin_reqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~User_ReLogin_reqDefaultTypeInternal() {}
  union {
    User_ReLogin_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT User_ReLogin_reqDefaultTypeInternal _User_ReLogin_req_default_instance_;
constexpr User_ReLogin_ack::User_ReLogin_ack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_iid_(int64_t{0})
  , role_iid_(int64_t{0})
  , gameid_(int64_t{0})
  , logintoken_(int64_t{0})
  , result_(0){}
struct User_ReLogin_ackDefaultTypeInternal {
  constexpr User_ReLogin_ackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~User_ReLogin_ackDefaultTypeInternal() {}
  union {
    User_ReLogin_ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT User_ReLogin_ackDefaultTypeInternal _User_ReLogin_ack_default_instance_;
constexpr User_Logout_ntf::User_Logout_ntf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_iid_(int64_t{0})
  , role_iid_(int64_t{0})
  , token_(int64_t{0})
  , gameid_(int64_t{0}){}
struct User_Logout_ntfDefaultTypeInternal {
  constexpr User_Logout_ntfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~User_Logout_ntfDefaultTypeInternal() {}
  union {
    User_Logout_ntf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT User_Logout_ntfDefaultTypeInternal _User_Logout_ntf_default_instance_;
constexpr User_GateLost_ntf::User_GateLost_ntf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct User_GateLost_ntfDefaultTypeInternal {
  constexpr User_GateLost_ntfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~User_GateLost_ntfDefaultTypeInternal() {}
  union {
    User_GateLost_ntf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT User_GateLost_ntfDefaultTypeInternal _User_GateLost_ntf_default_instance_;
constexpr User_Active_ntf::User_Active_ntf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gameid_(int64_t{0}){}
struct User_Active_ntfDefaultTypeInternal {
  constexpr User_Active_ntfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~User_Active_ntfDefaultTypeInternal() {}
  union {
    User_Active_ntf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT User_Active_ntfDefaultTypeInternal _User_Active_ntf_default_instance_;
constexpr User_RoleList_req::User_RoleList_req(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct User_RoleList_reqDefaultTypeInternal {
  constexpr User_RoleList_reqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~User_RoleList_reqDefaultTypeInternal() {}
  union {
    User_RoleList_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT User_RoleList_reqDefaultTypeInternal _User_RoleList_req_default_instance_;
constexpr User_RoleList_ack::User_RoleList_ack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roles_(nullptr){}
struct User_RoleList_ackDefaultTypeInternal {
  constexpr User_RoleList_ackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~User_RoleList_ackDefaultTypeInternal() {}
  union {
    User_RoleList_ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT User_RoleList_ackDefaultTypeInternal _User_RoleList_ack_default_instance_;
constexpr User_RoleCreate_req::User_RoleCreate_req(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nickname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct User_RoleCreate_reqDefaultTypeInternal {
  constexpr User_RoleCreate_reqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~User_RoleCreate_reqDefaultTypeInternal() {}
  union {
    User_RoleCreate_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT User_RoleCreate_reqDefaultTypeInternal _User_RoleCreate_req_default_instance_;
constexpr User_RoleCreate_ack::User_RoleCreate_ack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_iid_(int64_t{0})
  , result_(0){}
struct User_RoleCreate_ackDefaultTypeInternal {
  constexpr User_RoleCreate_ackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~User_RoleCreate_ackDefaultTypeInternal() {}
  union {
    User_RoleCreate_ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT User_RoleCreate_ackDefaultTypeInternal _User_RoleCreate_ack_default_instance_;
constexpr User_RoleSelect_req::User_RoleSelect_req(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_iid_(int64_t{0}){}
struct User_RoleSelect_reqDefaultTypeInternal {
  constexpr User_RoleSelect_reqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~User_RoleSelect_reqDefaultTypeInternal() {}
  union {
    User_RoleSelect_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT User_RoleSelect_reqDefaultTypeInternal _User_RoleSelect_req_default_instance_;
constexpr User_RoleSelect_ack::User_RoleSelect_ack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_iid_(int64_t{0})
  , result_(0){}
struct User_RoleSelect_ackDefaultTypeInternal {
  constexpr User_RoleSelect_ackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~User_RoleSelect_ackDefaultTypeInternal() {}
  union {
    User_RoleSelect_ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT User_RoleSelect_ackDefaultTypeInternal _User_RoleSelect_ack_default_instance_;
constexpr User_RoleDetailA_ntf::User_RoleDetailA_ntf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : home_(nullptr)
  , homeitems_(nullptr){}
struct User_RoleDetailA_ntfDefaultTypeInternal {
  constexpr User_RoleDetailA_ntfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~User_RoleDetailA_ntfDefaultTypeInternal() {}
  union {
    User_RoleDetailA_ntf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT User_RoleDetailA_ntfDefaultTypeInternal _User_RoleDetailA_ntf_default_instance_;
constexpr User_RoleDetailB_ntf::User_RoleDetailB_ntf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pets_(nullptr){}
struct User_RoleDetailB_ntfDefaultTypeInternal {
  constexpr User_RoleDetailB_ntfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~User_RoleDetailB_ntfDefaultTypeInternal() {}
  union {
    User_RoleDetailB_ntf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT User_RoleDetailB_ntfDefaultTypeInternal _User_RoleDetailB_ntf_default_instance_;
constexpr User_RoleDetailEnd_ntf::User_RoleDetailEnd_ntf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct User_RoleDetailEnd_ntfDefaultTypeInternal {
  constexpr User_RoleDetailEnd_ntfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~User_RoleDetailEnd_ntfDefaultTypeInternal() {}
  union {
    User_RoleDetailEnd_ntf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT User_RoleDetailEnd_ntfDefaultTypeInternal _User_RoleDetailEnd_ntf_default_instance_;
constexpr User_MySimpleInfo_req::User_MySimpleInfo_req(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gameid_(int64_t{0}){}
struct User_MySimpleInfo_reqDefaultTypeInternal {
  constexpr User_MySimpleInfo_reqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~User_MySimpleInfo_reqDefaultTypeInternal() {}
  union {
    User_MySimpleInfo_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT User_MySimpleInfo_reqDefaultTypeInternal _User_MySimpleInfo_req_default_instance_;
constexpr User_MySimpleInfo_ack::User_MySimpleInfo_ack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nickname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_iid_(int64_t{0})
  , role_iid_(int64_t{0})
  , gameid_(int64_t{0}){}
struct User_MySimpleInfo_ackDefaultTypeInternal {
  constexpr User_MySimpleInfo_ackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~User_MySimpleInfo_ackDefaultTypeInternal() {}
  union {
    User_MySimpleInfo_ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT User_MySimpleInfo_ackDefaultTypeInternal _User_MySimpleInfo_ack_default_instance_;
}  // namespace PRO
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_user_5flogin_2eproto[18];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_user_5flogin_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_user_5flogin_2eproto = nullptr;

const uint32_t TableStruct_user_5flogin_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::PRO::User_Login_req, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PRO::User_Login_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::User_Login_req, type_),
  PROTOBUF_FIELD_OFFSET(::PRO::User_Login_req, account_),
  PROTOBUF_FIELD_OFFSET(::PRO::User_Login_req, pwd_),
  PROTOBUF_FIELD_OFFSET(::PRO::User_Login_req, token_),
  PROTOBUF_FIELD_OFFSET(::PRO::User_Login_req, userid_),
  ~0u,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::PRO::User_Login_ack, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PRO::User_Login_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::User_Login_ack, type_),
  PROTOBUF_FIELD_OFFSET(::PRO::User_Login_ack, result_),
  PROTOBUF_FIELD_OFFSET(::PRO::User_Login_ack, user_iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::User_Login_ack, logintoken_),
  ~0u,
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::User_ReLogin_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::User_ReLogin_req, user_iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::User_ReLogin_req, logintoken_),
  PROTOBUF_FIELD_OFFSET(::PRO::User_ReLogin_ack, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PRO::User_ReLogin_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::User_ReLogin_ack, result_),
  PROTOBUF_FIELD_OFFSET(::PRO::User_ReLogin_ack, user_iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::User_ReLogin_ack, role_iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::User_ReLogin_ack, gameid_),
  PROTOBUF_FIELD_OFFSET(::PRO::User_ReLogin_ack, logintoken_),
  ~0u,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::PRO::User_Logout_ntf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PRO::User_Logout_ntf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::User_Logout_ntf, user_iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::User_Logout_ntf, role_iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::User_Logout_ntf, token_),
  PROTOBUF_FIELD_OFFSET(::PRO::User_Logout_ntf, gameid_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::User_GateLost_ntf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::User_Active_ntf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PRO::User_Active_ntf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::User_Active_ntf, gameid_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::User_RoleList_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::User_RoleList_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::User_RoleList_ack, roles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::User_RoleCreate_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::User_RoleCreate_req, nickname_),
  PROTOBUF_FIELD_OFFSET(::PRO::User_RoleCreate_ack, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PRO::User_RoleCreate_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::User_RoleCreate_ack, result_),
  PROTOBUF_FIELD_OFFSET(::PRO::User_RoleCreate_ack, role_iid_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::User_RoleSelect_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::User_RoleSelect_req, role_iid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::User_RoleSelect_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::User_RoleSelect_ack, result_),
  PROTOBUF_FIELD_OFFSET(::PRO::User_RoleSelect_ack, role_iid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::User_RoleDetailA_ntf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::User_RoleDetailA_ntf, home_),
  PROTOBUF_FIELD_OFFSET(::PRO::User_RoleDetailA_ntf, homeitems_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::User_RoleDetailB_ntf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::User_RoleDetailB_ntf, pets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::User_RoleDetailEnd_ntf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::User_MySimpleInfo_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::User_MySimpleInfo_req, gameid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::User_MySimpleInfo_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::User_MySimpleInfo_ack, user_iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::User_MySimpleInfo_ack, role_iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::User_MySimpleInfo_ack, gameid_),
  PROTOBUF_FIELD_OFFSET(::PRO::User_MySimpleInfo_ack, nickname_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::PRO::User_Login_req)},
  { 16, 26, -1, sizeof(::PRO::User_Login_ack)},
  { 30, -1, -1, sizeof(::PRO::User_ReLogin_req)},
  { 38, 49, -1, sizeof(::PRO::User_ReLogin_ack)},
  { 54, 64, -1, sizeof(::PRO::User_Logout_ntf)},
  { 68, -1, -1, sizeof(::PRO::User_GateLost_ntf)},
  { 74, 81, -1, sizeof(::PRO::User_Active_ntf)},
  { 82, -1, -1, sizeof(::PRO::User_RoleList_req)},
  { 88, -1, -1, sizeof(::PRO::User_RoleList_ack)},
  { 95, -1, -1, sizeof(::PRO::User_RoleCreate_req)},
  { 102, 110, -1, sizeof(::PRO::User_RoleCreate_ack)},
  { 112, -1, -1, sizeof(::PRO::User_RoleSelect_req)},
  { 119, -1, -1, sizeof(::PRO::User_RoleSelect_ack)},
  { 127, -1, -1, sizeof(::PRO::User_RoleDetailA_ntf)},
  { 135, -1, -1, sizeof(::PRO::User_RoleDetailB_ntf)},
  { 142, -1, -1, sizeof(::PRO::User_RoleDetailEnd_ntf)},
  { 148, -1, -1, sizeof(::PRO::User_MySimpleInfo_req)},
  { 155, -1, -1, sizeof(::PRO::User_MySimpleInfo_ack)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_User_Login_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_User_Login_ack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_User_ReLogin_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_User_ReLogin_ack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_User_Logout_ntf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_User_GateLost_ntf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_User_Active_ntf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_User_RoleList_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_User_RoleList_ack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_User_RoleCreate_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_User_RoleCreate_ack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_User_RoleSelect_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_User_RoleSelect_ack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_User_RoleDetailA_ntf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_User_RoleDetailB_ntf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_User_RoleDetailEnd_ntf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_User_MySimpleInfo_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_User_MySimpleInfo_ack_default_instance_),
};

const char descriptor_table_protodef_user_5flogin_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020user_login.proto\022\003PRO\032\021db_internal.pro"
  "to\"\230\001\n\016User_Login_req\022\014\n\004type\030\001 \001(\005\022\024\n\007a"
  "ccount\030\002 \001(\tH\000\210\001\001\022\020\n\003pwd\030\003 \001(\tH\001\210\001\001\022\022\n\005t"
  "oken\030\004 \001(\003H\002\210\001\001\022\023\n\006userid\030\005 \001(\003H\003\210\001\001B\n\n\010"
  "_accountB\006\n\004_pwdB\010\n\006_tokenB\t\n\007_userid\"z\n"
  "\016User_Login_ack\022\014\n\004type\030\001 \001(\005\022\016\n\006result\030"
  "\002 \001(\005\022\025\n\010user_iid\030\003 \001(\003H\000\210\001\001\022\027\n\nlogintok"
  "en\030\004 \001(\003H\001\210\001\001B\013\n\t_user_iidB\r\n\013_logintoke"
  "n\"8\n\020User_ReLogin_req\022\020\n\010user_iid\030\001 \001(\003\022"
  "\022\n\nlogintoken\030\002 \001(\003\"\262\001\n\020User_ReLogin_ack"
  "\022\016\n\006result\030\001 \001(\005\022\025\n\010user_iid\030\002 \001(\003H\000\210\001\001\022"
  "\025\n\010role_iid\030\003 \001(\003H\001\210\001\001\022\023\n\006gameid\030\004 \001(\003H\002"
  "\210\001\001\022\027\n\nlogintoken\030\005 \001(\003H\003\210\001\001B\013\n\t_user_ii"
  "dB\013\n\t_role_iidB\t\n\007_gameidB\r\n\013_logintoken"
  "\"\227\001\n\017User_Logout_ntf\022\025\n\010user_iid\030\001 \001(\003H\000"
  "\210\001\001\022\025\n\010role_iid\030\002 \001(\003H\001\210\001\001\022\022\n\005token\030\003 \001("
  "\003H\002\210\001\001\022\023\n\006gameid\030\004 \001(\003H\003\210\001\001B\013\n\t_user_iid"
  "B\013\n\t_role_iidB\010\n\006_tokenB\t\n\007_gameid\"\023\n\021Us"
  "er_GateLost_ntf\"1\n\017User_Active_ntf\022\023\n\006ga"
  "meid\030\001 \001(\003H\000\210\001\001B\t\n\007_gameid\"\023\n\021User_RoleL"
  "ist_req\"4\n\021User_RoleList_ack\022\037\n\005roles\030\001 "
  "\001(\0132\020.PRO.DBUserRoles\"\'\n\023User_RoleCreate"
  "_req\022\020\n\010nickname\030\001 \001(\t\"I\n\023User_RoleCreat"
  "e_ack\022\016\n\006result\030\001 \001(\005\022\025\n\010role_iid\030\002 \001(\003H"
  "\000\210\001\001B\013\n\t_role_iid\"\'\n\023User_RoleSelect_req"
  "\022\020\n\010role_iid\030\001 \001(\003\"7\n\023User_RoleSelect_ac"
  "k\022\016\n\006result\030\001 \001(\005\022\020\n\010role_iid\030\002 \001(\003\"b\n\024U"
  "ser_RoleDetailA_ntf\022\035\n\004home\030\001 \001(\0132\017.PRO."
  "DBUserHome\022+\n\thomeitems\030\002 \001(\0132\030.PRO.DBUs"
  "erHomeStructure\"5\n\024User_RoleDetailB_ntf\022"
  "\035\n\004pets\030\001 \001(\0132\017.PRO.DBUserPets\"\030\n\026User_R"
  "oleDetailEnd_ntf\"\'\n\025User_MySimpleInfo_re"
  "q\022\016\n\006gameid\030\001 \001(\003\"]\n\025User_MySimpleInfo_a"
  "ck\022\020\n\010user_iid\030\001 \001(\003\022\020\n\010role_iid\030\002 \001(\003\022\016"
  "\n\006gameid\030\003 \001(\003\022\020\n\010nickname\030\004 \001(\tBT\n\033com."
  "cms.client.network.gproP\001Z\025gamelib/proto"
  "buf/gpro\252\002\033com.cms.client.network.gprob\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_user_5flogin_2eproto_deps[1] = {
  &::descriptor_table_db_5finternal_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_user_5flogin_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_user_5flogin_2eproto = {
  false, false, 1486, descriptor_table_protodef_user_5flogin_2eproto, "user_login.proto", 
  &descriptor_table_user_5flogin_2eproto_once, descriptor_table_user_5flogin_2eproto_deps, 1, 18,
  schemas, file_default_instances, TableStruct_user_5flogin_2eproto::offsets,
  file_level_metadata_user_5flogin_2eproto, file_level_enum_descriptors_user_5flogin_2eproto, file_level_service_descriptors_user_5flogin_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_user_5flogin_2eproto_getter() {
  return &descriptor_table_user_5flogin_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_user_5flogin_2eproto(&descriptor_table_user_5flogin_2eproto);
namespace PRO {

// ===================================================================

class User_Login_req::_Internal {
 public:
  using HasBits = decltype(std::declval<User_Login_req>()._has_bits_);
  static void set_has_account(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pwd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

User_Login_req::User_Login_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.User_Login_req)
}
User_Login_req::User_Login_req(const User_Login_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_account()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pwd()) {
    pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pwd(), 
      GetArenaForAllocation());
  }
  ::memcpy(&token_, &from.token_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&token_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:PRO.User_Login_req)
}

inline void User_Login_req::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&token_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&token_)) + sizeof(type_));
}

User_Login_req::~User_Login_req() {
  // @@protoc_insertion_point(destructor:PRO.User_Login_req)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void User_Login_req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void User_Login_req::ArenaDtor(void* object) {
  User_Login_req* _this = reinterpret_cast< User_Login_req* >(object);
  (void)_this;
}
void User_Login_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void User_Login_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void User_Login_req::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.User_Login_req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      pwd_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&userid_) -
        reinterpret_cast<char*>(&token_)) + sizeof(userid_));
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* User_Login_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.User_Login_req.account"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string pwd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_pwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.User_Login_req.pwd"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_token(&has_bits);
          token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 userid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* User_Login_req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.User_Login_req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // optional string account = 2;
  if (_internal_has_account()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.User_Login_req.account");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_account(), target);
  }

  // optional string pwd = 3;
  if (_internal_has_pwd()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pwd().data(), static_cast<int>(this->_internal_pwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.User_Login_req.pwd");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pwd(), target);
  }

  // optional int64 token = 4;
  if (_internal_has_token()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_token(), target);
  }

  // optional int64 userid = 5;
  if (_internal_has_userid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.User_Login_req)
  return target;
}

size_t User_Login_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.User_Login_req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string account = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_account());
    }

    // optional string pwd = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pwd());
    }

    // optional int64 token = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_token());
    }

    // optional int64 userid = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_userid());
    }

  }
  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData User_Login_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    User_Login_req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*User_Login_req::GetClassData() const { return &_class_data_; }

void User_Login_req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<User_Login_req *>(to)->MergeFrom(
      static_cast<const User_Login_req &>(from));
}


void User_Login_req::MergeFrom(const User_Login_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.User_Login_req)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_account(from._internal_account());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_pwd(from._internal_pwd());
    }
    if (cached_has_bits & 0x00000004u) {
      token_ = from.token_;
    }
    if (cached_has_bits & 0x00000008u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void User_Login_req::CopyFrom(const User_Login_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.User_Login_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User_Login_req::IsInitialized() const {
  return true;
}

void User_Login_req::InternalSwap(User_Login_req* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, lhs_arena,
      &other->account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pwd_, lhs_arena,
      &other->pwd_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(User_Login_req, type_)
      + sizeof(User_Login_req::type_)
      - PROTOBUF_FIELD_OFFSET(User_Login_req, token_)>(
          reinterpret_cast<char*>(&token_),
          reinterpret_cast<char*>(&other->token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata User_Login_req::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_5flogin_2eproto_getter, &descriptor_table_user_5flogin_2eproto_once,
      file_level_metadata_user_5flogin_2eproto[0]);
}

// ===================================================================

class User_Login_ack::_Internal {
 public:
  using HasBits = decltype(std::declval<User_Login_ack>()._has_bits_);
  static void set_has_user_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_logintoken(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

User_Login_ack::User_Login_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.User_Login_ack)
}
User_Login_ack::User_Login_ack(const User_Login_ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&logintoken_) -
    reinterpret_cast<char*>(&type_)) + sizeof(logintoken_));
  // @@protoc_insertion_point(copy_constructor:PRO.User_Login_ack)
}

inline void User_Login_ack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&logintoken_) -
    reinterpret_cast<char*>(&type_)) + sizeof(logintoken_));
}

User_Login_ack::~User_Login_ack() {
  // @@protoc_insertion_point(destructor:PRO.User_Login_ack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void User_Login_ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void User_Login_ack::ArenaDtor(void* object) {
  User_Login_ack* _this = reinterpret_cast< User_Login_ack* >(object);
  (void)_this;
}
void User_Login_ack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void User_Login_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void User_Login_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.User_Login_ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&type_)) + sizeof(result_));
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&user_iid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&logintoken_) -
        reinterpret_cast<char*>(&user_iid_)) + sizeof(logintoken_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* User_Login_ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 user_iid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_iid(&has_bits);
          user_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 logintoken = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_logintoken(&has_bits);
          logintoken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* User_Login_ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.User_Login_ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 result = 2;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_result(), target);
  }

  // optional int64 user_iid = 3;
  if (_internal_has_user_iid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_user_iid(), target);
  }

  // optional int64 logintoken = 4;
  if (_internal_has_logintoken()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_logintoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.User_Login_ack)
  return target;
}

size_t User_Login_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.User_Login_ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // int32 result = 2;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 user_iid = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_user_iid());
    }

    // optional int64 logintoken = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_logintoken());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData User_Login_ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    User_Login_ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*User_Login_ack::GetClassData() const { return &_class_data_; }

void User_Login_ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<User_Login_ack *>(to)->MergeFrom(
      static_cast<const User_Login_ack &>(from));
}


void User_Login_ack::MergeFrom(const User_Login_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.User_Login_ack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      user_iid_ = from.user_iid_;
    }
    if (cached_has_bits & 0x00000002u) {
      logintoken_ = from.logintoken_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void User_Login_ack::CopyFrom(const User_Login_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.User_Login_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User_Login_ack::IsInitialized() const {
  return true;
}

void User_Login_ack::InternalSwap(User_Login_ack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(User_Login_ack, logintoken_)
      + sizeof(User_Login_ack::logintoken_)
      - PROTOBUF_FIELD_OFFSET(User_Login_ack, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata User_Login_ack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_5flogin_2eproto_getter, &descriptor_table_user_5flogin_2eproto_once,
      file_level_metadata_user_5flogin_2eproto[1]);
}

// ===================================================================

class User_ReLogin_req::_Internal {
 public:
};

User_ReLogin_req::User_ReLogin_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.User_ReLogin_req)
}
User_ReLogin_req::User_ReLogin_req(const User_ReLogin_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_iid_, &from.user_iid_,
    static_cast<size_t>(reinterpret_cast<char*>(&logintoken_) -
    reinterpret_cast<char*>(&user_iid_)) + sizeof(logintoken_));
  // @@protoc_insertion_point(copy_constructor:PRO.User_ReLogin_req)
}

inline void User_ReLogin_req::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_iid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&logintoken_) -
    reinterpret_cast<char*>(&user_iid_)) + sizeof(logintoken_));
}

User_ReLogin_req::~User_ReLogin_req() {
  // @@protoc_insertion_point(destructor:PRO.User_ReLogin_req)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void User_ReLogin_req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void User_ReLogin_req::ArenaDtor(void* object) {
  User_ReLogin_req* _this = reinterpret_cast< User_ReLogin_req* >(object);
  (void)_this;
}
void User_ReLogin_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void User_ReLogin_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void User_ReLogin_req::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.User_ReLogin_req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_iid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logintoken_) -
      reinterpret_cast<char*>(&user_iid_)) + sizeof(logintoken_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* User_ReLogin_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 user_iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 logintoken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          logintoken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* User_ReLogin_req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.User_ReLogin_req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_iid = 1;
  if (this->_internal_user_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_iid(), target);
  }

  // int64 logintoken = 2;
  if (this->_internal_logintoken() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_logintoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.User_ReLogin_req)
  return target;
}

size_t User_ReLogin_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.User_ReLogin_req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 user_iid = 1;
  if (this->_internal_user_iid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_user_iid());
  }

  // int64 logintoken = 2;
  if (this->_internal_logintoken() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_logintoken());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData User_ReLogin_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    User_ReLogin_req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*User_ReLogin_req::GetClassData() const { return &_class_data_; }

void User_ReLogin_req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<User_ReLogin_req *>(to)->MergeFrom(
      static_cast<const User_ReLogin_req &>(from));
}


void User_ReLogin_req::MergeFrom(const User_ReLogin_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.User_ReLogin_req)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_iid() != 0) {
    _internal_set_user_iid(from._internal_user_iid());
  }
  if (from._internal_logintoken() != 0) {
    _internal_set_logintoken(from._internal_logintoken());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void User_ReLogin_req::CopyFrom(const User_ReLogin_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.User_ReLogin_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User_ReLogin_req::IsInitialized() const {
  return true;
}

void User_ReLogin_req::InternalSwap(User_ReLogin_req* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(User_ReLogin_req, logintoken_)
      + sizeof(User_ReLogin_req::logintoken_)
      - PROTOBUF_FIELD_OFFSET(User_ReLogin_req, user_iid_)>(
          reinterpret_cast<char*>(&user_iid_),
          reinterpret_cast<char*>(&other->user_iid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata User_ReLogin_req::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_5flogin_2eproto_getter, &descriptor_table_user_5flogin_2eproto_once,
      file_level_metadata_user_5flogin_2eproto[2]);
}

// ===================================================================

class User_ReLogin_ack::_Internal {
 public:
  using HasBits = decltype(std::declval<User_ReLogin_ack>()._has_bits_);
  static void set_has_user_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_role_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_logintoken(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

User_ReLogin_ack::User_ReLogin_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.User_ReLogin_ack)
}
User_ReLogin_ack::User_ReLogin_ack(const User_ReLogin_ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_iid_, &from.user_iid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&user_iid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:PRO.User_ReLogin_ack)
}

inline void User_ReLogin_ack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_iid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&user_iid_)) + sizeof(result_));
}

User_ReLogin_ack::~User_ReLogin_ack() {
  // @@protoc_insertion_point(destructor:PRO.User_ReLogin_ack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void User_ReLogin_ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void User_ReLogin_ack::ArenaDtor(void* object) {
  User_ReLogin_ack* _this = reinterpret_cast< User_ReLogin_ack* >(object);
  (void)_this;
}
void User_ReLogin_ack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void User_ReLogin_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void User_ReLogin_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.User_ReLogin_ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&user_iid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&logintoken_) -
        reinterpret_cast<char*>(&user_iid_)) + sizeof(logintoken_));
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* User_ReLogin_ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 user_iid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_user_iid(&has_bits);
          user_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 role_iid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_role_iid(&has_bits);
          role_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 gameid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_gameid(&has_bits);
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 logintoken = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_logintoken(&has_bits);
          logintoken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* User_ReLogin_ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.User_ReLogin_ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // optional int64 user_iid = 2;
  if (_internal_has_user_iid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_user_iid(), target);
  }

  // optional int64 role_iid = 3;
  if (_internal_has_role_iid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_role_iid(), target);
  }

  // optional int64 gameid = 4;
  if (_internal_has_gameid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_gameid(), target);
  }

  // optional int64 logintoken = 5;
  if (_internal_has_logintoken()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_logintoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.User_ReLogin_ack)
  return target;
}

size_t User_ReLogin_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.User_ReLogin_ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int64 user_iid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_user_iid());
    }

    // optional int64 role_iid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_role_iid());
    }

    // optional int64 gameid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_gameid());
    }

    // optional int64 logintoken = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_logintoken());
    }

  }
  // int32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData User_ReLogin_ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    User_ReLogin_ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*User_ReLogin_ack::GetClassData() const { return &_class_data_; }

void User_ReLogin_ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<User_ReLogin_ack *>(to)->MergeFrom(
      static_cast<const User_ReLogin_ack &>(from));
}


void User_ReLogin_ack::MergeFrom(const User_ReLogin_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.User_ReLogin_ack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      user_iid_ = from.user_iid_;
    }
    if (cached_has_bits & 0x00000002u) {
      role_iid_ = from.role_iid_;
    }
    if (cached_has_bits & 0x00000004u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000008u) {
      logintoken_ = from.logintoken_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void User_ReLogin_ack::CopyFrom(const User_ReLogin_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.User_ReLogin_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User_ReLogin_ack::IsInitialized() const {
  return true;
}

void User_ReLogin_ack::InternalSwap(User_ReLogin_ack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(User_ReLogin_ack, result_)
      + sizeof(User_ReLogin_ack::result_)
      - PROTOBUF_FIELD_OFFSET(User_ReLogin_ack, user_iid_)>(
          reinterpret_cast<char*>(&user_iid_),
          reinterpret_cast<char*>(&other->user_iid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata User_ReLogin_ack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_5flogin_2eproto_getter, &descriptor_table_user_5flogin_2eproto_once,
      file_level_metadata_user_5flogin_2eproto[3]);
}

// ===================================================================

class User_Logout_ntf::_Internal {
 public:
  using HasBits = decltype(std::declval<User_Logout_ntf>()._has_bits_);
  static void set_has_user_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_role_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

User_Logout_ntf::User_Logout_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.User_Logout_ntf)
}
User_Logout_ntf::User_Logout_ntf(const User_Logout_ntf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_iid_, &from.user_iid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gameid_) -
    reinterpret_cast<char*>(&user_iid_)) + sizeof(gameid_));
  // @@protoc_insertion_point(copy_constructor:PRO.User_Logout_ntf)
}

inline void User_Logout_ntf::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_iid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gameid_) -
    reinterpret_cast<char*>(&user_iid_)) + sizeof(gameid_));
}

User_Logout_ntf::~User_Logout_ntf() {
  // @@protoc_insertion_point(destructor:PRO.User_Logout_ntf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void User_Logout_ntf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void User_Logout_ntf::ArenaDtor(void* object) {
  User_Logout_ntf* _this = reinterpret_cast< User_Logout_ntf* >(object);
  (void)_this;
}
void User_Logout_ntf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void User_Logout_ntf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void User_Logout_ntf::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.User_Logout_ntf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&user_iid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gameid_) -
        reinterpret_cast<char*>(&user_iid_)) + sizeof(gameid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* User_Logout_ntf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 user_iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_user_iid(&has_bits);
          user_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 role_iid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_role_iid(&has_bits);
          role_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_token(&has_bits);
          token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 gameid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_gameid(&has_bits);
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* User_Logout_ntf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.User_Logout_ntf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 user_iid = 1;
  if (_internal_has_user_iid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_iid(), target);
  }

  // optional int64 role_iid = 2;
  if (_internal_has_role_iid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_role_iid(), target);
  }

  // optional int64 token = 3;
  if (_internal_has_token()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_token(), target);
  }

  // optional int64 gameid = 4;
  if (_internal_has_gameid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_gameid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.User_Logout_ntf)
  return target;
}

size_t User_Logout_ntf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.User_Logout_ntf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int64 user_iid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_user_iid());
    }

    // optional int64 role_iid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_role_iid());
    }

    // optional int64 token = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_token());
    }

    // optional int64 gameid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_gameid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData User_Logout_ntf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    User_Logout_ntf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*User_Logout_ntf::GetClassData() const { return &_class_data_; }

void User_Logout_ntf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<User_Logout_ntf *>(to)->MergeFrom(
      static_cast<const User_Logout_ntf &>(from));
}


void User_Logout_ntf::MergeFrom(const User_Logout_ntf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.User_Logout_ntf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      user_iid_ = from.user_iid_;
    }
    if (cached_has_bits & 0x00000002u) {
      role_iid_ = from.role_iid_;
    }
    if (cached_has_bits & 0x00000004u) {
      token_ = from.token_;
    }
    if (cached_has_bits & 0x00000008u) {
      gameid_ = from.gameid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void User_Logout_ntf::CopyFrom(const User_Logout_ntf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.User_Logout_ntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User_Logout_ntf::IsInitialized() const {
  return true;
}

void User_Logout_ntf::InternalSwap(User_Logout_ntf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(User_Logout_ntf, gameid_)
      + sizeof(User_Logout_ntf::gameid_)
      - PROTOBUF_FIELD_OFFSET(User_Logout_ntf, user_iid_)>(
          reinterpret_cast<char*>(&user_iid_),
          reinterpret_cast<char*>(&other->user_iid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata User_Logout_ntf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_5flogin_2eproto_getter, &descriptor_table_user_5flogin_2eproto_once,
      file_level_metadata_user_5flogin_2eproto[4]);
}

// ===================================================================

class User_GateLost_ntf::_Internal {
 public:
};

User_GateLost_ntf::User_GateLost_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:PRO.User_GateLost_ntf)
}
User_GateLost_ntf::User_GateLost_ntf(const User_GateLost_ntf& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PRO.User_GateLost_ntf)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData User_GateLost_ntf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*User_GateLost_ntf::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata User_GateLost_ntf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_5flogin_2eproto_getter, &descriptor_table_user_5flogin_2eproto_once,
      file_level_metadata_user_5flogin_2eproto[5]);
}

// ===================================================================

class User_Active_ntf::_Internal {
 public:
  using HasBits = decltype(std::declval<User_Active_ntf>()._has_bits_);
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

User_Active_ntf::User_Active_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.User_Active_ntf)
}
User_Active_ntf::User_Active_ntf(const User_Active_ntf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gameid_ = from.gameid_;
  // @@protoc_insertion_point(copy_constructor:PRO.User_Active_ntf)
}

inline void User_Active_ntf::SharedCtor() {
gameid_ = int64_t{0};
}

User_Active_ntf::~User_Active_ntf() {
  // @@protoc_insertion_point(destructor:PRO.User_Active_ntf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void User_Active_ntf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void User_Active_ntf::ArenaDtor(void* object) {
  User_Active_ntf* _this = reinterpret_cast< User_Active_ntf* >(object);
  (void)_this;
}
void User_Active_ntf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void User_Active_ntf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void User_Active_ntf::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.User_Active_ntf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameid_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* User_Active_ntf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 gameid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_gameid(&has_bits);
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* User_Active_ntf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.User_Active_ntf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 gameid = 1;
  if (_internal_has_gameid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_gameid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.User_Active_ntf)
  return target;
}

size_t User_Active_ntf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.User_Active_ntf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 gameid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_gameid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData User_Active_ntf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    User_Active_ntf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*User_Active_ntf::GetClassData() const { return &_class_data_; }

void User_Active_ntf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<User_Active_ntf *>(to)->MergeFrom(
      static_cast<const User_Active_ntf &>(from));
}


void User_Active_ntf::MergeFrom(const User_Active_ntf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.User_Active_ntf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gameid()) {
    _internal_set_gameid(from._internal_gameid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void User_Active_ntf::CopyFrom(const User_Active_ntf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.User_Active_ntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User_Active_ntf::IsInitialized() const {
  return true;
}

void User_Active_ntf::InternalSwap(User_Active_ntf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gameid_, other->gameid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata User_Active_ntf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_5flogin_2eproto_getter, &descriptor_table_user_5flogin_2eproto_once,
      file_level_metadata_user_5flogin_2eproto[6]);
}

// ===================================================================

class User_RoleList_req::_Internal {
 public:
};

User_RoleList_req::User_RoleList_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:PRO.User_RoleList_req)
}
User_RoleList_req::User_RoleList_req(const User_RoleList_req& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PRO.User_RoleList_req)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData User_RoleList_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*User_RoleList_req::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata User_RoleList_req::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_5flogin_2eproto_getter, &descriptor_table_user_5flogin_2eproto_once,
      file_level_metadata_user_5flogin_2eproto[7]);
}

// ===================================================================

class User_RoleList_ack::_Internal {
 public:
  static const ::PRO::DBUserRoles& roles(const User_RoleList_ack* msg);
};

const ::PRO::DBUserRoles&
User_RoleList_ack::_Internal::roles(const User_RoleList_ack* msg) {
  return *msg->roles_;
}
void User_RoleList_ack::clear_roles() {
  if (GetArenaForAllocation() == nullptr && roles_ != nullptr) {
    delete roles_;
  }
  roles_ = nullptr;
}
User_RoleList_ack::User_RoleList_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.User_RoleList_ack)
}
User_RoleList_ack::User_RoleList_ack(const User_RoleList_ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_roles()) {
    roles_ = new ::PRO::DBUserRoles(*from.roles_);
  } else {
    roles_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PRO.User_RoleList_ack)
}

inline void User_RoleList_ack::SharedCtor() {
roles_ = nullptr;
}

User_RoleList_ack::~User_RoleList_ack() {
  // @@protoc_insertion_point(destructor:PRO.User_RoleList_ack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void User_RoleList_ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete roles_;
}

void User_RoleList_ack::ArenaDtor(void* object) {
  User_RoleList_ack* _this = reinterpret_cast< User_RoleList_ack* >(object);
  (void)_this;
}
void User_RoleList_ack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void User_RoleList_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void User_RoleList_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.User_RoleList_ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && roles_ != nullptr) {
    delete roles_;
  }
  roles_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* User_RoleList_ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PRO.DBUserRoles roles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_roles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* User_RoleList_ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.User_RoleList_ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PRO.DBUserRoles roles = 1;
  if (this->_internal_has_roles()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::roles(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.User_RoleList_ack)
  return target;
}

size_t User_RoleList_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.User_RoleList_ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PRO.DBUserRoles roles = 1;
  if (this->_internal_has_roles()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roles_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData User_RoleList_ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    User_RoleList_ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*User_RoleList_ack::GetClassData() const { return &_class_data_; }

void User_RoleList_ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<User_RoleList_ack *>(to)->MergeFrom(
      static_cast<const User_RoleList_ack &>(from));
}


void User_RoleList_ack::MergeFrom(const User_RoleList_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.User_RoleList_ack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_roles()) {
    _internal_mutable_roles()->::PRO::DBUserRoles::MergeFrom(from._internal_roles());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void User_RoleList_ack::CopyFrom(const User_RoleList_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.User_RoleList_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User_RoleList_ack::IsInitialized() const {
  return true;
}

void User_RoleList_ack::InternalSwap(User_RoleList_ack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(roles_, other->roles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata User_RoleList_ack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_5flogin_2eproto_getter, &descriptor_table_user_5flogin_2eproto_once,
      file_level_metadata_user_5flogin_2eproto[8]);
}

// ===================================================================

class User_RoleCreate_req::_Internal {
 public:
};

User_RoleCreate_req::User_RoleCreate_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.User_RoleCreate_req)
}
User_RoleCreate_req::User_RoleCreate_req(const User_RoleCreate_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:PRO.User_RoleCreate_req)
}

inline void User_RoleCreate_req::SharedCtor() {
nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

User_RoleCreate_req::~User_RoleCreate_req() {
  // @@protoc_insertion_point(destructor:PRO.User_RoleCreate_req)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void User_RoleCreate_req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void User_RoleCreate_req::ArenaDtor(void* object) {
  User_RoleCreate_req* _this = reinterpret_cast< User_RoleCreate_req* >(object);
  (void)_this;
}
void User_RoleCreate_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void User_RoleCreate_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void User_RoleCreate_req::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.User_RoleCreate_req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nickname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* User_RoleCreate_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string nickname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.User_RoleCreate_req.nickname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* User_RoleCreate_req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.User_RoleCreate_req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string nickname = 1;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.User_RoleCreate_req.nickname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nickname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.User_RoleCreate_req)
  return target;
}

size_t User_RoleCreate_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.User_RoleCreate_req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 1;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData User_RoleCreate_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    User_RoleCreate_req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*User_RoleCreate_req::GetClassData() const { return &_class_data_; }

void User_RoleCreate_req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<User_RoleCreate_req *>(to)->MergeFrom(
      static_cast<const User_RoleCreate_req &>(from));
}


void User_RoleCreate_req::MergeFrom(const User_RoleCreate_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.User_RoleCreate_req)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nickname().empty()) {
    _internal_set_nickname(from._internal_nickname());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void User_RoleCreate_req::CopyFrom(const User_RoleCreate_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.User_RoleCreate_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User_RoleCreate_req::IsInitialized() const {
  return true;
}

void User_RoleCreate_req::InternalSwap(User_RoleCreate_req* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nickname_, lhs_arena,
      &other->nickname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata User_RoleCreate_req::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_5flogin_2eproto_getter, &descriptor_table_user_5flogin_2eproto_once,
      file_level_metadata_user_5flogin_2eproto[9]);
}

// ===================================================================

class User_RoleCreate_ack::_Internal {
 public:
  using HasBits = decltype(std::declval<User_RoleCreate_ack>()._has_bits_);
  static void set_has_role_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

User_RoleCreate_ack::User_RoleCreate_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.User_RoleCreate_ack)
}
User_RoleCreate_ack::User_RoleCreate_ack(const User_RoleCreate_ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&role_iid_, &from.role_iid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&role_iid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:PRO.User_RoleCreate_ack)
}

inline void User_RoleCreate_ack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&role_iid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&role_iid_)) + sizeof(result_));
}

User_RoleCreate_ack::~User_RoleCreate_ack() {
  // @@protoc_insertion_point(destructor:PRO.User_RoleCreate_ack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void User_RoleCreate_ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void User_RoleCreate_ack::ArenaDtor(void* object) {
  User_RoleCreate_ack* _this = reinterpret_cast< User_RoleCreate_ack* >(object);
  (void)_this;
}
void User_RoleCreate_ack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void User_RoleCreate_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void User_RoleCreate_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.User_RoleCreate_ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_iid_ = int64_t{0};
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* User_RoleCreate_ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 role_iid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_role_iid(&has_bits);
          role_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* User_RoleCreate_ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.User_RoleCreate_ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // optional int64 role_iid = 2;
  if (_internal_has_role_iid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_role_iid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.User_RoleCreate_ack)
  return target;
}

size_t User_RoleCreate_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.User_RoleCreate_ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 role_iid = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_role_iid());
  }

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData User_RoleCreate_ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    User_RoleCreate_ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*User_RoleCreate_ack::GetClassData() const { return &_class_data_; }

void User_RoleCreate_ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<User_RoleCreate_ack *>(to)->MergeFrom(
      static_cast<const User_RoleCreate_ack &>(from));
}


void User_RoleCreate_ack::MergeFrom(const User_RoleCreate_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.User_RoleCreate_ack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_role_iid()) {
    _internal_set_role_iid(from._internal_role_iid());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void User_RoleCreate_ack::CopyFrom(const User_RoleCreate_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.User_RoleCreate_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User_RoleCreate_ack::IsInitialized() const {
  return true;
}

void User_RoleCreate_ack::InternalSwap(User_RoleCreate_ack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(User_RoleCreate_ack, result_)
      + sizeof(User_RoleCreate_ack::result_)
      - PROTOBUF_FIELD_OFFSET(User_RoleCreate_ack, role_iid_)>(
          reinterpret_cast<char*>(&role_iid_),
          reinterpret_cast<char*>(&other->role_iid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata User_RoleCreate_ack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_5flogin_2eproto_getter, &descriptor_table_user_5flogin_2eproto_once,
      file_level_metadata_user_5flogin_2eproto[10]);
}

// ===================================================================

class User_RoleSelect_req::_Internal {
 public:
};

User_RoleSelect_req::User_RoleSelect_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.User_RoleSelect_req)
}
User_RoleSelect_req::User_RoleSelect_req(const User_RoleSelect_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  role_iid_ = from.role_iid_;
  // @@protoc_insertion_point(copy_constructor:PRO.User_RoleSelect_req)
}

inline void User_RoleSelect_req::SharedCtor() {
role_iid_ = int64_t{0};
}

User_RoleSelect_req::~User_RoleSelect_req() {
  // @@protoc_insertion_point(destructor:PRO.User_RoleSelect_req)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void User_RoleSelect_req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void User_RoleSelect_req::ArenaDtor(void* object) {
  User_RoleSelect_req* _this = reinterpret_cast< User_RoleSelect_req* >(object);
  (void)_this;
}
void User_RoleSelect_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void User_RoleSelect_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void User_RoleSelect_req::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.User_RoleSelect_req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_iid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* User_RoleSelect_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 role_iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          role_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* User_RoleSelect_req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.User_RoleSelect_req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 role_iid = 1;
  if (this->_internal_role_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_role_iid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.User_RoleSelect_req)
  return target;
}

size_t User_RoleSelect_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.User_RoleSelect_req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 role_iid = 1;
  if (this->_internal_role_iid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_role_iid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData User_RoleSelect_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    User_RoleSelect_req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*User_RoleSelect_req::GetClassData() const { return &_class_data_; }

void User_RoleSelect_req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<User_RoleSelect_req *>(to)->MergeFrom(
      static_cast<const User_RoleSelect_req &>(from));
}


void User_RoleSelect_req::MergeFrom(const User_RoleSelect_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.User_RoleSelect_req)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_role_iid() != 0) {
    _internal_set_role_iid(from._internal_role_iid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void User_RoleSelect_req::CopyFrom(const User_RoleSelect_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.User_RoleSelect_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User_RoleSelect_req::IsInitialized() const {
  return true;
}

void User_RoleSelect_req::InternalSwap(User_RoleSelect_req* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(role_iid_, other->role_iid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata User_RoleSelect_req::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_5flogin_2eproto_getter, &descriptor_table_user_5flogin_2eproto_once,
      file_level_metadata_user_5flogin_2eproto[11]);
}

// ===================================================================

class User_RoleSelect_ack::_Internal {
 public:
};

User_RoleSelect_ack::User_RoleSelect_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.User_RoleSelect_ack)
}
User_RoleSelect_ack::User_RoleSelect_ack(const User_RoleSelect_ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&role_iid_, &from.role_iid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&role_iid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:PRO.User_RoleSelect_ack)
}

inline void User_RoleSelect_ack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&role_iid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&role_iid_)) + sizeof(result_));
}

User_RoleSelect_ack::~User_RoleSelect_ack() {
  // @@protoc_insertion_point(destructor:PRO.User_RoleSelect_ack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void User_RoleSelect_ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void User_RoleSelect_ack::ArenaDtor(void* object) {
  User_RoleSelect_ack* _this = reinterpret_cast< User_RoleSelect_ack* >(object);
  (void)_this;
}
void User_RoleSelect_ack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void User_RoleSelect_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void User_RoleSelect_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.User_RoleSelect_ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&role_iid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&role_iid_)) + sizeof(result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* User_RoleSelect_ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 role_iid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          role_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* User_RoleSelect_ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.User_RoleSelect_ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // int64 role_iid = 2;
  if (this->_internal_role_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_role_iid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.User_RoleSelect_ack)
  return target;
}

size_t User_RoleSelect_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.User_RoleSelect_ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 role_iid = 2;
  if (this->_internal_role_iid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_role_iid());
  }

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData User_RoleSelect_ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    User_RoleSelect_ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*User_RoleSelect_ack::GetClassData() const { return &_class_data_; }

void User_RoleSelect_ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<User_RoleSelect_ack *>(to)->MergeFrom(
      static_cast<const User_RoleSelect_ack &>(from));
}


void User_RoleSelect_ack::MergeFrom(const User_RoleSelect_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.User_RoleSelect_ack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_role_iid() != 0) {
    _internal_set_role_iid(from._internal_role_iid());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void User_RoleSelect_ack::CopyFrom(const User_RoleSelect_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.User_RoleSelect_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User_RoleSelect_ack::IsInitialized() const {
  return true;
}

void User_RoleSelect_ack::InternalSwap(User_RoleSelect_ack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(User_RoleSelect_ack, result_)
      + sizeof(User_RoleSelect_ack::result_)
      - PROTOBUF_FIELD_OFFSET(User_RoleSelect_ack, role_iid_)>(
          reinterpret_cast<char*>(&role_iid_),
          reinterpret_cast<char*>(&other->role_iid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata User_RoleSelect_ack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_5flogin_2eproto_getter, &descriptor_table_user_5flogin_2eproto_once,
      file_level_metadata_user_5flogin_2eproto[12]);
}

// ===================================================================

class User_RoleDetailA_ntf::_Internal {
 public:
  static const ::PRO::DBUserHome& home(const User_RoleDetailA_ntf* msg);
  static const ::PRO::DBUserHomeStructure& homeitems(const User_RoleDetailA_ntf* msg);
};

const ::PRO::DBUserHome&
User_RoleDetailA_ntf::_Internal::home(const User_RoleDetailA_ntf* msg) {
  return *msg->home_;
}
const ::PRO::DBUserHomeStructure&
User_RoleDetailA_ntf::_Internal::homeitems(const User_RoleDetailA_ntf* msg) {
  return *msg->homeitems_;
}
void User_RoleDetailA_ntf::clear_home() {
  if (GetArenaForAllocation() == nullptr && home_ != nullptr) {
    delete home_;
  }
  home_ = nullptr;
}
void User_RoleDetailA_ntf::clear_homeitems() {
  if (GetArenaForAllocation() == nullptr && homeitems_ != nullptr) {
    delete homeitems_;
  }
  homeitems_ = nullptr;
}
User_RoleDetailA_ntf::User_RoleDetailA_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.User_RoleDetailA_ntf)
}
User_RoleDetailA_ntf::User_RoleDetailA_ntf(const User_RoleDetailA_ntf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_home()) {
    home_ = new ::PRO::DBUserHome(*from.home_);
  } else {
    home_ = nullptr;
  }
  if (from._internal_has_homeitems()) {
    homeitems_ = new ::PRO::DBUserHomeStructure(*from.homeitems_);
  } else {
    homeitems_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PRO.User_RoleDetailA_ntf)
}

inline void User_RoleDetailA_ntf::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&home_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&homeitems_) -
    reinterpret_cast<char*>(&home_)) + sizeof(homeitems_));
}

User_RoleDetailA_ntf::~User_RoleDetailA_ntf() {
  // @@protoc_insertion_point(destructor:PRO.User_RoleDetailA_ntf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void User_RoleDetailA_ntf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete home_;
  if (this != internal_default_instance()) delete homeitems_;
}

void User_RoleDetailA_ntf::ArenaDtor(void* object) {
  User_RoleDetailA_ntf* _this = reinterpret_cast< User_RoleDetailA_ntf* >(object);
  (void)_this;
}
void User_RoleDetailA_ntf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void User_RoleDetailA_ntf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void User_RoleDetailA_ntf::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.User_RoleDetailA_ntf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && home_ != nullptr) {
    delete home_;
  }
  home_ = nullptr;
  if (GetArenaForAllocation() == nullptr && homeitems_ != nullptr) {
    delete homeitems_;
  }
  homeitems_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* User_RoleDetailA_ntf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PRO.DBUserHome home = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_home(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PRO.DBUserHomeStructure homeitems = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_homeitems(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* User_RoleDetailA_ntf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.User_RoleDetailA_ntf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PRO.DBUserHome home = 1;
  if (this->_internal_has_home()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::home(this), target, stream);
  }

  // .PRO.DBUserHomeStructure homeitems = 2;
  if (this->_internal_has_homeitems()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::homeitems(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.User_RoleDetailA_ntf)
  return target;
}

size_t User_RoleDetailA_ntf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.User_RoleDetailA_ntf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PRO.DBUserHome home = 1;
  if (this->_internal_has_home()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *home_);
  }

  // .PRO.DBUserHomeStructure homeitems = 2;
  if (this->_internal_has_homeitems()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *homeitems_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData User_RoleDetailA_ntf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    User_RoleDetailA_ntf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*User_RoleDetailA_ntf::GetClassData() const { return &_class_data_; }

void User_RoleDetailA_ntf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<User_RoleDetailA_ntf *>(to)->MergeFrom(
      static_cast<const User_RoleDetailA_ntf &>(from));
}


void User_RoleDetailA_ntf::MergeFrom(const User_RoleDetailA_ntf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.User_RoleDetailA_ntf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_home()) {
    _internal_mutable_home()->::PRO::DBUserHome::MergeFrom(from._internal_home());
  }
  if (from._internal_has_homeitems()) {
    _internal_mutable_homeitems()->::PRO::DBUserHomeStructure::MergeFrom(from._internal_homeitems());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void User_RoleDetailA_ntf::CopyFrom(const User_RoleDetailA_ntf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.User_RoleDetailA_ntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User_RoleDetailA_ntf::IsInitialized() const {
  return true;
}

void User_RoleDetailA_ntf::InternalSwap(User_RoleDetailA_ntf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(User_RoleDetailA_ntf, homeitems_)
      + sizeof(User_RoleDetailA_ntf::homeitems_)
      - PROTOBUF_FIELD_OFFSET(User_RoleDetailA_ntf, home_)>(
          reinterpret_cast<char*>(&home_),
          reinterpret_cast<char*>(&other->home_));
}

::PROTOBUF_NAMESPACE_ID::Metadata User_RoleDetailA_ntf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_5flogin_2eproto_getter, &descriptor_table_user_5flogin_2eproto_once,
      file_level_metadata_user_5flogin_2eproto[13]);
}

// ===================================================================

class User_RoleDetailB_ntf::_Internal {
 public:
  static const ::PRO::DBUserPets& pets(const User_RoleDetailB_ntf* msg);
};

const ::PRO::DBUserPets&
User_RoleDetailB_ntf::_Internal::pets(const User_RoleDetailB_ntf* msg) {
  return *msg->pets_;
}
void User_RoleDetailB_ntf::clear_pets() {
  if (GetArenaForAllocation() == nullptr && pets_ != nullptr) {
    delete pets_;
  }
  pets_ = nullptr;
}
User_RoleDetailB_ntf::User_RoleDetailB_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.User_RoleDetailB_ntf)
}
User_RoleDetailB_ntf::User_RoleDetailB_ntf(const User_RoleDetailB_ntf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pets()) {
    pets_ = new ::PRO::DBUserPets(*from.pets_);
  } else {
    pets_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PRO.User_RoleDetailB_ntf)
}

inline void User_RoleDetailB_ntf::SharedCtor() {
pets_ = nullptr;
}

User_RoleDetailB_ntf::~User_RoleDetailB_ntf() {
  // @@protoc_insertion_point(destructor:PRO.User_RoleDetailB_ntf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void User_RoleDetailB_ntf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pets_;
}

void User_RoleDetailB_ntf::ArenaDtor(void* object) {
  User_RoleDetailB_ntf* _this = reinterpret_cast< User_RoleDetailB_ntf* >(object);
  (void)_this;
}
void User_RoleDetailB_ntf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void User_RoleDetailB_ntf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void User_RoleDetailB_ntf::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.User_RoleDetailB_ntf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pets_ != nullptr) {
    delete pets_;
  }
  pets_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* User_RoleDetailB_ntf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PRO.DBUserPets pets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pets(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* User_RoleDetailB_ntf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.User_RoleDetailB_ntf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PRO.DBUserPets pets = 1;
  if (this->_internal_has_pets()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pets(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.User_RoleDetailB_ntf)
  return target;
}

size_t User_RoleDetailB_ntf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.User_RoleDetailB_ntf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PRO.DBUserPets pets = 1;
  if (this->_internal_has_pets()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pets_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData User_RoleDetailB_ntf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    User_RoleDetailB_ntf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*User_RoleDetailB_ntf::GetClassData() const { return &_class_data_; }

void User_RoleDetailB_ntf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<User_RoleDetailB_ntf *>(to)->MergeFrom(
      static_cast<const User_RoleDetailB_ntf &>(from));
}


void User_RoleDetailB_ntf::MergeFrom(const User_RoleDetailB_ntf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.User_RoleDetailB_ntf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pets()) {
    _internal_mutable_pets()->::PRO::DBUserPets::MergeFrom(from._internal_pets());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void User_RoleDetailB_ntf::CopyFrom(const User_RoleDetailB_ntf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.User_RoleDetailB_ntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User_RoleDetailB_ntf::IsInitialized() const {
  return true;
}

void User_RoleDetailB_ntf::InternalSwap(User_RoleDetailB_ntf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(pets_, other->pets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata User_RoleDetailB_ntf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_5flogin_2eproto_getter, &descriptor_table_user_5flogin_2eproto_once,
      file_level_metadata_user_5flogin_2eproto[14]);
}

// ===================================================================

class User_RoleDetailEnd_ntf::_Internal {
 public:
};

User_RoleDetailEnd_ntf::User_RoleDetailEnd_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:PRO.User_RoleDetailEnd_ntf)
}
User_RoleDetailEnd_ntf::User_RoleDetailEnd_ntf(const User_RoleDetailEnd_ntf& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PRO.User_RoleDetailEnd_ntf)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData User_RoleDetailEnd_ntf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*User_RoleDetailEnd_ntf::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata User_RoleDetailEnd_ntf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_5flogin_2eproto_getter, &descriptor_table_user_5flogin_2eproto_once,
      file_level_metadata_user_5flogin_2eproto[15]);
}

// ===================================================================

class User_MySimpleInfo_req::_Internal {
 public:
};

User_MySimpleInfo_req::User_MySimpleInfo_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.User_MySimpleInfo_req)
}
User_MySimpleInfo_req::User_MySimpleInfo_req(const User_MySimpleInfo_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gameid_ = from.gameid_;
  // @@protoc_insertion_point(copy_constructor:PRO.User_MySimpleInfo_req)
}

inline void User_MySimpleInfo_req::SharedCtor() {
gameid_ = int64_t{0};
}

User_MySimpleInfo_req::~User_MySimpleInfo_req() {
  // @@protoc_insertion_point(destructor:PRO.User_MySimpleInfo_req)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void User_MySimpleInfo_req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void User_MySimpleInfo_req::ArenaDtor(void* object) {
  User_MySimpleInfo_req* _this = reinterpret_cast< User_MySimpleInfo_req* >(object);
  (void)_this;
}
void User_MySimpleInfo_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void User_MySimpleInfo_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void User_MySimpleInfo_req::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.User_MySimpleInfo_req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* User_MySimpleInfo_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 gameid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* User_MySimpleInfo_req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.User_MySimpleInfo_req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 gameid = 1;
  if (this->_internal_gameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_gameid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.User_MySimpleInfo_req)
  return target;
}

size_t User_MySimpleInfo_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.User_MySimpleInfo_req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 gameid = 1;
  if (this->_internal_gameid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_gameid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData User_MySimpleInfo_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    User_MySimpleInfo_req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*User_MySimpleInfo_req::GetClassData() const { return &_class_data_; }

void User_MySimpleInfo_req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<User_MySimpleInfo_req *>(to)->MergeFrom(
      static_cast<const User_MySimpleInfo_req &>(from));
}


void User_MySimpleInfo_req::MergeFrom(const User_MySimpleInfo_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.User_MySimpleInfo_req)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gameid() != 0) {
    _internal_set_gameid(from._internal_gameid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void User_MySimpleInfo_req::CopyFrom(const User_MySimpleInfo_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.User_MySimpleInfo_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User_MySimpleInfo_req::IsInitialized() const {
  return true;
}

void User_MySimpleInfo_req::InternalSwap(User_MySimpleInfo_req* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(gameid_, other->gameid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata User_MySimpleInfo_req::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_5flogin_2eproto_getter, &descriptor_table_user_5flogin_2eproto_once,
      file_level_metadata_user_5flogin_2eproto[16]);
}

// ===================================================================

class User_MySimpleInfo_ack::_Internal {
 public:
};

User_MySimpleInfo_ack::User_MySimpleInfo_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.User_MySimpleInfo_ack)
}
User_MySimpleInfo_ack::User_MySimpleInfo_ack(const User_MySimpleInfo_ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&user_iid_, &from.user_iid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gameid_) -
    reinterpret_cast<char*>(&user_iid_)) + sizeof(gameid_));
  // @@protoc_insertion_point(copy_constructor:PRO.User_MySimpleInfo_ack)
}

inline void User_MySimpleInfo_ack::SharedCtor() {
nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_iid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gameid_) -
    reinterpret_cast<char*>(&user_iid_)) + sizeof(gameid_));
}

User_MySimpleInfo_ack::~User_MySimpleInfo_ack() {
  // @@protoc_insertion_point(destructor:PRO.User_MySimpleInfo_ack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void User_MySimpleInfo_ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void User_MySimpleInfo_ack::ArenaDtor(void* object) {
  User_MySimpleInfo_ack* _this = reinterpret_cast< User_MySimpleInfo_ack* >(object);
  (void)_this;
}
void User_MySimpleInfo_ack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void User_MySimpleInfo_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void User_MySimpleInfo_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.User_MySimpleInfo_ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nickname_.ClearToEmpty();
  ::memset(&user_iid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gameid_) -
      reinterpret_cast<char*>(&user_iid_)) + sizeof(gameid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* User_MySimpleInfo_ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 user_iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 role_iid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          role_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 gameid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nickname = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.User_MySimpleInfo_ack.nickname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* User_MySimpleInfo_ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.User_MySimpleInfo_ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_iid = 1;
  if (this->_internal_user_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_iid(), target);
  }

  // int64 role_iid = 2;
  if (this->_internal_role_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_role_iid(), target);
  }

  // int64 gameid = 3;
  if (this->_internal_gameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_gameid(), target);
  }

  // string nickname = 4;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.User_MySimpleInfo_ack.nickname");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_nickname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.User_MySimpleInfo_ack)
  return target;
}

size_t User_MySimpleInfo_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.User_MySimpleInfo_ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 4;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // int64 user_iid = 1;
  if (this->_internal_user_iid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_user_iid());
  }

  // int64 role_iid = 2;
  if (this->_internal_role_iid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_role_iid());
  }

  // int64 gameid = 3;
  if (this->_internal_gameid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_gameid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData User_MySimpleInfo_ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    User_MySimpleInfo_ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*User_MySimpleInfo_ack::GetClassData() const { return &_class_data_; }

void User_MySimpleInfo_ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<User_MySimpleInfo_ack *>(to)->MergeFrom(
      static_cast<const User_MySimpleInfo_ack &>(from));
}


void User_MySimpleInfo_ack::MergeFrom(const User_MySimpleInfo_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.User_MySimpleInfo_ack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nickname().empty()) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (from._internal_user_iid() != 0) {
    _internal_set_user_iid(from._internal_user_iid());
  }
  if (from._internal_role_iid() != 0) {
    _internal_set_role_iid(from._internal_role_iid());
  }
  if (from._internal_gameid() != 0) {
    _internal_set_gameid(from._internal_gameid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void User_MySimpleInfo_ack::CopyFrom(const User_MySimpleInfo_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.User_MySimpleInfo_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User_MySimpleInfo_ack::IsInitialized() const {
  return true;
}

void User_MySimpleInfo_ack::InternalSwap(User_MySimpleInfo_ack* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nickname_, lhs_arena,
      &other->nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(User_MySimpleInfo_ack, gameid_)
      + sizeof(User_MySimpleInfo_ack::gameid_)
      - PROTOBUF_FIELD_OFFSET(User_MySimpleInfo_ack, user_iid_)>(
          reinterpret_cast<char*>(&user_iid_),
          reinterpret_cast<char*>(&other->user_iid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata User_MySimpleInfo_ack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_user_5flogin_2eproto_getter, &descriptor_table_user_5flogin_2eproto_once,
      file_level_metadata_user_5flogin_2eproto[17]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace PRO
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PRO::User_Login_req* Arena::CreateMaybeMessage< ::PRO::User_Login_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::User_Login_req >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::User_Login_ack* Arena::CreateMaybeMessage< ::PRO::User_Login_ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::User_Login_ack >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::User_ReLogin_req* Arena::CreateMaybeMessage< ::PRO::User_ReLogin_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::User_ReLogin_req >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::User_ReLogin_ack* Arena::CreateMaybeMessage< ::PRO::User_ReLogin_ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::User_ReLogin_ack >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::User_Logout_ntf* Arena::CreateMaybeMessage< ::PRO::User_Logout_ntf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::User_Logout_ntf >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::User_GateLost_ntf* Arena::CreateMaybeMessage< ::PRO::User_GateLost_ntf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::User_GateLost_ntf >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::User_Active_ntf* Arena::CreateMaybeMessage< ::PRO::User_Active_ntf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::User_Active_ntf >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::User_RoleList_req* Arena::CreateMaybeMessage< ::PRO::User_RoleList_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::User_RoleList_req >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::User_RoleList_ack* Arena::CreateMaybeMessage< ::PRO::User_RoleList_ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::User_RoleList_ack >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::User_RoleCreate_req* Arena::CreateMaybeMessage< ::PRO::User_RoleCreate_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::User_RoleCreate_req >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::User_RoleCreate_ack* Arena::CreateMaybeMessage< ::PRO::User_RoleCreate_ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::User_RoleCreate_ack >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::User_RoleSelect_req* Arena::CreateMaybeMessage< ::PRO::User_RoleSelect_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::User_RoleSelect_req >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::User_RoleSelect_ack* Arena::CreateMaybeMessage< ::PRO::User_RoleSelect_ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::User_RoleSelect_ack >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::User_RoleDetailA_ntf* Arena::CreateMaybeMessage< ::PRO::User_RoleDetailA_ntf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::User_RoleDetailA_ntf >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::User_RoleDetailB_ntf* Arena::CreateMaybeMessage< ::PRO::User_RoleDetailB_ntf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::User_RoleDetailB_ntf >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::User_RoleDetailEnd_ntf* Arena::CreateMaybeMessage< ::PRO::User_RoleDetailEnd_ntf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::User_RoleDetailEnd_ntf >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::User_MySimpleInfo_req* Arena::CreateMaybeMessage< ::PRO::User_MySimpleInfo_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::User_MySimpleInfo_req >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::User_MySimpleInfo_ack* Arena::CreateMaybeMessage< ::PRO::User_MySimpleInfo_ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::User_MySimpleInfo_ack >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

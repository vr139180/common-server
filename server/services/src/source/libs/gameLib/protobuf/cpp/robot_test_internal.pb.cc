// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot_test_internal.proto

#include "robot_test_internal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace PRO {
constexpr Robot_Config_Req::Robot_Config_Req(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : robotname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , robotpwd_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(0){}
struct Robot_Config_ReqDefaultTypeInternal {
  constexpr Robot_Config_ReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Robot_Config_ReqDefaultTypeInternal() {}
  union {
    Robot_Config_Req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Robot_Config_ReqDefaultTypeInternal _Robot_Config_Req_default_instance_;
constexpr Robot_Config_Ack::Robot_Config_Ack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lgsip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(0)
  , result_(0)
  , startuserid_(int64_t{0})
  , robotid_(0)
  , users_(0)
  , usersrange_(0)
  , lgsport_(0){}
struct Robot_Config_AckDefaultTypeInternal {
  constexpr Robot_Config_AckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Robot_Config_AckDefaultTypeInternal() {}
  union {
    Robot_Config_Ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Robot_Config_AckDefaultTypeInternal _Robot_Config_Ack_default_instance_;
constexpr Robot_Start_Ack::Robot_Start_Ack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : behavior_()
  , logininterval_(int64_t{0})
  , startusernum_(0){}
struct Robot_Start_AckDefaultTypeInternal {
  constexpr Robot_Start_AckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Robot_Start_AckDefaultTypeInternal() {}
  union {
    Robot_Start_Ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Robot_Start_AckDefaultTypeInternal _Robot_Start_Ack_default_instance_;
constexpr Robot_Stop_Ack::Robot_Stop_Ack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Robot_Stop_AckDefaultTypeInternal {
  constexpr Robot_Stop_AckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Robot_Stop_AckDefaultTypeInternal() {}
  union {
    Robot_Stop_Ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Robot_Stop_AckDefaultTypeInternal _Robot_Stop_Ack_default_instance_;
constexpr Robot_State_Rpt_ActionGroup::Robot_State_Rpt_ActionGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : actions_(int64_t{0})
  , succeeds_(int64_t{0})
  , faileds_(int64_t{0})
  , timeouts_(int64_t{0})
  , timeinterval_(int64_t{0}){}
struct Robot_State_Rpt_ActionGroupDefaultTypeInternal {
  constexpr Robot_State_Rpt_ActionGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Robot_State_Rpt_ActionGroupDefaultTypeInternal() {}
  union {
    Robot_State_Rpt_ActionGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Robot_State_Rpt_ActionGroupDefaultTypeInternal _Robot_State_Rpt_ActionGroup_default_instance_;
constexpr Robot_State_Rpt_StateData::Robot_State_Rpt_StateData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logon_(nullptr)
  , getrole_(nullptr)
  , selrole_(nullptr)
  , getchannel_(nullptr)
  , selchannel_(nullptr)
  , getroom_(nullptr)
  , loginroom_(nullptr)
  , logoutroom_(nullptr)
  , logoutchannel_(nullptr)
  , logout_(nullptr){}
struct Robot_State_Rpt_StateDataDefaultTypeInternal {
  constexpr Robot_State_Rpt_StateDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Robot_State_Rpt_StateDataDefaultTypeInternal() {}
  union {
    Robot_State_Rpt_StateData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Robot_State_Rpt_StateDataDefaultTypeInternal _Robot_State_Rpt_StateData_default_instance_;
constexpr Robot_State_Rpt::Robot_State_Rpt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stat_data_()
  , robotid_(int64_t{0}){}
struct Robot_State_RptDefaultTypeInternal {
  constexpr Robot_State_RptDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Robot_State_RptDefaultTypeInternal() {}
  union {
    Robot_State_Rpt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Robot_State_RptDefaultTypeInternal _Robot_State_Rpt_default_instance_;
constexpr Robot_State_Ack::Robot_State_Ack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : userid_(int64_t{0}){}
struct Robot_State_AckDefaultTypeInternal {
  constexpr Robot_State_AckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Robot_State_AckDefaultTypeInternal() {}
  union {
    Robot_State_Ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Robot_State_AckDefaultTypeInternal _Robot_State_Ack_default_instance_;
}  // namespace PRO
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_robot_5ftest_5finternal_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_robot_5ftest_5finternal_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_robot_5ftest_5finternal_2eproto = nullptr;

const uint32_t TableStruct_robot_5ftest_5finternal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Config_Req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Config_Req, version_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Config_Req, robotname_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Config_Req, robotpwd_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Config_Ack, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Config_Ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Config_Ack, version_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Config_Ack, result_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Config_Ack, robotid_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Config_Ack, startuserid_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Config_Ack, users_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Config_Ack, usersrange_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Config_Ack, lgsip_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Config_Ack, lgsport_),
  ~0u,
  ~0u,
  2,
  1,
  3,
  4,
  0,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Start_Ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Start_Ack, startusernum_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Start_Ack, logininterval_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Start_Ack, behavior_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Stop_Ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_State_Rpt_ActionGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_State_Rpt_ActionGroup, actions_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_State_Rpt_ActionGroup, succeeds_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_State_Rpt_ActionGroup, faileds_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_State_Rpt_ActionGroup, timeouts_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_State_Rpt_ActionGroup, timeinterval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_State_Rpt_StateData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_State_Rpt_StateData, logon_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_State_Rpt_StateData, getrole_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_State_Rpt_StateData, selrole_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_State_Rpt_StateData, getchannel_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_State_Rpt_StateData, selchannel_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_State_Rpt_StateData, getroom_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_State_Rpt_StateData, loginroom_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_State_Rpt_StateData, logoutroom_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_State_Rpt_StateData, logoutchannel_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_State_Rpt_StateData, logout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_State_Rpt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_State_Rpt, robotid_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_State_Rpt, stat_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_State_Ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_State_Ack, userid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::PRO::Robot_Config_Req)},
  { 9, 23, -1, sizeof(::PRO::Robot_Config_Ack)},
  { 31, -1, -1, sizeof(::PRO::Robot_Start_Ack)},
  { 40, -1, -1, sizeof(::PRO::Robot_Stop_Ack)},
  { 46, -1, -1, sizeof(::PRO::Robot_State_Rpt_ActionGroup)},
  { 57, -1, -1, sizeof(::PRO::Robot_State_Rpt_StateData)},
  { 73, -1, -1, sizeof(::PRO::Robot_State_Rpt)},
  { 81, -1, -1, sizeof(::PRO::Robot_State_Ack)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Robot_Config_Req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Robot_Config_Ack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Robot_Start_Ack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Robot_Stop_Ack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Robot_State_Rpt_ActionGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Robot_State_Rpt_StateData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Robot_State_Rpt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Robot_State_Ack_default_instance_),
};

const char descriptor_table_protodef_robot_5ftest_5finternal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031robot_test_internal.proto\022\003PRO\"H\n\020Robo"
  "t_Config_Req\022\017\n\007version\030\001 \001(\005\022\021\n\trobotna"
  "me\030\002 \001(\t\022\020\n\010robotpwd\030\003 \001(\t\"\205\002\n\020Robot_Con"
  "fig_Ack\022\017\n\007version\030\001 \001(\005\022\016\n\006result\030\002 \001(\005"
  "\022\024\n\007robotid\030\003 \001(\005H\000\210\001\001\022\030\n\013startuserid\030\004 "
  "\001(\003H\001\210\001\001\022\022\n\005users\030\005 \001(\005H\002\210\001\001\022\027\n\nusersran"
  "ge\030\006 \001(\005H\003\210\001\001\022\022\n\005lgsip\030\007 \001(\tH\004\210\001\001\022\024\n\007lgs"
  "port\030\010 \001(\005H\005\210\001\001B\n\n\010_robotidB\016\n\014_startuse"
  "ridB\010\n\006_usersB\r\n\013_usersrangeB\010\n\006_lgsipB\n"
  "\n\010_lgsport\"P\n\017Robot_Start_Ack\022\024\n\014startus"
  "ernum\030\001 \001(\005\022\025\n\rlogininterval\030\002 \001(\003\022\020\n\010be"
  "havior\030\003 \003(\t\"\020\n\016Robot_Stop_Ack\"\332\005\n\017Robot"
  "_State_Rpt\022\017\n\007robotid\030\001 \001(\003\0221\n\tstat_data"
  "\030\002 \003(\0132\036.PRO.Robot_State_Rpt.StateData\032i"
  "\n\013ActionGroup\022\017\n\007actions\030\001 \001(\003\022\020\n\010succee"
  "ds\030\002 \001(\003\022\017\n\007faileds\030\003 \001(\003\022\020\n\010timeouts\030\004 "
  "\001(\003\022\024\n\014timeinterval\030\005 \001(\003\032\227\004\n\tStateData\022"
  "/\n\005logon\030\001 \001(\0132 .PRO.Robot_State_Rpt.Act"
  "ionGroup\0221\n\007getrole\030\002 \001(\0132 .PRO.Robot_St"
  "ate_Rpt.ActionGroup\0221\n\007selrole\030\003 \001(\0132 .P"
  "RO.Robot_State_Rpt.ActionGroup\0224\n\ngetcha"
  "nnel\030\004 \001(\0132 .PRO.Robot_State_Rpt.ActionG"
  "roup\0224\n\nselchannel\030\005 \001(\0132 .PRO.Robot_Sta"
  "te_Rpt.ActionGroup\0221\n\007getroom\030\006 \001(\0132 .PR"
  "O.Robot_State_Rpt.ActionGroup\0223\n\tloginro"
  "om\030\007 \001(\0132 .PRO.Robot_State_Rpt.ActionGro"
  "up\0224\n\nlogoutroom\030\010 \001(\0132 .PRO.Robot_State"
  "_Rpt.ActionGroup\0227\n\rlogoutchannel\030\t \001(\0132"
  " .PRO.Robot_State_Rpt.ActionGroup\0220\n\006log"
  "out\030\n \001(\0132 .PRO.Robot_State_Rpt.ActionGr"
  "oup\"!\n\017Robot_State_Ack\022\016\n\006userid\030\001 \001(\003*;"
  "\n\013ROBOT_CONST\022\031\n\025ROBOT_CONST_UNIVERSAL\020\000"
  "\022\021\n\rROBOT_VERSION\020\001BT\n\033com.cms.client.ne"
  "twork.gproP\001Z\025gamelib/protobuf/gpro\252\002\033co"
  "m.cms.client.network.gprob\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_robot_5ftest_5finternal_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_robot_5ftest_5finternal_2eproto = {
  false, false, 1393, descriptor_table_protodef_robot_5ftest_5finternal_2eproto, "robot_test_internal.proto", 
  &descriptor_table_robot_5ftest_5finternal_2eproto_once, nullptr, 0, 8,
  schemas, file_default_instances, TableStruct_robot_5ftest_5finternal_2eproto::offsets,
  file_level_metadata_robot_5ftest_5finternal_2eproto, file_level_enum_descriptors_robot_5ftest_5finternal_2eproto, file_level_service_descriptors_robot_5ftest_5finternal_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_robot_5ftest_5finternal_2eproto_getter() {
  return &descriptor_table_robot_5ftest_5finternal_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_robot_5ftest_5finternal_2eproto(&descriptor_table_robot_5ftest_5finternal_2eproto);
namespace PRO {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ROBOT_CONST_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_5ftest_5finternal_2eproto);
  return file_level_enum_descriptors_robot_5ftest_5finternal_2eproto[0];
}
bool ROBOT_CONST_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Robot_Config_Req::_Internal {
 public:
};

Robot_Config_Req::Robot_Config_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Robot_Config_Req)
}
Robot_Config_Req::Robot_Config_Req(const Robot_Config_Req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  robotname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    robotname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_robotname().empty()) {
    robotname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_robotname(), 
      GetArenaForAllocation());
  }
  robotpwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    robotpwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_robotpwd().empty()) {
    robotpwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_robotpwd(), 
      GetArenaForAllocation());
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:PRO.Robot_Config_Req)
}

inline void Robot_Config_Req::SharedCtor() {
robotname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  robotname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
robotpwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  robotpwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_ = 0;
}

Robot_Config_Req::~Robot_Config_Req() {
  // @@protoc_insertion_point(destructor:PRO.Robot_Config_Req)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Robot_Config_Req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  robotname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  robotpwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Robot_Config_Req::ArenaDtor(void* object) {
  Robot_Config_Req* _this = reinterpret_cast< Robot_Config_Req* >(object);
  (void)_this;
}
void Robot_Config_Req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Robot_Config_Req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Robot_Config_Req::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Robot_Config_Req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robotname_.ClearToEmpty();
  robotpwd_.ClearToEmpty();
  version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Robot_Config_Req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string robotname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_robotname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.Robot_Config_Req.robotname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string robotpwd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_robotpwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.Robot_Config_Req.robotpwd"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Robot_Config_Req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Robot_Config_Req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // string robotname = 2;
  if (!this->_internal_robotname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robotname().data(), static_cast<int>(this->_internal_robotname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.Robot_Config_Req.robotname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_robotname(), target);
  }

  // string robotpwd = 3;
  if (!this->_internal_robotpwd().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robotpwd().data(), static_cast<int>(this->_internal_robotpwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.Robot_Config_Req.robotpwd");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_robotpwd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Robot_Config_Req)
  return target;
}

size_t Robot_Config_Req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Robot_Config_Req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string robotname = 2;
  if (!this->_internal_robotname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robotname());
  }

  // string robotpwd = 3;
  if (!this->_internal_robotpwd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robotpwd());
  }

  // int32 version = 1;
  if (this->_internal_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Robot_Config_Req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Robot_Config_Req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Robot_Config_Req::GetClassData() const { return &_class_data_; }

void Robot_Config_Req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Robot_Config_Req *>(to)->MergeFrom(
      static_cast<const Robot_Config_Req &>(from));
}


void Robot_Config_Req::MergeFrom(const Robot_Config_Req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Robot_Config_Req)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_robotname().empty()) {
    _internal_set_robotname(from._internal_robotname());
  }
  if (!from._internal_robotpwd().empty()) {
    _internal_set_robotpwd(from._internal_robotpwd());
  }
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Robot_Config_Req::CopyFrom(const Robot_Config_Req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Robot_Config_Req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot_Config_Req::IsInitialized() const {
  return true;
}

void Robot_Config_Req::InternalSwap(Robot_Config_Req* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &robotname_, lhs_arena,
      &other->robotname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &robotpwd_, lhs_arena,
      &other->robotpwd_, rhs_arena
  );
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Robot_Config_Req::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5ftest_5finternal_2eproto_getter, &descriptor_table_robot_5ftest_5finternal_2eproto_once,
      file_level_metadata_robot_5ftest_5finternal_2eproto[0]);
}

// ===================================================================

class Robot_Config_Ack::_Internal {
 public:
  using HasBits = decltype(std::declval<Robot_Config_Ack>()._has_bits_);
  static void set_has_robotid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_startuserid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_users(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_usersrange(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_lgsip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lgsport(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Robot_Config_Ack::Robot_Config_Ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Robot_Config_Ack)
}
Robot_Config_Ack::Robot_Config_Ack(const Robot_Config_Ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lgsip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    lgsip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_lgsip()) {
    lgsip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lgsip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&lgsport_) -
    reinterpret_cast<char*>(&version_)) + sizeof(lgsport_));
  // @@protoc_insertion_point(copy_constructor:PRO.Robot_Config_Ack)
}

inline void Robot_Config_Ack::SharedCtor() {
lgsip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  lgsip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lgsport_) -
    reinterpret_cast<char*>(&version_)) + sizeof(lgsport_));
}

Robot_Config_Ack::~Robot_Config_Ack() {
  // @@protoc_insertion_point(destructor:PRO.Robot_Config_Ack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Robot_Config_Ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  lgsip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Robot_Config_Ack::ArenaDtor(void* object) {
  Robot_Config_Ack* _this = reinterpret_cast< Robot_Config_Ack* >(object);
  (void)_this;
}
void Robot_Config_Ack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Robot_Config_Ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Robot_Config_Ack::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Robot_Config_Ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    lgsip_.ClearNonDefaultToEmpty();
  }
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&version_)) + sizeof(result_));
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&startuserid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lgsport_) -
        reinterpret_cast<char*>(&startuserid_)) + sizeof(lgsport_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Robot_Config_Ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 robotid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_robotid(&has_bits);
          robotid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 startuserid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_startuserid(&has_bits);
          startuserid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 users = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_users(&has_bits);
          users_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 usersrange = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_usersrange(&has_bits);
          usersrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string lgsip = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_lgsip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.Robot_Config_Ack.lgsip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 lgsport = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_lgsport(&has_bits);
          lgsport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Robot_Config_Ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Robot_Config_Ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // int32 result = 2;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_result(), target);
  }

  // optional int32 robotid = 3;
  if (_internal_has_robotid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_robotid(), target);
  }

  // optional int64 startuserid = 4;
  if (_internal_has_startuserid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_startuserid(), target);
  }

  // optional int32 users = 5;
  if (_internal_has_users()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_users(), target);
  }

  // optional int32 usersrange = 6;
  if (_internal_has_usersrange()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_usersrange(), target);
  }

  // optional string lgsip = 7;
  if (_internal_has_lgsip()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lgsip().data(), static_cast<int>(this->_internal_lgsip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.Robot_Config_Ack.lgsip");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_lgsip(), target);
  }

  // optional int32 lgsport = 8;
  if (_internal_has_lgsport()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_lgsport(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Robot_Config_Ack)
  return target;
}

size_t Robot_Config_Ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Robot_Config_Ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string lgsip = 7;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lgsip());
  }

  // int32 version = 1;
  if (this->_internal_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  // int32 result = 2;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  if (cached_has_bits & 0x0000003eu) {
    // optional int64 startuserid = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_startuserid());
    }

    // optional int32 robotid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_robotid());
    }

    // optional int32 users = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_users());
    }

    // optional int32 usersrange = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_usersrange());
    }

    // optional int32 lgsport = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_lgsport());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Robot_Config_Ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Robot_Config_Ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Robot_Config_Ack::GetClassData() const { return &_class_data_; }

void Robot_Config_Ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Robot_Config_Ack *>(to)->MergeFrom(
      static_cast<const Robot_Config_Ack &>(from));
}


void Robot_Config_Ack::MergeFrom(const Robot_Config_Ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Robot_Config_Ack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_lgsip()) {
    _internal_set_lgsip(from._internal_lgsip());
  }
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    if (cached_has_bits & 0x00000002u) {
      startuserid_ = from.startuserid_;
    }
    if (cached_has_bits & 0x00000004u) {
      robotid_ = from.robotid_;
    }
    if (cached_has_bits & 0x00000008u) {
      users_ = from.users_;
    }
    if (cached_has_bits & 0x00000010u) {
      usersrange_ = from.usersrange_;
    }
    if (cached_has_bits & 0x00000020u) {
      lgsport_ = from.lgsport_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Robot_Config_Ack::CopyFrom(const Robot_Config_Ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Robot_Config_Ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot_Config_Ack::IsInitialized() const {
  return true;
}

void Robot_Config_Ack::InternalSwap(Robot_Config_Ack* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &lgsip_, lhs_arena,
      &other->lgsip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Robot_Config_Ack, lgsport_)
      + sizeof(Robot_Config_Ack::lgsport_)
      - PROTOBUF_FIELD_OFFSET(Robot_Config_Ack, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Robot_Config_Ack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5ftest_5finternal_2eproto_getter, &descriptor_table_robot_5ftest_5finternal_2eproto_once,
      file_level_metadata_robot_5ftest_5finternal_2eproto[1]);
}

// ===================================================================

class Robot_Start_Ack::_Internal {
 public:
};

Robot_Start_Ack::Robot_Start_Ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  behavior_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Robot_Start_Ack)
}
Robot_Start_Ack::Robot_Start_Ack(const Robot_Start_Ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      behavior_(from.behavior_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&logininterval_, &from.logininterval_,
    static_cast<size_t>(reinterpret_cast<char*>(&startusernum_) -
    reinterpret_cast<char*>(&logininterval_)) + sizeof(startusernum_));
  // @@protoc_insertion_point(copy_constructor:PRO.Robot_Start_Ack)
}

inline void Robot_Start_Ack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&logininterval_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&startusernum_) -
    reinterpret_cast<char*>(&logininterval_)) + sizeof(startusernum_));
}

Robot_Start_Ack::~Robot_Start_Ack() {
  // @@protoc_insertion_point(destructor:PRO.Robot_Start_Ack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Robot_Start_Ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Robot_Start_Ack::ArenaDtor(void* object) {
  Robot_Start_Ack* _this = reinterpret_cast< Robot_Start_Ack* >(object);
  (void)_this;
}
void Robot_Start_Ack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Robot_Start_Ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Robot_Start_Ack::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Robot_Start_Ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  behavior_.Clear();
  ::memset(&logininterval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&startusernum_) -
      reinterpret_cast<char*>(&logininterval_)) + sizeof(startusernum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Robot_Start_Ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 startusernum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          startusernum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 logininterval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          logininterval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string behavior = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_behavior();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.Robot_Start_Ack.behavior"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Robot_Start_Ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Robot_Start_Ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 startusernum = 1;
  if (this->_internal_startusernum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_startusernum(), target);
  }

  // int64 logininterval = 2;
  if (this->_internal_logininterval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_logininterval(), target);
  }

  // repeated string behavior = 3;
  for (int i = 0, n = this->_internal_behavior_size(); i < n; i++) {
    const auto& s = this->_internal_behavior(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.Robot_Start_Ack.behavior");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Robot_Start_Ack)
  return target;
}

size_t Robot_Start_Ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Robot_Start_Ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string behavior = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(behavior_.size());
  for (int i = 0, n = behavior_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      behavior_.Get(i));
  }

  // int64 logininterval = 2;
  if (this->_internal_logininterval() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_logininterval());
  }

  // int32 startusernum = 1;
  if (this->_internal_startusernum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_startusernum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Robot_Start_Ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Robot_Start_Ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Robot_Start_Ack::GetClassData() const { return &_class_data_; }

void Robot_Start_Ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Robot_Start_Ack *>(to)->MergeFrom(
      static_cast<const Robot_Start_Ack &>(from));
}


void Robot_Start_Ack::MergeFrom(const Robot_Start_Ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Robot_Start_Ack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  behavior_.MergeFrom(from.behavior_);
  if (from._internal_logininterval() != 0) {
    _internal_set_logininterval(from._internal_logininterval());
  }
  if (from._internal_startusernum() != 0) {
    _internal_set_startusernum(from._internal_startusernum());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Robot_Start_Ack::CopyFrom(const Robot_Start_Ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Robot_Start_Ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot_Start_Ack::IsInitialized() const {
  return true;
}

void Robot_Start_Ack::InternalSwap(Robot_Start_Ack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  behavior_.InternalSwap(&other->behavior_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Robot_Start_Ack, startusernum_)
      + sizeof(Robot_Start_Ack::startusernum_)
      - PROTOBUF_FIELD_OFFSET(Robot_Start_Ack, logininterval_)>(
          reinterpret_cast<char*>(&logininterval_),
          reinterpret_cast<char*>(&other->logininterval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Robot_Start_Ack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5ftest_5finternal_2eproto_getter, &descriptor_table_robot_5ftest_5finternal_2eproto_once,
      file_level_metadata_robot_5ftest_5finternal_2eproto[2]);
}

// ===================================================================

class Robot_Stop_Ack::_Internal {
 public:
};

Robot_Stop_Ack::Robot_Stop_Ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:PRO.Robot_Stop_Ack)
}
Robot_Stop_Ack::Robot_Stop_Ack(const Robot_Stop_Ack& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PRO.Robot_Stop_Ack)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Robot_Stop_Ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Robot_Stop_Ack::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Robot_Stop_Ack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5ftest_5finternal_2eproto_getter, &descriptor_table_robot_5ftest_5finternal_2eproto_once,
      file_level_metadata_robot_5ftest_5finternal_2eproto[3]);
}

// ===================================================================

class Robot_State_Rpt_ActionGroup::_Internal {
 public:
};

Robot_State_Rpt_ActionGroup::Robot_State_Rpt_ActionGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Robot_State_Rpt.ActionGroup)
}
Robot_State_Rpt_ActionGroup::Robot_State_Rpt_ActionGroup(const Robot_State_Rpt_ActionGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&actions_, &from.actions_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeinterval_) -
    reinterpret_cast<char*>(&actions_)) + sizeof(timeinterval_));
  // @@protoc_insertion_point(copy_constructor:PRO.Robot_State_Rpt.ActionGroup)
}

inline void Robot_State_Rpt_ActionGroup::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&actions_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timeinterval_) -
    reinterpret_cast<char*>(&actions_)) + sizeof(timeinterval_));
}

Robot_State_Rpt_ActionGroup::~Robot_State_Rpt_ActionGroup() {
  // @@protoc_insertion_point(destructor:PRO.Robot_State_Rpt.ActionGroup)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Robot_State_Rpt_ActionGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Robot_State_Rpt_ActionGroup::ArenaDtor(void* object) {
  Robot_State_Rpt_ActionGroup* _this = reinterpret_cast< Robot_State_Rpt_ActionGroup* >(object);
  (void)_this;
}
void Robot_State_Rpt_ActionGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Robot_State_Rpt_ActionGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Robot_State_Rpt_ActionGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Robot_State_Rpt.ActionGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&actions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeinterval_) -
      reinterpret_cast<char*>(&actions_)) + sizeof(timeinterval_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Robot_State_Rpt_ActionGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 actions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          actions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 succeeds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          succeeds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 faileds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          faileds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timeouts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          timeouts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timeinterval = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          timeinterval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Robot_State_Rpt_ActionGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Robot_State_Rpt.ActionGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 actions = 1;
  if (this->_internal_actions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_actions(), target);
  }

  // int64 succeeds = 2;
  if (this->_internal_succeeds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_succeeds(), target);
  }

  // int64 faileds = 3;
  if (this->_internal_faileds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_faileds(), target);
  }

  // int64 timeouts = 4;
  if (this->_internal_timeouts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_timeouts(), target);
  }

  // int64 timeinterval = 5;
  if (this->_internal_timeinterval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_timeinterval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Robot_State_Rpt.ActionGroup)
  return target;
}

size_t Robot_State_Rpt_ActionGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Robot_State_Rpt.ActionGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 actions = 1;
  if (this->_internal_actions() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_actions());
  }

  // int64 succeeds = 2;
  if (this->_internal_succeeds() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_succeeds());
  }

  // int64 faileds = 3;
  if (this->_internal_faileds() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_faileds());
  }

  // int64 timeouts = 4;
  if (this->_internal_timeouts() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timeouts());
  }

  // int64 timeinterval = 5;
  if (this->_internal_timeinterval() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timeinterval());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Robot_State_Rpt_ActionGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Robot_State_Rpt_ActionGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Robot_State_Rpt_ActionGroup::GetClassData() const { return &_class_data_; }

void Robot_State_Rpt_ActionGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Robot_State_Rpt_ActionGroup *>(to)->MergeFrom(
      static_cast<const Robot_State_Rpt_ActionGroup &>(from));
}


void Robot_State_Rpt_ActionGroup::MergeFrom(const Robot_State_Rpt_ActionGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Robot_State_Rpt.ActionGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_actions() != 0) {
    _internal_set_actions(from._internal_actions());
  }
  if (from._internal_succeeds() != 0) {
    _internal_set_succeeds(from._internal_succeeds());
  }
  if (from._internal_faileds() != 0) {
    _internal_set_faileds(from._internal_faileds());
  }
  if (from._internal_timeouts() != 0) {
    _internal_set_timeouts(from._internal_timeouts());
  }
  if (from._internal_timeinterval() != 0) {
    _internal_set_timeinterval(from._internal_timeinterval());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Robot_State_Rpt_ActionGroup::CopyFrom(const Robot_State_Rpt_ActionGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Robot_State_Rpt.ActionGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot_State_Rpt_ActionGroup::IsInitialized() const {
  return true;
}

void Robot_State_Rpt_ActionGroup::InternalSwap(Robot_State_Rpt_ActionGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Robot_State_Rpt_ActionGroup, timeinterval_)
      + sizeof(Robot_State_Rpt_ActionGroup::timeinterval_)
      - PROTOBUF_FIELD_OFFSET(Robot_State_Rpt_ActionGroup, actions_)>(
          reinterpret_cast<char*>(&actions_),
          reinterpret_cast<char*>(&other->actions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Robot_State_Rpt_ActionGroup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5ftest_5finternal_2eproto_getter, &descriptor_table_robot_5ftest_5finternal_2eproto_once,
      file_level_metadata_robot_5ftest_5finternal_2eproto[4]);
}

// ===================================================================

class Robot_State_Rpt_StateData::_Internal {
 public:
  static const ::PRO::Robot_State_Rpt_ActionGroup& logon(const Robot_State_Rpt_StateData* msg);
  static const ::PRO::Robot_State_Rpt_ActionGroup& getrole(const Robot_State_Rpt_StateData* msg);
  static const ::PRO::Robot_State_Rpt_ActionGroup& selrole(const Robot_State_Rpt_StateData* msg);
  static const ::PRO::Robot_State_Rpt_ActionGroup& getchannel(const Robot_State_Rpt_StateData* msg);
  static const ::PRO::Robot_State_Rpt_ActionGroup& selchannel(const Robot_State_Rpt_StateData* msg);
  static const ::PRO::Robot_State_Rpt_ActionGroup& getroom(const Robot_State_Rpt_StateData* msg);
  static const ::PRO::Robot_State_Rpt_ActionGroup& loginroom(const Robot_State_Rpt_StateData* msg);
  static const ::PRO::Robot_State_Rpt_ActionGroup& logoutroom(const Robot_State_Rpt_StateData* msg);
  static const ::PRO::Robot_State_Rpt_ActionGroup& logoutchannel(const Robot_State_Rpt_StateData* msg);
  static const ::PRO::Robot_State_Rpt_ActionGroup& logout(const Robot_State_Rpt_StateData* msg);
};

const ::PRO::Robot_State_Rpt_ActionGroup&
Robot_State_Rpt_StateData::_Internal::logon(const Robot_State_Rpt_StateData* msg) {
  return *msg->logon_;
}
const ::PRO::Robot_State_Rpt_ActionGroup&
Robot_State_Rpt_StateData::_Internal::getrole(const Robot_State_Rpt_StateData* msg) {
  return *msg->getrole_;
}
const ::PRO::Robot_State_Rpt_ActionGroup&
Robot_State_Rpt_StateData::_Internal::selrole(const Robot_State_Rpt_StateData* msg) {
  return *msg->selrole_;
}
const ::PRO::Robot_State_Rpt_ActionGroup&
Robot_State_Rpt_StateData::_Internal::getchannel(const Robot_State_Rpt_StateData* msg) {
  return *msg->getchannel_;
}
const ::PRO::Robot_State_Rpt_ActionGroup&
Robot_State_Rpt_StateData::_Internal::selchannel(const Robot_State_Rpt_StateData* msg) {
  return *msg->selchannel_;
}
const ::PRO::Robot_State_Rpt_ActionGroup&
Robot_State_Rpt_StateData::_Internal::getroom(const Robot_State_Rpt_StateData* msg) {
  return *msg->getroom_;
}
const ::PRO::Robot_State_Rpt_ActionGroup&
Robot_State_Rpt_StateData::_Internal::loginroom(const Robot_State_Rpt_StateData* msg) {
  return *msg->loginroom_;
}
const ::PRO::Robot_State_Rpt_ActionGroup&
Robot_State_Rpt_StateData::_Internal::logoutroom(const Robot_State_Rpt_StateData* msg) {
  return *msg->logoutroom_;
}
const ::PRO::Robot_State_Rpt_ActionGroup&
Robot_State_Rpt_StateData::_Internal::logoutchannel(const Robot_State_Rpt_StateData* msg) {
  return *msg->logoutchannel_;
}
const ::PRO::Robot_State_Rpt_ActionGroup&
Robot_State_Rpt_StateData::_Internal::logout(const Robot_State_Rpt_StateData* msg) {
  return *msg->logout_;
}
Robot_State_Rpt_StateData::Robot_State_Rpt_StateData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Robot_State_Rpt.StateData)
}
Robot_State_Rpt_StateData::Robot_State_Rpt_StateData(const Robot_State_Rpt_StateData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_logon()) {
    logon_ = new ::PRO::Robot_State_Rpt_ActionGroup(*from.logon_);
  } else {
    logon_ = nullptr;
  }
  if (from._internal_has_getrole()) {
    getrole_ = new ::PRO::Robot_State_Rpt_ActionGroup(*from.getrole_);
  } else {
    getrole_ = nullptr;
  }
  if (from._internal_has_selrole()) {
    selrole_ = new ::PRO::Robot_State_Rpt_ActionGroup(*from.selrole_);
  } else {
    selrole_ = nullptr;
  }
  if (from._internal_has_getchannel()) {
    getchannel_ = new ::PRO::Robot_State_Rpt_ActionGroup(*from.getchannel_);
  } else {
    getchannel_ = nullptr;
  }
  if (from._internal_has_selchannel()) {
    selchannel_ = new ::PRO::Robot_State_Rpt_ActionGroup(*from.selchannel_);
  } else {
    selchannel_ = nullptr;
  }
  if (from._internal_has_getroom()) {
    getroom_ = new ::PRO::Robot_State_Rpt_ActionGroup(*from.getroom_);
  } else {
    getroom_ = nullptr;
  }
  if (from._internal_has_loginroom()) {
    loginroom_ = new ::PRO::Robot_State_Rpt_ActionGroup(*from.loginroom_);
  } else {
    loginroom_ = nullptr;
  }
  if (from._internal_has_logoutroom()) {
    logoutroom_ = new ::PRO::Robot_State_Rpt_ActionGroup(*from.logoutroom_);
  } else {
    logoutroom_ = nullptr;
  }
  if (from._internal_has_logoutchannel()) {
    logoutchannel_ = new ::PRO::Robot_State_Rpt_ActionGroup(*from.logoutchannel_);
  } else {
    logoutchannel_ = nullptr;
  }
  if (from._internal_has_logout()) {
    logout_ = new ::PRO::Robot_State_Rpt_ActionGroup(*from.logout_);
  } else {
    logout_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PRO.Robot_State_Rpt.StateData)
}

inline void Robot_State_Rpt_StateData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&logon_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&logout_) -
    reinterpret_cast<char*>(&logon_)) + sizeof(logout_));
}

Robot_State_Rpt_StateData::~Robot_State_Rpt_StateData() {
  // @@protoc_insertion_point(destructor:PRO.Robot_State_Rpt.StateData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Robot_State_Rpt_StateData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete logon_;
  if (this != internal_default_instance()) delete getrole_;
  if (this != internal_default_instance()) delete selrole_;
  if (this != internal_default_instance()) delete getchannel_;
  if (this != internal_default_instance()) delete selchannel_;
  if (this != internal_default_instance()) delete getroom_;
  if (this != internal_default_instance()) delete loginroom_;
  if (this != internal_default_instance()) delete logoutroom_;
  if (this != internal_default_instance()) delete logoutchannel_;
  if (this != internal_default_instance()) delete logout_;
}

void Robot_State_Rpt_StateData::ArenaDtor(void* object) {
  Robot_State_Rpt_StateData* _this = reinterpret_cast< Robot_State_Rpt_StateData* >(object);
  (void)_this;
}
void Robot_State_Rpt_StateData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Robot_State_Rpt_StateData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Robot_State_Rpt_StateData::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Robot_State_Rpt.StateData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && logon_ != nullptr) {
    delete logon_;
  }
  logon_ = nullptr;
  if (GetArenaForAllocation() == nullptr && getrole_ != nullptr) {
    delete getrole_;
  }
  getrole_ = nullptr;
  if (GetArenaForAllocation() == nullptr && selrole_ != nullptr) {
    delete selrole_;
  }
  selrole_ = nullptr;
  if (GetArenaForAllocation() == nullptr && getchannel_ != nullptr) {
    delete getchannel_;
  }
  getchannel_ = nullptr;
  if (GetArenaForAllocation() == nullptr && selchannel_ != nullptr) {
    delete selchannel_;
  }
  selchannel_ = nullptr;
  if (GetArenaForAllocation() == nullptr && getroom_ != nullptr) {
    delete getroom_;
  }
  getroom_ = nullptr;
  if (GetArenaForAllocation() == nullptr && loginroom_ != nullptr) {
    delete loginroom_;
  }
  loginroom_ = nullptr;
  if (GetArenaForAllocation() == nullptr && logoutroom_ != nullptr) {
    delete logoutroom_;
  }
  logoutroom_ = nullptr;
  if (GetArenaForAllocation() == nullptr && logoutchannel_ != nullptr) {
    delete logoutchannel_;
  }
  logoutchannel_ = nullptr;
  if (GetArenaForAllocation() == nullptr && logout_ != nullptr) {
    delete logout_;
  }
  logout_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Robot_State_Rpt_StateData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PRO.Robot_State_Rpt.ActionGroup logon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_logon(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PRO.Robot_State_Rpt.ActionGroup getrole = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_getrole(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PRO.Robot_State_Rpt.ActionGroup selrole = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_selrole(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PRO.Robot_State_Rpt.ActionGroup getchannel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_getchannel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PRO.Robot_State_Rpt.ActionGroup selchannel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_selchannel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PRO.Robot_State_Rpt.ActionGroup getroom = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_getroom(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PRO.Robot_State_Rpt.ActionGroup loginroom = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_loginroom(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PRO.Robot_State_Rpt.ActionGroup logoutroom = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_logoutroom(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PRO.Robot_State_Rpt.ActionGroup logoutchannel = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_logoutchannel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PRO.Robot_State_Rpt.ActionGroup logout = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_logout(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Robot_State_Rpt_StateData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Robot_State_Rpt.StateData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PRO.Robot_State_Rpt.ActionGroup logon = 1;
  if (this->_internal_has_logon()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::logon(this), target, stream);
  }

  // .PRO.Robot_State_Rpt.ActionGroup getrole = 2;
  if (this->_internal_has_getrole()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::getrole(this), target, stream);
  }

  // .PRO.Robot_State_Rpt.ActionGroup selrole = 3;
  if (this->_internal_has_selrole()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::selrole(this), target, stream);
  }

  // .PRO.Robot_State_Rpt.ActionGroup getchannel = 4;
  if (this->_internal_has_getchannel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::getchannel(this), target, stream);
  }

  // .PRO.Robot_State_Rpt.ActionGroup selchannel = 5;
  if (this->_internal_has_selchannel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::selchannel(this), target, stream);
  }

  // .PRO.Robot_State_Rpt.ActionGroup getroom = 6;
  if (this->_internal_has_getroom()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::getroom(this), target, stream);
  }

  // .PRO.Robot_State_Rpt.ActionGroup loginroom = 7;
  if (this->_internal_has_loginroom()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::loginroom(this), target, stream);
  }

  // .PRO.Robot_State_Rpt.ActionGroup logoutroom = 8;
  if (this->_internal_has_logoutroom()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::logoutroom(this), target, stream);
  }

  // .PRO.Robot_State_Rpt.ActionGroup logoutchannel = 9;
  if (this->_internal_has_logoutchannel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::logoutchannel(this), target, stream);
  }

  // .PRO.Robot_State_Rpt.ActionGroup logout = 10;
  if (this->_internal_has_logout()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::logout(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Robot_State_Rpt.StateData)
  return target;
}

size_t Robot_State_Rpt_StateData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Robot_State_Rpt.StateData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PRO.Robot_State_Rpt.ActionGroup logon = 1;
  if (this->_internal_has_logon()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logon_);
  }

  // .PRO.Robot_State_Rpt.ActionGroup getrole = 2;
  if (this->_internal_has_getrole()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *getrole_);
  }

  // .PRO.Robot_State_Rpt.ActionGroup selrole = 3;
  if (this->_internal_has_selrole()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selrole_);
  }

  // .PRO.Robot_State_Rpt.ActionGroup getchannel = 4;
  if (this->_internal_has_getchannel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *getchannel_);
  }

  // .PRO.Robot_State_Rpt.ActionGroup selchannel = 5;
  if (this->_internal_has_selchannel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selchannel_);
  }

  // .PRO.Robot_State_Rpt.ActionGroup getroom = 6;
  if (this->_internal_has_getroom()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *getroom_);
  }

  // .PRO.Robot_State_Rpt.ActionGroup loginroom = 7;
  if (this->_internal_has_loginroom()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *loginroom_);
  }

  // .PRO.Robot_State_Rpt.ActionGroup logoutroom = 8;
  if (this->_internal_has_logoutroom()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logoutroom_);
  }

  // .PRO.Robot_State_Rpt.ActionGroup logoutchannel = 9;
  if (this->_internal_has_logoutchannel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logoutchannel_);
  }

  // .PRO.Robot_State_Rpt.ActionGroup logout = 10;
  if (this->_internal_has_logout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logout_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Robot_State_Rpt_StateData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Robot_State_Rpt_StateData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Robot_State_Rpt_StateData::GetClassData() const { return &_class_data_; }

void Robot_State_Rpt_StateData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Robot_State_Rpt_StateData *>(to)->MergeFrom(
      static_cast<const Robot_State_Rpt_StateData &>(from));
}


void Robot_State_Rpt_StateData::MergeFrom(const Robot_State_Rpt_StateData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Robot_State_Rpt.StateData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_logon()) {
    _internal_mutable_logon()->::PRO::Robot_State_Rpt_ActionGroup::MergeFrom(from._internal_logon());
  }
  if (from._internal_has_getrole()) {
    _internal_mutable_getrole()->::PRO::Robot_State_Rpt_ActionGroup::MergeFrom(from._internal_getrole());
  }
  if (from._internal_has_selrole()) {
    _internal_mutable_selrole()->::PRO::Robot_State_Rpt_ActionGroup::MergeFrom(from._internal_selrole());
  }
  if (from._internal_has_getchannel()) {
    _internal_mutable_getchannel()->::PRO::Robot_State_Rpt_ActionGroup::MergeFrom(from._internal_getchannel());
  }
  if (from._internal_has_selchannel()) {
    _internal_mutable_selchannel()->::PRO::Robot_State_Rpt_ActionGroup::MergeFrom(from._internal_selchannel());
  }
  if (from._internal_has_getroom()) {
    _internal_mutable_getroom()->::PRO::Robot_State_Rpt_ActionGroup::MergeFrom(from._internal_getroom());
  }
  if (from._internal_has_loginroom()) {
    _internal_mutable_loginroom()->::PRO::Robot_State_Rpt_ActionGroup::MergeFrom(from._internal_loginroom());
  }
  if (from._internal_has_logoutroom()) {
    _internal_mutable_logoutroom()->::PRO::Robot_State_Rpt_ActionGroup::MergeFrom(from._internal_logoutroom());
  }
  if (from._internal_has_logoutchannel()) {
    _internal_mutable_logoutchannel()->::PRO::Robot_State_Rpt_ActionGroup::MergeFrom(from._internal_logoutchannel());
  }
  if (from._internal_has_logout()) {
    _internal_mutable_logout()->::PRO::Robot_State_Rpt_ActionGroup::MergeFrom(from._internal_logout());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Robot_State_Rpt_StateData::CopyFrom(const Robot_State_Rpt_StateData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Robot_State_Rpt.StateData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot_State_Rpt_StateData::IsInitialized() const {
  return true;
}

void Robot_State_Rpt_StateData::InternalSwap(Robot_State_Rpt_StateData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Robot_State_Rpt_StateData, logout_)
      + sizeof(Robot_State_Rpt_StateData::logout_)
      - PROTOBUF_FIELD_OFFSET(Robot_State_Rpt_StateData, logon_)>(
          reinterpret_cast<char*>(&logon_),
          reinterpret_cast<char*>(&other->logon_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Robot_State_Rpt_StateData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5ftest_5finternal_2eproto_getter, &descriptor_table_robot_5ftest_5finternal_2eproto_once,
      file_level_metadata_robot_5ftest_5finternal_2eproto[5]);
}

// ===================================================================

class Robot_State_Rpt::_Internal {
 public:
};

Robot_State_Rpt::Robot_State_Rpt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stat_data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Robot_State_Rpt)
}
Robot_State_Rpt::Robot_State_Rpt(const Robot_State_Rpt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stat_data_(from.stat_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  robotid_ = from.robotid_;
  // @@protoc_insertion_point(copy_constructor:PRO.Robot_State_Rpt)
}

inline void Robot_State_Rpt::SharedCtor() {
robotid_ = int64_t{0};
}

Robot_State_Rpt::~Robot_State_Rpt() {
  // @@protoc_insertion_point(destructor:PRO.Robot_State_Rpt)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Robot_State_Rpt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Robot_State_Rpt::ArenaDtor(void* object) {
  Robot_State_Rpt* _this = reinterpret_cast< Robot_State_Rpt* >(object);
  (void)_this;
}
void Robot_State_Rpt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Robot_State_Rpt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Robot_State_Rpt::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Robot_State_Rpt)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stat_data_.Clear();
  robotid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Robot_State_Rpt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 robotid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          robotid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PRO.Robot_State_Rpt.StateData stat_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stat_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Robot_State_Rpt::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Robot_State_Rpt)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 robotid = 1;
  if (this->_internal_robotid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_robotid(), target);
  }

  // repeated .PRO.Robot_State_Rpt.StateData stat_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stat_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stat_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Robot_State_Rpt)
  return target;
}

size_t Robot_State_Rpt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Robot_State_Rpt)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PRO.Robot_State_Rpt.StateData stat_data = 2;
  total_size += 1UL * this->_internal_stat_data_size();
  for (const auto& msg : this->stat_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 robotid = 1;
  if (this->_internal_robotid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_robotid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Robot_State_Rpt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Robot_State_Rpt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Robot_State_Rpt::GetClassData() const { return &_class_data_; }

void Robot_State_Rpt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Robot_State_Rpt *>(to)->MergeFrom(
      static_cast<const Robot_State_Rpt &>(from));
}


void Robot_State_Rpt::MergeFrom(const Robot_State_Rpt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Robot_State_Rpt)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  stat_data_.MergeFrom(from.stat_data_);
  if (from._internal_robotid() != 0) {
    _internal_set_robotid(from._internal_robotid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Robot_State_Rpt::CopyFrom(const Robot_State_Rpt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Robot_State_Rpt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot_State_Rpt::IsInitialized() const {
  return true;
}

void Robot_State_Rpt::InternalSwap(Robot_State_Rpt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  stat_data_.InternalSwap(&other->stat_data_);
  swap(robotid_, other->robotid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Robot_State_Rpt::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5ftest_5finternal_2eproto_getter, &descriptor_table_robot_5ftest_5finternal_2eproto_once,
      file_level_metadata_robot_5ftest_5finternal_2eproto[6]);
}

// ===================================================================

class Robot_State_Ack::_Internal {
 public:
};

Robot_State_Ack::Robot_State_Ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Robot_State_Ack)
}
Robot_State_Ack::Robot_State_Ack(const Robot_State_Ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:PRO.Robot_State_Ack)
}

inline void Robot_State_Ack::SharedCtor() {
userid_ = int64_t{0};
}

Robot_State_Ack::~Robot_State_Ack() {
  // @@protoc_insertion_point(destructor:PRO.Robot_State_Ack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Robot_State_Ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Robot_State_Ack::ArenaDtor(void* object) {
  Robot_State_Ack* _this = reinterpret_cast< Robot_State_Ack* >(object);
  (void)_this;
}
void Robot_State_Ack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Robot_State_Ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Robot_State_Ack::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Robot_State_Ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Robot_State_Ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Robot_State_Ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Robot_State_Ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 userid = 1;
  if (this->_internal_userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Robot_State_Ack)
  return target;
}

size_t Robot_State_Ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Robot_State_Ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 userid = 1;
  if (this->_internal_userid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_userid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Robot_State_Ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Robot_State_Ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Robot_State_Ack::GetClassData() const { return &_class_data_; }

void Robot_State_Ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Robot_State_Ack *>(to)->MergeFrom(
      static_cast<const Robot_State_Ack &>(from));
}


void Robot_State_Ack::MergeFrom(const Robot_State_Ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Robot_State_Ack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Robot_State_Ack::CopyFrom(const Robot_State_Ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Robot_State_Ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot_State_Ack::IsInitialized() const {
  return true;
}

void Robot_State_Ack::InternalSwap(Robot_State_Ack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Robot_State_Ack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5ftest_5finternal_2eproto_getter, &descriptor_table_robot_5ftest_5finternal_2eproto_once,
      file_level_metadata_robot_5ftest_5finternal_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace PRO
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PRO::Robot_Config_Req* Arena::CreateMaybeMessage< ::PRO::Robot_Config_Req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Robot_Config_Req >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Robot_Config_Ack* Arena::CreateMaybeMessage< ::PRO::Robot_Config_Ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Robot_Config_Ack >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Robot_Start_Ack* Arena::CreateMaybeMessage< ::PRO::Robot_Start_Ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Robot_Start_Ack >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Robot_Stop_Ack* Arena::CreateMaybeMessage< ::PRO::Robot_Stop_Ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Robot_Stop_Ack >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Robot_State_Rpt_ActionGroup* Arena::CreateMaybeMessage< ::PRO::Robot_State_Rpt_ActionGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Robot_State_Rpt_ActionGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Robot_State_Rpt_StateData* Arena::CreateMaybeMessage< ::PRO::Robot_State_Rpt_StateData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Robot_State_Rpt_StateData >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Robot_State_Rpt* Arena::CreateMaybeMessage< ::PRO::Robot_State_Rpt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Robot_State_Rpt >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Robot_State_Ack* Arena::CreateMaybeMessage< ::PRO::Robot_State_Ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Robot_State_Ack >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

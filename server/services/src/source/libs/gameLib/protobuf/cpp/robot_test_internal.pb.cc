// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot_test_internal.proto

#include "robot_test_internal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace PRO {
constexpr Robot_Config_Req::Robot_Config_Req(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : robotname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , robotpwd_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(0){}
struct Robot_Config_ReqDefaultTypeInternal {
  constexpr Robot_Config_ReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Robot_Config_ReqDefaultTypeInternal() {}
  union {
    Robot_Config_Req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Robot_Config_ReqDefaultTypeInternal _Robot_Config_Req_default_instance_;
constexpr Robot_Config_Ack::Robot_Config_Ack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : urladdr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , openprefix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dbuser_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dbpwd_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dbname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dbip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(0)
  , result_(0)
  , robotid_(0)
  , users_(0)
  , startuserid_(int64_t{0}){}
struct Robot_Config_AckDefaultTypeInternal {
  constexpr Robot_Config_AckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Robot_Config_AckDefaultTypeInternal() {}
  union {
    Robot_Config_Ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Robot_Config_AckDefaultTypeInternal _Robot_Config_Ack_default_instance_;
constexpr Robot_Start_Ack::Robot_Start_Ack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : behavior_()
  , logininterval_(int64_t{0})
  , startusernum_(0){}
struct Robot_Start_AckDefaultTypeInternal {
  constexpr Robot_Start_AckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Robot_Start_AckDefaultTypeInternal() {}
  union {
    Robot_Start_Ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Robot_Start_AckDefaultTypeInternal _Robot_Start_Ack_default_instance_;
constexpr Robot_Stop_Ack::Robot_Stop_Ack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Robot_Stop_AckDefaultTypeInternal {
  constexpr Robot_Stop_AckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Robot_Stop_AckDefaultTypeInternal() {}
  union {
    Robot_Stop_Ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Robot_Stop_AckDefaultTypeInternal _Robot_Stop_Ack_default_instance_;
constexpr Robot_Record_req::Robot_Record_req(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : robotid_(0)
  , logs_(0){}
struct Robot_Record_reqDefaultTypeInternal {
  constexpr Robot_Record_reqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Robot_Record_reqDefaultTypeInternal() {}
  union {
    Robot_Record_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Robot_Record_reqDefaultTypeInternal _Robot_Record_req_default_instance_;
constexpr Robot_StartRecord_req::Robot_StartRecord_req(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : robotid_(0){}
struct Robot_StartRecord_reqDefaultTypeInternal {
  constexpr Robot_StartRecord_reqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Robot_StartRecord_reqDefaultTypeInternal() {}
  union {
    Robot_StartRecord_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Robot_StartRecord_reqDefaultTypeInternal _Robot_StartRecord_req_default_instance_;
constexpr Robot_EndRecord_req::Robot_EndRecord_req(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : robotid_(0)
  , logs_(0){}
struct Robot_EndRecord_reqDefaultTypeInternal {
  constexpr Robot_EndRecord_reqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Robot_EndRecord_reqDefaultTypeInternal() {}
  union {
    Robot_EndRecord_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Robot_EndRecord_reqDefaultTypeInternal _Robot_EndRecord_req_default_instance_;
constexpr Robot_UploadLogs_ntf::Robot_UploadLogs_ntf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Robot_UploadLogs_ntfDefaultTypeInternal {
  constexpr Robot_UploadLogs_ntfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Robot_UploadLogs_ntfDefaultTypeInternal() {}
  union {
    Robot_UploadLogs_ntf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Robot_UploadLogs_ntfDefaultTypeInternal _Robot_UploadLogs_ntf_default_instance_;
constexpr Robot_ClearLogs_ntf::Robot_ClearLogs_ntf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Robot_ClearLogs_ntfDefaultTypeInternal {
  constexpr Robot_ClearLogs_ntfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Robot_ClearLogs_ntfDefaultTypeInternal() {}
  union {
    Robot_ClearLogs_ntf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Robot_ClearLogs_ntfDefaultTypeInternal _Robot_ClearLogs_ntf_default_instance_;
constexpr Robot_UserPrefixChg_ntf::Robot_UserPrefixChg_ntf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : prefix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct Robot_UserPrefixChg_ntfDefaultTypeInternal {
  constexpr Robot_UserPrefixChg_ntfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Robot_UserPrefixChg_ntfDefaultTypeInternal() {}
  union {
    Robot_UserPrefixChg_ntf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Robot_UserPrefixChg_ntfDefaultTypeInternal _Robot_UserPrefixChg_ntf_default_instance_;
}  // namespace PRO
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_robot_5ftest_5finternal_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_robot_5ftest_5finternal_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_robot_5ftest_5finternal_2eproto = nullptr;

const uint32_t TableStruct_robot_5ftest_5finternal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Config_Req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Config_Req, version_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Config_Req, robotname_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Config_Req, robotpwd_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Config_Ack, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Config_Ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Config_Ack, version_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Config_Ack, result_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Config_Ack, robotid_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Config_Ack, urladdr_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Config_Ack, openprefix_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Config_Ack, startuserid_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Config_Ack, users_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Config_Ack, dbuser_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Config_Ack, dbpwd_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Config_Ack, dbname_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Config_Ack, dbip_),
  ~0u,
  ~0u,
  6,
  0,
  1,
  8,
  7,
  2,
  3,
  4,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Start_Ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Start_Ack, startusernum_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Start_Ack, logininterval_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Start_Ack, behavior_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Stop_Ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Record_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Record_req, robotid_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_Record_req, logs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_StartRecord_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_StartRecord_req, robotid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_EndRecord_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_EndRecord_req, robotid_),
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_EndRecord_req, logs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_UploadLogs_ntf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_ClearLogs_ntf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_UserPrefixChg_ntf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Robot_UserPrefixChg_ntf, prefix_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::PRO::Robot_Config_Req)},
  { 9, 26, -1, sizeof(::PRO::Robot_Config_Ack)},
  { 37, -1, -1, sizeof(::PRO::Robot_Start_Ack)},
  { 46, -1, -1, sizeof(::PRO::Robot_Stop_Ack)},
  { 52, -1, -1, sizeof(::PRO::Robot_Record_req)},
  { 60, -1, -1, sizeof(::PRO::Robot_StartRecord_req)},
  { 67, -1, -1, sizeof(::PRO::Robot_EndRecord_req)},
  { 75, -1, -1, sizeof(::PRO::Robot_UploadLogs_ntf)},
  { 81, -1, -1, sizeof(::PRO::Robot_ClearLogs_ntf)},
  { 87, -1, -1, sizeof(::PRO::Robot_UserPrefixChg_ntf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Robot_Config_Req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Robot_Config_Ack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Robot_Start_Ack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Robot_Stop_Ack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Robot_Record_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Robot_StartRecord_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Robot_EndRecord_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Robot_UploadLogs_ntf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Robot_ClearLogs_ntf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Robot_UserPrefixChg_ntf_default_instance_),
};

const char descriptor_table_protodef_robot_5ftest_5finternal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031robot_test_internal.proto\022\003PRO\"H\n\020Robo"
  "t_Config_Req\022\017\n\007version\030\001 \001(\005\022\021\n\trobotna"
  "me\030\002 \001(\t\022\020\n\010robotpwd\030\003 \001(\t\"\341\002\n\020Robot_Con"
  "fig_Ack\022\017\n\007version\030\001 \001(\005\022\016\n\006result\030\002 \001(\005"
  "\022\024\n\007robotid\030\003 \001(\005H\000\210\001\001\022\024\n\007urladdr\030\004 \001(\tH"
  "\001\210\001\001\022\027\n\nopenprefix\030\005 \001(\tH\002\210\001\001\022\030\n\013startus"
  "erid\030\007 \001(\003H\003\210\001\001\022\022\n\005users\030\010 \001(\005H\004\210\001\001\022\023\n\006d"
  "buser\030\n \001(\tH\005\210\001\001\022\022\n\005dbpwd\030\013 \001(\tH\006\210\001\001\022\023\n\006"
  "dbname\030\014 \001(\tH\007\210\001\001\022\021\n\004dbip\030\r \001(\tH\010\210\001\001B\n\n\010"
  "_robotidB\n\n\010_urladdrB\r\n\013_openprefixB\016\n\014_"
  "startuseridB\010\n\006_usersB\t\n\007_dbuserB\010\n\006_dbp"
  "wdB\t\n\007_dbnameB\007\n\005_dbip\"P\n\017Robot_Start_Ac"
  "k\022\024\n\014startusernum\030\001 \001(\005\022\025\n\rlogininterval"
  "\030\002 \001(\003\022\020\n\010behavior\030\003 \003(\t\"\020\n\016Robot_Stop_A"
  "ck\"1\n\020Robot_Record_req\022\017\n\007robotid\030\001 \001(\005\022"
  "\014\n\004logs\030\002 \001(\005\"(\n\025Robot_StartRecord_req\022\017"
  "\n\007robotid\030\001 \001(\005\"4\n\023Robot_EndRecord_req\022\017"
  "\n\007robotid\030\001 \001(\005\022\014\n\004logs\030\002 \001(\005\"\026\n\024Robot_U"
  "ploadLogs_ntf\"\025\n\023Robot_ClearLogs_ntf\")\n\027"
  "Robot_UserPrefixChg_ntf\022\016\n\006prefix\030\001 \001(\t*"
  ";\n\013ROBOT_CONST\022\031\n\025ROBOT_CONST_UNIVERSAL\020"
  "\000\022\021\n\rROBOT_VERSION\020\001BT\n\033com.cms.client.n"
  "etwork.gproP\001Z\025gamelib/protobuf/gpro\252\002\033c"
  "om.cms.client.network.gprob\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_robot_5ftest_5finternal_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_robot_5ftest_5finternal_2eproto = {
  false, false, 954, descriptor_table_protodef_robot_5ftest_5finternal_2eproto, "robot_test_internal.proto", 
  &descriptor_table_robot_5ftest_5finternal_2eproto_once, nullptr, 0, 10,
  schemas, file_default_instances, TableStruct_robot_5ftest_5finternal_2eproto::offsets,
  file_level_metadata_robot_5ftest_5finternal_2eproto, file_level_enum_descriptors_robot_5ftest_5finternal_2eproto, file_level_service_descriptors_robot_5ftest_5finternal_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_robot_5ftest_5finternal_2eproto_getter() {
  return &descriptor_table_robot_5ftest_5finternal_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_robot_5ftest_5finternal_2eproto(&descriptor_table_robot_5ftest_5finternal_2eproto);
namespace PRO {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ROBOT_CONST_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_5ftest_5finternal_2eproto);
  return file_level_enum_descriptors_robot_5ftest_5finternal_2eproto[0];
}
bool ROBOT_CONST_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Robot_Config_Req::_Internal {
 public:
};

Robot_Config_Req::Robot_Config_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Robot_Config_Req)
}
Robot_Config_Req::Robot_Config_Req(const Robot_Config_Req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  robotname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    robotname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_robotname().empty()) {
    robotname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_robotname(), 
      GetArenaForAllocation());
  }
  robotpwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    robotpwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_robotpwd().empty()) {
    robotpwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_robotpwd(), 
      GetArenaForAllocation());
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:PRO.Robot_Config_Req)
}

inline void Robot_Config_Req::SharedCtor() {
robotname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  robotname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
robotpwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  robotpwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_ = 0;
}

Robot_Config_Req::~Robot_Config_Req() {
  // @@protoc_insertion_point(destructor:PRO.Robot_Config_Req)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Robot_Config_Req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  robotname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  robotpwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Robot_Config_Req::ArenaDtor(void* object) {
  Robot_Config_Req* _this = reinterpret_cast< Robot_Config_Req* >(object);
  (void)_this;
}
void Robot_Config_Req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Robot_Config_Req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Robot_Config_Req::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Robot_Config_Req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robotname_.ClearToEmpty();
  robotpwd_.ClearToEmpty();
  version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Robot_Config_Req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string robotname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_robotname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.Robot_Config_Req.robotname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string robotpwd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_robotpwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.Robot_Config_Req.robotpwd"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Robot_Config_Req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Robot_Config_Req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // string robotname = 2;
  if (!this->_internal_robotname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robotname().data(), static_cast<int>(this->_internal_robotname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.Robot_Config_Req.robotname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_robotname(), target);
  }

  // string robotpwd = 3;
  if (!this->_internal_robotpwd().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robotpwd().data(), static_cast<int>(this->_internal_robotpwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.Robot_Config_Req.robotpwd");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_robotpwd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Robot_Config_Req)
  return target;
}

size_t Robot_Config_Req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Robot_Config_Req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string robotname = 2;
  if (!this->_internal_robotname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robotname());
  }

  // string robotpwd = 3;
  if (!this->_internal_robotpwd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robotpwd());
  }

  // int32 version = 1;
  if (this->_internal_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Robot_Config_Req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Robot_Config_Req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Robot_Config_Req::GetClassData() const { return &_class_data_; }

void Robot_Config_Req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Robot_Config_Req *>(to)->MergeFrom(
      static_cast<const Robot_Config_Req &>(from));
}


void Robot_Config_Req::MergeFrom(const Robot_Config_Req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Robot_Config_Req)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_robotname().empty()) {
    _internal_set_robotname(from._internal_robotname());
  }
  if (!from._internal_robotpwd().empty()) {
    _internal_set_robotpwd(from._internal_robotpwd());
  }
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Robot_Config_Req::CopyFrom(const Robot_Config_Req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Robot_Config_Req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot_Config_Req::IsInitialized() const {
  return true;
}

void Robot_Config_Req::InternalSwap(Robot_Config_Req* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &robotname_, lhs_arena,
      &other->robotname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &robotpwd_, lhs_arena,
      &other->robotpwd_, rhs_arena
  );
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Robot_Config_Req::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5ftest_5finternal_2eproto_getter, &descriptor_table_robot_5ftest_5finternal_2eproto_once,
      file_level_metadata_robot_5ftest_5finternal_2eproto[0]);
}

// ===================================================================

class Robot_Config_Ack::_Internal {
 public:
  using HasBits = decltype(std::declval<Robot_Config_Ack>()._has_bits_);
  static void set_has_robotid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_urladdr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_openprefix(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_startuserid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_users(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_dbuser(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dbpwd(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dbname(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dbip(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Robot_Config_Ack::Robot_Config_Ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Robot_Config_Ack)
}
Robot_Config_Ack::Robot_Config_Ack(const Robot_Config_Ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  urladdr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    urladdr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_urladdr()) {
    urladdr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_urladdr(), 
      GetArenaForAllocation());
  }
  openprefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    openprefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_openprefix()) {
    openprefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_openprefix(), 
      GetArenaForAllocation());
  }
  dbuser_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dbuser_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_dbuser()) {
    dbuser_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dbuser(), 
      GetArenaForAllocation());
  }
  dbpwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dbpwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_dbpwd()) {
    dbpwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dbpwd(), 
      GetArenaForAllocation());
  }
  dbname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dbname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_dbname()) {
    dbname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dbname(), 
      GetArenaForAllocation());
  }
  dbip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dbip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_dbip()) {
    dbip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dbip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&startuserid_) -
    reinterpret_cast<char*>(&version_)) + sizeof(startuserid_));
  // @@protoc_insertion_point(copy_constructor:PRO.Robot_Config_Ack)
}

inline void Robot_Config_Ack::SharedCtor() {
urladdr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  urladdr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
openprefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  openprefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
dbuser_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dbuser_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
dbpwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dbpwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
dbname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dbname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
dbip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dbip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&startuserid_) -
    reinterpret_cast<char*>(&version_)) + sizeof(startuserid_));
}

Robot_Config_Ack::~Robot_Config_Ack() {
  // @@protoc_insertion_point(destructor:PRO.Robot_Config_Ack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Robot_Config_Ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  urladdr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  openprefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dbuser_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dbpwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dbname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dbip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Robot_Config_Ack::ArenaDtor(void* object) {
  Robot_Config_Ack* _this = reinterpret_cast< Robot_Config_Ack* >(object);
  (void)_this;
}
void Robot_Config_Ack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Robot_Config_Ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Robot_Config_Ack::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Robot_Config_Ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      urladdr_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      openprefix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      dbuser_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      dbpwd_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      dbname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      dbip_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&version_)) + sizeof(result_));
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&robotid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&users_) -
        reinterpret_cast<char*>(&robotid_)) + sizeof(users_));
  }
  startuserid_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Robot_Config_Ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 robotid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_robotid(&has_bits);
          robotid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string urladdr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_urladdr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.Robot_Config_Ack.urladdr"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string openprefix = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_openprefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.Robot_Config_Ack.openprefix"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 startuserid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_startuserid(&has_bits);
          startuserid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 users = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_users(&has_bits);
          users_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string dbuser = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_dbuser();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.Robot_Config_Ack.dbuser"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string dbpwd = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_dbpwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.Robot_Config_Ack.dbpwd"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string dbname = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_dbname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.Robot_Config_Ack.dbname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string dbip = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_dbip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.Robot_Config_Ack.dbip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Robot_Config_Ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Robot_Config_Ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // int32 result = 2;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_result(), target);
  }

  // optional int32 robotid = 3;
  if (_internal_has_robotid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_robotid(), target);
  }

  // optional string urladdr = 4;
  if (_internal_has_urladdr()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_urladdr().data(), static_cast<int>(this->_internal_urladdr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.Robot_Config_Ack.urladdr");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_urladdr(), target);
  }

  // optional string openprefix = 5;
  if (_internal_has_openprefix()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_openprefix().data(), static_cast<int>(this->_internal_openprefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.Robot_Config_Ack.openprefix");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_openprefix(), target);
  }

  // optional int64 startuserid = 7;
  if (_internal_has_startuserid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_startuserid(), target);
  }

  // optional int32 users = 8;
  if (_internal_has_users()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_users(), target);
  }

  // optional string dbuser = 10;
  if (_internal_has_dbuser()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dbuser().data(), static_cast<int>(this->_internal_dbuser().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.Robot_Config_Ack.dbuser");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_dbuser(), target);
  }

  // optional string dbpwd = 11;
  if (_internal_has_dbpwd()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dbpwd().data(), static_cast<int>(this->_internal_dbpwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.Robot_Config_Ack.dbpwd");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_dbpwd(), target);
  }

  // optional string dbname = 12;
  if (_internal_has_dbname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dbname().data(), static_cast<int>(this->_internal_dbname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.Robot_Config_Ack.dbname");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_dbname(), target);
  }

  // optional string dbip = 13;
  if (_internal_has_dbip()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dbip().data(), static_cast<int>(this->_internal_dbip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.Robot_Config_Ack.dbip");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_dbip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Robot_Config_Ack)
  return target;
}

size_t Robot_Config_Ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Robot_Config_Ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string urladdr = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_urladdr());
    }

    // optional string openprefix = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_openprefix());
    }

    // optional string dbuser = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dbuser());
    }

    // optional string dbpwd = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dbpwd());
    }

    // optional string dbname = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dbname());
    }

    // optional string dbip = 13;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dbip());
    }

  }
  // int32 version = 1;
  if (this->_internal_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  // int32 result = 2;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  if (cached_has_bits & 0x000000c0u) {
    // optional int32 robotid = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_robotid());
    }

    // optional int32 users = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_users());
    }

  }
  // optional int64 startuserid = 7;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_startuserid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Robot_Config_Ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Robot_Config_Ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Robot_Config_Ack::GetClassData() const { return &_class_data_; }

void Robot_Config_Ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Robot_Config_Ack *>(to)->MergeFrom(
      static_cast<const Robot_Config_Ack &>(from));
}


void Robot_Config_Ack::MergeFrom(const Robot_Config_Ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Robot_Config_Ack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_urladdr(from._internal_urladdr());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_openprefix(from._internal_openprefix());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_dbuser(from._internal_dbuser());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_dbpwd(from._internal_dbpwd());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_dbname(from._internal_dbname());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_dbip(from._internal_dbip());
    }
  }
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (cached_has_bits & 0x000000c0u) {
    if (cached_has_bits & 0x00000040u) {
      robotid_ = from.robotid_;
    }
    if (cached_has_bits & 0x00000080u) {
      users_ = from.users_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_startuserid(from._internal_startuserid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Robot_Config_Ack::CopyFrom(const Robot_Config_Ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Robot_Config_Ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot_Config_Ack::IsInitialized() const {
  return true;
}

void Robot_Config_Ack::InternalSwap(Robot_Config_Ack* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &urladdr_, lhs_arena,
      &other->urladdr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &openprefix_, lhs_arena,
      &other->openprefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dbuser_, lhs_arena,
      &other->dbuser_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dbpwd_, lhs_arena,
      &other->dbpwd_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dbname_, lhs_arena,
      &other->dbname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dbip_, lhs_arena,
      &other->dbip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Robot_Config_Ack, startuserid_)
      + sizeof(Robot_Config_Ack::startuserid_)
      - PROTOBUF_FIELD_OFFSET(Robot_Config_Ack, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Robot_Config_Ack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5ftest_5finternal_2eproto_getter, &descriptor_table_robot_5ftest_5finternal_2eproto_once,
      file_level_metadata_robot_5ftest_5finternal_2eproto[1]);
}

// ===================================================================

class Robot_Start_Ack::_Internal {
 public:
};

Robot_Start_Ack::Robot_Start_Ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  behavior_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Robot_Start_Ack)
}
Robot_Start_Ack::Robot_Start_Ack(const Robot_Start_Ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      behavior_(from.behavior_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&logininterval_, &from.logininterval_,
    static_cast<size_t>(reinterpret_cast<char*>(&startusernum_) -
    reinterpret_cast<char*>(&logininterval_)) + sizeof(startusernum_));
  // @@protoc_insertion_point(copy_constructor:PRO.Robot_Start_Ack)
}

inline void Robot_Start_Ack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&logininterval_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&startusernum_) -
    reinterpret_cast<char*>(&logininterval_)) + sizeof(startusernum_));
}

Robot_Start_Ack::~Robot_Start_Ack() {
  // @@protoc_insertion_point(destructor:PRO.Robot_Start_Ack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Robot_Start_Ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Robot_Start_Ack::ArenaDtor(void* object) {
  Robot_Start_Ack* _this = reinterpret_cast< Robot_Start_Ack* >(object);
  (void)_this;
}
void Robot_Start_Ack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Robot_Start_Ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Robot_Start_Ack::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Robot_Start_Ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  behavior_.Clear();
  ::memset(&logininterval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&startusernum_) -
      reinterpret_cast<char*>(&logininterval_)) + sizeof(startusernum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Robot_Start_Ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 startusernum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          startusernum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 logininterval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          logininterval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string behavior = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_behavior();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.Robot_Start_Ack.behavior"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Robot_Start_Ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Robot_Start_Ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 startusernum = 1;
  if (this->_internal_startusernum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_startusernum(), target);
  }

  // int64 logininterval = 2;
  if (this->_internal_logininterval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_logininterval(), target);
  }

  // repeated string behavior = 3;
  for (int i = 0, n = this->_internal_behavior_size(); i < n; i++) {
    const auto& s = this->_internal_behavior(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.Robot_Start_Ack.behavior");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Robot_Start_Ack)
  return target;
}

size_t Robot_Start_Ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Robot_Start_Ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string behavior = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(behavior_.size());
  for (int i = 0, n = behavior_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      behavior_.Get(i));
  }

  // int64 logininterval = 2;
  if (this->_internal_logininterval() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_logininterval());
  }

  // int32 startusernum = 1;
  if (this->_internal_startusernum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_startusernum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Robot_Start_Ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Robot_Start_Ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Robot_Start_Ack::GetClassData() const { return &_class_data_; }

void Robot_Start_Ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Robot_Start_Ack *>(to)->MergeFrom(
      static_cast<const Robot_Start_Ack &>(from));
}


void Robot_Start_Ack::MergeFrom(const Robot_Start_Ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Robot_Start_Ack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  behavior_.MergeFrom(from.behavior_);
  if (from._internal_logininterval() != 0) {
    _internal_set_logininterval(from._internal_logininterval());
  }
  if (from._internal_startusernum() != 0) {
    _internal_set_startusernum(from._internal_startusernum());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Robot_Start_Ack::CopyFrom(const Robot_Start_Ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Robot_Start_Ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot_Start_Ack::IsInitialized() const {
  return true;
}

void Robot_Start_Ack::InternalSwap(Robot_Start_Ack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  behavior_.InternalSwap(&other->behavior_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Robot_Start_Ack, startusernum_)
      + sizeof(Robot_Start_Ack::startusernum_)
      - PROTOBUF_FIELD_OFFSET(Robot_Start_Ack, logininterval_)>(
          reinterpret_cast<char*>(&logininterval_),
          reinterpret_cast<char*>(&other->logininterval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Robot_Start_Ack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5ftest_5finternal_2eproto_getter, &descriptor_table_robot_5ftest_5finternal_2eproto_once,
      file_level_metadata_robot_5ftest_5finternal_2eproto[2]);
}

// ===================================================================

class Robot_Stop_Ack::_Internal {
 public:
};

Robot_Stop_Ack::Robot_Stop_Ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:PRO.Robot_Stop_Ack)
}
Robot_Stop_Ack::Robot_Stop_Ack(const Robot_Stop_Ack& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PRO.Robot_Stop_Ack)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Robot_Stop_Ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Robot_Stop_Ack::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Robot_Stop_Ack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5ftest_5finternal_2eproto_getter, &descriptor_table_robot_5ftest_5finternal_2eproto_once,
      file_level_metadata_robot_5ftest_5finternal_2eproto[3]);
}

// ===================================================================

class Robot_Record_req::_Internal {
 public:
};

Robot_Record_req::Robot_Record_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Robot_Record_req)
}
Robot_Record_req::Robot_Record_req(const Robot_Record_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&robotid_, &from.robotid_,
    static_cast<size_t>(reinterpret_cast<char*>(&logs_) -
    reinterpret_cast<char*>(&robotid_)) + sizeof(logs_));
  // @@protoc_insertion_point(copy_constructor:PRO.Robot_Record_req)
}

inline void Robot_Record_req::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&robotid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&logs_) -
    reinterpret_cast<char*>(&robotid_)) + sizeof(logs_));
}

Robot_Record_req::~Robot_Record_req() {
  // @@protoc_insertion_point(destructor:PRO.Robot_Record_req)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Robot_Record_req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Robot_Record_req::ArenaDtor(void* object) {
  Robot_Record_req* _this = reinterpret_cast< Robot_Record_req* >(object);
  (void)_this;
}
void Robot_Record_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Robot_Record_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Robot_Record_req::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Robot_Record_req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&robotid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logs_) -
      reinterpret_cast<char*>(&robotid_)) + sizeof(logs_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Robot_Record_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 robotid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          robotid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 logs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          logs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Robot_Record_req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Robot_Record_req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 robotid = 1;
  if (this->_internal_robotid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_robotid(), target);
  }

  // int32 logs = 2;
  if (this->_internal_logs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_logs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Robot_Record_req)
  return target;
}

size_t Robot_Record_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Robot_Record_req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 robotid = 1;
  if (this->_internal_robotid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_robotid());
  }

  // int32 logs = 2;
  if (this->_internal_logs() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_logs());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Robot_Record_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Robot_Record_req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Robot_Record_req::GetClassData() const { return &_class_data_; }

void Robot_Record_req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Robot_Record_req *>(to)->MergeFrom(
      static_cast<const Robot_Record_req &>(from));
}


void Robot_Record_req::MergeFrom(const Robot_Record_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Robot_Record_req)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_robotid() != 0) {
    _internal_set_robotid(from._internal_robotid());
  }
  if (from._internal_logs() != 0) {
    _internal_set_logs(from._internal_logs());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Robot_Record_req::CopyFrom(const Robot_Record_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Robot_Record_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot_Record_req::IsInitialized() const {
  return true;
}

void Robot_Record_req::InternalSwap(Robot_Record_req* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Robot_Record_req, logs_)
      + sizeof(Robot_Record_req::logs_)
      - PROTOBUF_FIELD_OFFSET(Robot_Record_req, robotid_)>(
          reinterpret_cast<char*>(&robotid_),
          reinterpret_cast<char*>(&other->robotid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Robot_Record_req::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5ftest_5finternal_2eproto_getter, &descriptor_table_robot_5ftest_5finternal_2eproto_once,
      file_level_metadata_robot_5ftest_5finternal_2eproto[4]);
}

// ===================================================================

class Robot_StartRecord_req::_Internal {
 public:
};

Robot_StartRecord_req::Robot_StartRecord_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Robot_StartRecord_req)
}
Robot_StartRecord_req::Robot_StartRecord_req(const Robot_StartRecord_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  robotid_ = from.robotid_;
  // @@protoc_insertion_point(copy_constructor:PRO.Robot_StartRecord_req)
}

inline void Robot_StartRecord_req::SharedCtor() {
robotid_ = 0;
}

Robot_StartRecord_req::~Robot_StartRecord_req() {
  // @@protoc_insertion_point(destructor:PRO.Robot_StartRecord_req)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Robot_StartRecord_req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Robot_StartRecord_req::ArenaDtor(void* object) {
  Robot_StartRecord_req* _this = reinterpret_cast< Robot_StartRecord_req* >(object);
  (void)_this;
}
void Robot_StartRecord_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Robot_StartRecord_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Robot_StartRecord_req::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Robot_StartRecord_req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robotid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Robot_StartRecord_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 robotid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          robotid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Robot_StartRecord_req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Robot_StartRecord_req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 robotid = 1;
  if (this->_internal_robotid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_robotid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Robot_StartRecord_req)
  return target;
}

size_t Robot_StartRecord_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Robot_StartRecord_req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 robotid = 1;
  if (this->_internal_robotid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_robotid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Robot_StartRecord_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Robot_StartRecord_req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Robot_StartRecord_req::GetClassData() const { return &_class_data_; }

void Robot_StartRecord_req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Robot_StartRecord_req *>(to)->MergeFrom(
      static_cast<const Robot_StartRecord_req &>(from));
}


void Robot_StartRecord_req::MergeFrom(const Robot_StartRecord_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Robot_StartRecord_req)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_robotid() != 0) {
    _internal_set_robotid(from._internal_robotid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Robot_StartRecord_req::CopyFrom(const Robot_StartRecord_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Robot_StartRecord_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot_StartRecord_req::IsInitialized() const {
  return true;
}

void Robot_StartRecord_req::InternalSwap(Robot_StartRecord_req* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(robotid_, other->robotid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Robot_StartRecord_req::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5ftest_5finternal_2eproto_getter, &descriptor_table_robot_5ftest_5finternal_2eproto_once,
      file_level_metadata_robot_5ftest_5finternal_2eproto[5]);
}

// ===================================================================

class Robot_EndRecord_req::_Internal {
 public:
};

Robot_EndRecord_req::Robot_EndRecord_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Robot_EndRecord_req)
}
Robot_EndRecord_req::Robot_EndRecord_req(const Robot_EndRecord_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&robotid_, &from.robotid_,
    static_cast<size_t>(reinterpret_cast<char*>(&logs_) -
    reinterpret_cast<char*>(&robotid_)) + sizeof(logs_));
  // @@protoc_insertion_point(copy_constructor:PRO.Robot_EndRecord_req)
}

inline void Robot_EndRecord_req::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&robotid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&logs_) -
    reinterpret_cast<char*>(&robotid_)) + sizeof(logs_));
}

Robot_EndRecord_req::~Robot_EndRecord_req() {
  // @@protoc_insertion_point(destructor:PRO.Robot_EndRecord_req)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Robot_EndRecord_req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Robot_EndRecord_req::ArenaDtor(void* object) {
  Robot_EndRecord_req* _this = reinterpret_cast< Robot_EndRecord_req* >(object);
  (void)_this;
}
void Robot_EndRecord_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Robot_EndRecord_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Robot_EndRecord_req::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Robot_EndRecord_req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&robotid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logs_) -
      reinterpret_cast<char*>(&robotid_)) + sizeof(logs_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Robot_EndRecord_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 robotid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          robotid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 logs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          logs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Robot_EndRecord_req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Robot_EndRecord_req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 robotid = 1;
  if (this->_internal_robotid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_robotid(), target);
  }

  // int32 logs = 2;
  if (this->_internal_logs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_logs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Robot_EndRecord_req)
  return target;
}

size_t Robot_EndRecord_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Robot_EndRecord_req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 robotid = 1;
  if (this->_internal_robotid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_robotid());
  }

  // int32 logs = 2;
  if (this->_internal_logs() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_logs());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Robot_EndRecord_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Robot_EndRecord_req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Robot_EndRecord_req::GetClassData() const { return &_class_data_; }

void Robot_EndRecord_req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Robot_EndRecord_req *>(to)->MergeFrom(
      static_cast<const Robot_EndRecord_req &>(from));
}


void Robot_EndRecord_req::MergeFrom(const Robot_EndRecord_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Robot_EndRecord_req)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_robotid() != 0) {
    _internal_set_robotid(from._internal_robotid());
  }
  if (from._internal_logs() != 0) {
    _internal_set_logs(from._internal_logs());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Robot_EndRecord_req::CopyFrom(const Robot_EndRecord_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Robot_EndRecord_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot_EndRecord_req::IsInitialized() const {
  return true;
}

void Robot_EndRecord_req::InternalSwap(Robot_EndRecord_req* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Robot_EndRecord_req, logs_)
      + sizeof(Robot_EndRecord_req::logs_)
      - PROTOBUF_FIELD_OFFSET(Robot_EndRecord_req, robotid_)>(
          reinterpret_cast<char*>(&robotid_),
          reinterpret_cast<char*>(&other->robotid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Robot_EndRecord_req::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5ftest_5finternal_2eproto_getter, &descriptor_table_robot_5ftest_5finternal_2eproto_once,
      file_level_metadata_robot_5ftest_5finternal_2eproto[6]);
}

// ===================================================================

class Robot_UploadLogs_ntf::_Internal {
 public:
};

Robot_UploadLogs_ntf::Robot_UploadLogs_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:PRO.Robot_UploadLogs_ntf)
}
Robot_UploadLogs_ntf::Robot_UploadLogs_ntf(const Robot_UploadLogs_ntf& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PRO.Robot_UploadLogs_ntf)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Robot_UploadLogs_ntf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Robot_UploadLogs_ntf::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Robot_UploadLogs_ntf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5ftest_5finternal_2eproto_getter, &descriptor_table_robot_5ftest_5finternal_2eproto_once,
      file_level_metadata_robot_5ftest_5finternal_2eproto[7]);
}

// ===================================================================

class Robot_ClearLogs_ntf::_Internal {
 public:
};

Robot_ClearLogs_ntf::Robot_ClearLogs_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:PRO.Robot_ClearLogs_ntf)
}
Robot_ClearLogs_ntf::Robot_ClearLogs_ntf(const Robot_ClearLogs_ntf& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PRO.Robot_ClearLogs_ntf)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Robot_ClearLogs_ntf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Robot_ClearLogs_ntf::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Robot_ClearLogs_ntf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5ftest_5finternal_2eproto_getter, &descriptor_table_robot_5ftest_5finternal_2eproto_once,
      file_level_metadata_robot_5ftest_5finternal_2eproto[8]);
}

// ===================================================================

class Robot_UserPrefixChg_ntf::_Internal {
 public:
};

Robot_UserPrefixChg_ntf::Robot_UserPrefixChg_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Robot_UserPrefixChg_ntf)
}
Robot_UserPrefixChg_ntf::Robot_UserPrefixChg_ntf(const Robot_UserPrefixChg_ntf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prefix().empty()) {
    prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prefix(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:PRO.Robot_UserPrefixChg_ntf)
}

inline void Robot_UserPrefixChg_ntf::SharedCtor() {
prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Robot_UserPrefixChg_ntf::~Robot_UserPrefixChg_ntf() {
  // @@protoc_insertion_point(destructor:PRO.Robot_UserPrefixChg_ntf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Robot_UserPrefixChg_ntf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Robot_UserPrefixChg_ntf::ArenaDtor(void* object) {
  Robot_UserPrefixChg_ntf* _this = reinterpret_cast< Robot_UserPrefixChg_ntf* >(object);
  (void)_this;
}
void Robot_UserPrefixChg_ntf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Robot_UserPrefixChg_ntf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Robot_UserPrefixChg_ntf::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Robot_UserPrefixChg_ntf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prefix_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Robot_UserPrefixChg_ntf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.Robot_UserPrefixChg_ntf.prefix"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Robot_UserPrefixChg_ntf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Robot_UserPrefixChg_ntf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string prefix = 1;
  if (!this->_internal_prefix().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.Robot_UserPrefixChg_ntf.prefix");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_prefix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Robot_UserPrefixChg_ntf)
  return target;
}

size_t Robot_UserPrefixChg_ntf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Robot_UserPrefixChg_ntf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string prefix = 1;
  if (!this->_internal_prefix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Robot_UserPrefixChg_ntf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Robot_UserPrefixChg_ntf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Robot_UserPrefixChg_ntf::GetClassData() const { return &_class_data_; }

void Robot_UserPrefixChg_ntf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Robot_UserPrefixChg_ntf *>(to)->MergeFrom(
      static_cast<const Robot_UserPrefixChg_ntf &>(from));
}


void Robot_UserPrefixChg_ntf::MergeFrom(const Robot_UserPrefixChg_ntf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Robot_UserPrefixChg_ntf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_prefix().empty()) {
    _internal_set_prefix(from._internal_prefix());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Robot_UserPrefixChg_ntf::CopyFrom(const Robot_UserPrefixChg_ntf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Robot_UserPrefixChg_ntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot_UserPrefixChg_ntf::IsInitialized() const {
  return true;
}

void Robot_UserPrefixChg_ntf::InternalSwap(Robot_UserPrefixChg_ntf* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &prefix_, lhs_arena,
      &other->prefix_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Robot_UserPrefixChg_ntf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5ftest_5finternal_2eproto_getter, &descriptor_table_robot_5ftest_5finternal_2eproto_once,
      file_level_metadata_robot_5ftest_5finternal_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace PRO
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PRO::Robot_Config_Req* Arena::CreateMaybeMessage< ::PRO::Robot_Config_Req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Robot_Config_Req >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Robot_Config_Ack* Arena::CreateMaybeMessage< ::PRO::Robot_Config_Ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Robot_Config_Ack >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Robot_Start_Ack* Arena::CreateMaybeMessage< ::PRO::Robot_Start_Ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Robot_Start_Ack >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Robot_Stop_Ack* Arena::CreateMaybeMessage< ::PRO::Robot_Stop_Ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Robot_Stop_Ack >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Robot_Record_req* Arena::CreateMaybeMessage< ::PRO::Robot_Record_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Robot_Record_req >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Robot_StartRecord_req* Arena::CreateMaybeMessage< ::PRO::Robot_StartRecord_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Robot_StartRecord_req >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Robot_EndRecord_req* Arena::CreateMaybeMessage< ::PRO::Robot_EndRecord_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Robot_EndRecord_req >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Robot_UploadLogs_ntf* Arena::CreateMaybeMessage< ::PRO::Robot_UploadLogs_ntf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Robot_UploadLogs_ntf >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Robot_ClearLogs_ntf* Arena::CreateMaybeMessage< ::PRO::Robot_ClearLogs_ntf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Robot_ClearLogs_ntf >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Robot_UserPrefixChg_ntf* Arena::CreateMaybeMessage< ::PRO::Robot_UserPrefixChg_ntf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Robot_UserPrefixChg_ntf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

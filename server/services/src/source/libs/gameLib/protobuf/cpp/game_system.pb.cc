// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_system.proto

#include "game_system.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace PRO {
constexpr GameUserInfo::GameUserInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nickname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pos_(nullptr)
  , user_iid_(int64_t{0})
  , role_iid_(int64_t{0}){}
struct GameUserInfoDefaultTypeInternal {
  constexpr GameUserInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameUserInfoDefaultTypeInternal() {}
  union {
    GameUserInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameUserInfoDefaultTypeInternal _GameUserInfo_default_instance_;
constexpr Game_UserAlive_ntf::Game_UserAlive_ntf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Game_UserAlive_ntfDefaultTypeInternal {
  constexpr Game_UserAlive_ntfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Game_UserAlive_ntfDefaultTypeInternal() {}
  union {
    Game_UserAlive_ntf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Game_UserAlive_ntfDefaultTypeInternal _Game_UserAlive_ntf_default_instance_;
constexpr Game_EnterGame_req::Game_EnterGame_req(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_pos_(nullptr)
  , game_iid_(int64_t{0}){}
struct Game_EnterGame_reqDefaultTypeInternal {
  constexpr Game_EnterGame_reqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Game_EnterGame_reqDefaultTypeInternal() {}
  union {
    Game_EnterGame_req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Game_EnterGame_reqDefaultTypeInternal _Game_EnterGame_req_default_instance_;
constexpr Game_EnterGame_ack::Game_EnterGame_ack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pos_(nullptr)
  , game_iid_(int64_t{0})
  , result_(0){}
struct Game_EnterGame_ackDefaultTypeInternal {
  constexpr Game_EnterGame_ackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Game_EnterGame_ackDefaultTypeInternal() {}
  union {
    Game_EnterGame_ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Game_EnterGame_ackDefaultTypeInternal _Game_EnterGame_ack_default_instance_;
constexpr Game_ServiceDisable_ntf::Game_ServiceDisable_ntf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Game_ServiceDisable_ntfDefaultTypeInternal {
  constexpr Game_ServiceDisable_ntfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Game_ServiceDisable_ntfDefaultTypeInternal() {}
  union {
    Game_ServiceDisable_ntf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Game_ServiceDisable_ntfDefaultTypeInternal _Game_ServiceDisable_ntf_default_instance_;
constexpr Game_UsersVisiable_ntf::Game_UsersVisiable_ntf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : online_users_()
  , offline_users_()
  , _offline_users_cached_byte_size_(0)
  , role_pos_(nullptr){}
struct Game_UsersVisiable_ntfDefaultTypeInternal {
  constexpr Game_UsersVisiable_ntfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Game_UsersVisiable_ntfDefaultTypeInternal() {}
  union {
    Game_UsersVisiable_ntf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Game_UsersVisiable_ntfDefaultTypeInternal _Game_UsersVisiable_ntf_default_instance_;
constexpr Game_UserState_sync::Game_UserState_sync(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_pos_(nullptr)
  , user_iid_(int64_t{0}){}
struct Game_UserState_syncDefaultTypeInternal {
  constexpr Game_UserState_syncDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Game_UserState_syncDefaultTypeInternal() {}
  union {
    Game_UserState_sync _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Game_UserState_syncDefaultTypeInternal _Game_UserState_sync_default_instance_;
}  // namespace PRO
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_game_5fsystem_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_game_5fsystem_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_game_5fsystem_2eproto = nullptr;

const uint32_t TableStruct_game_5fsystem_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::GameUserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::GameUserInfo, user_iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::GameUserInfo, role_iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::GameUserInfo, nickname_),
  PROTOBUF_FIELD_OFFSET(::PRO::GameUserInfo, pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Game_UserAlive_ntf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Game_EnterGame_req, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PRO::Game_EnterGame_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Game_EnterGame_req, role_pos_),
  PROTOBUF_FIELD_OFFSET(::PRO::Game_EnterGame_req, game_iid_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::PRO::Game_EnterGame_ack, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PRO::Game_EnterGame_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Game_EnterGame_ack, result_),
  PROTOBUF_FIELD_OFFSET(::PRO::Game_EnterGame_ack, game_iid_),
  PROTOBUF_FIELD_OFFSET(::PRO::Game_EnterGame_ack, pos_),
  ~0u,
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PRO::Game_ServiceDisable_ntf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Game_UsersVisiable_ntf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PRO::Game_UsersVisiable_ntf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Game_UsersVisiable_ntf, role_pos_),
  PROTOBUF_FIELD_OFFSET(::PRO::Game_UsersVisiable_ntf, online_users_),
  PROTOBUF_FIELD_OFFSET(::PRO::Game_UsersVisiable_ntf, offline_users_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::PRO::Game_UserState_sync, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PRO::Game_UserState_sync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PRO::Game_UserState_sync, role_pos_),
  PROTOBUF_FIELD_OFFSET(::PRO::Game_UserState_sync, user_iid_),
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::PRO::GameUserInfo)},
  { 10, -1, -1, sizeof(::PRO::Game_UserAlive_ntf)},
  { 16, 24, -1, sizeof(::PRO::Game_EnterGame_req)},
  { 26, 35, -1, sizeof(::PRO::Game_EnterGame_ack)},
  { 38, -1, -1, sizeof(::PRO::Game_ServiceDisable_ntf)},
  { 44, 53, -1, sizeof(::PRO::Game_UsersVisiable_ntf)},
  { 56, 64, -1, sizeof(::PRO::Game_UserState_sync)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_GameUserInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Game_UserAlive_ntf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Game_EnterGame_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Game_EnterGame_ack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Game_ServiceDisable_ntf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Game_UsersVisiable_ntf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PRO::_Game_UserState_sync_default_instance_),
};

const char descriptor_table_protodef_game_5fsystem_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021game_system.proto\022\003PRO\032\021db_internal.pr"
  "oto\"b\n\014GameUserInfo\022\020\n\010user_iid\030\001 \001(\003\022\020\n"
  "\010role_iid\030\002 \001(\003\022\020\n\010nickname\030\003 \001(\t\022\034\n\003pos"
  "\030\004 \001(\0132\017.PRO.Location3D\"\024\n\022Game_UserAliv"
  "e_ntf\"[\n\022Game_EnterGame_req\022&\n\010role_pos\030"
  "\001 \001(\0132\017.PRO.Location3DH\000\210\001\001\022\020\n\010game_iid\030"
  "\002 \001(\003B\013\n\t_role_pos\"s\n\022Game_EnterGame_ack"
  "\022\016\n\006result\030\001 \001(\005\022\025\n\010game_iid\030\002 \001(\003H\000\210\001\001\022"
  "!\n\003pos\030\003 \001(\0132\017.PRO.Location3DH\001\210\001\001B\013\n\t_g"
  "ame_iidB\006\n\004_pos\"\031\n\027Game_ServiceDisable_n"
  "tf\"\215\001\n\026Game_UsersVisiable_ntf\022&\n\010role_po"
  "s\030\001 \001(\0132\017.PRO.Location3DH\000\210\001\001\022\'\n\014online_"
  "users\030\002 \003(\0132\021.PRO.GameUserInfo\022\025\n\rofflin"
  "e_users\030\003 \003(\003B\013\n\t_role_pos\"\\\n\023Game_UserS"
  "tate_sync\022&\n\010role_pos\030\001 \001(\0132\017.PRO.Locati"
  "on3DH\000\210\001\001\022\020\n\010user_iid\030\002 \001(\003B\013\n\t_role_pos"
  "BT\n\033com.cms.client.network.gproP\001Z\025gamel"
  "ib/protobuf/gpro\252\002\033com.cms.client.networ"
  "k.gprob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_game_5fsystem_2eproto_deps[1] = {
  &::descriptor_table_db_5finternal_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_game_5fsystem_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_5fsystem_2eproto = {
  false, false, 734, descriptor_table_protodef_game_5fsystem_2eproto, "game_system.proto", 
  &descriptor_table_game_5fsystem_2eproto_once, descriptor_table_game_5fsystem_2eproto_deps, 1, 7,
  schemas, file_default_instances, TableStruct_game_5fsystem_2eproto::offsets,
  file_level_metadata_game_5fsystem_2eproto, file_level_enum_descriptors_game_5fsystem_2eproto, file_level_service_descriptors_game_5fsystem_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_game_5fsystem_2eproto_getter() {
  return &descriptor_table_game_5fsystem_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_game_5fsystem_2eproto(&descriptor_table_game_5fsystem_2eproto);
namespace PRO {

// ===================================================================

class GameUserInfo::_Internal {
 public:
  static const ::PRO::Location3D& pos(const GameUserInfo* msg);
};

const ::PRO::Location3D&
GameUserInfo::_Internal::pos(const GameUserInfo* msg) {
  return *msg->pos_;
}
void GameUserInfo::clear_pos() {
  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
GameUserInfo::GameUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.GameUserInfo)
}
GameUserInfo::GameUserInfo(const GameUserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_pos()) {
    pos_ = new ::PRO::Location3D(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  ::memcpy(&user_iid_, &from.user_iid_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_iid_) -
    reinterpret_cast<char*>(&user_iid_)) + sizeof(role_iid_));
  // @@protoc_insertion_point(copy_constructor:PRO.GameUserInfo)
}

inline void GameUserInfo::SharedCtor() {
nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&role_iid_) -
    reinterpret_cast<char*>(&pos_)) + sizeof(role_iid_));
}

GameUserInfo::~GameUserInfo() {
  // @@protoc_insertion_point(destructor:PRO.GameUserInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameUserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pos_;
}

void GameUserInfo::ArenaDtor(void* object) {
  GameUserInfo* _this = reinterpret_cast< GameUserInfo* >(object);
  (void)_this;
}
void GameUserInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameUserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.GameUserInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nickname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  ::memset(&user_iid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_iid_) -
      reinterpret_cast<char*>(&user_iid_)) + sizeof(role_iid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameUserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 user_iid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 role_iid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          role_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nickname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRO.GameUserInfo.nickname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PRO.Location3D pos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameUserInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.GameUserInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_iid = 1;
  if (this->_internal_user_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_iid(), target);
  }

  // int64 role_iid = 2;
  if (this->_internal_role_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_role_iid(), target);
  }

  // string nickname = 3;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PRO.GameUserInfo.nickname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_nickname(), target);
  }

  // .PRO.Location3D pos = 4;
  if (this->_internal_has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pos(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.GameUserInfo)
  return target;
}

size_t GameUserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.GameUserInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 3;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // .PRO.Location3D pos = 4;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // int64 user_iid = 1;
  if (this->_internal_user_iid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_user_iid());
  }

  // int64 role_iid = 2;
  if (this->_internal_role_iid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_role_iid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameUserInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameUserInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameUserInfo::GetClassData() const { return &_class_data_; }

void GameUserInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameUserInfo *>(to)->MergeFrom(
      static_cast<const GameUserInfo &>(from));
}


void GameUserInfo::MergeFrom(const GameUserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.GameUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nickname().empty()) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (from._internal_has_pos()) {
    _internal_mutable_pos()->::PRO::Location3D::MergeFrom(from._internal_pos());
  }
  if (from._internal_user_iid() != 0) {
    _internal_set_user_iid(from._internal_user_iid());
  }
  if (from._internal_role_iid() != 0) {
    _internal_set_role_iid(from._internal_role_iid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameUserInfo::CopyFrom(const GameUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.GameUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameUserInfo::IsInitialized() const {
  return true;
}

void GameUserInfo::InternalSwap(GameUserInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nickname_, lhs_arena,
      &other->nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameUserInfo, role_iid_)
      + sizeof(GameUserInfo::role_iid_)
      - PROTOBUF_FIELD_OFFSET(GameUserInfo, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameUserInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fsystem_2eproto_getter, &descriptor_table_game_5fsystem_2eproto_once,
      file_level_metadata_game_5fsystem_2eproto[0]);
}

// ===================================================================

class Game_UserAlive_ntf::_Internal {
 public:
};

Game_UserAlive_ntf::Game_UserAlive_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:PRO.Game_UserAlive_ntf)
}
Game_UserAlive_ntf::Game_UserAlive_ntf(const Game_UserAlive_ntf& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PRO.Game_UserAlive_ntf)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Game_UserAlive_ntf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Game_UserAlive_ntf::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Game_UserAlive_ntf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fsystem_2eproto_getter, &descriptor_table_game_5fsystem_2eproto_once,
      file_level_metadata_game_5fsystem_2eproto[1]);
}

// ===================================================================

class Game_EnterGame_req::_Internal {
 public:
  using HasBits = decltype(std::declval<Game_EnterGame_req>()._has_bits_);
  static const ::PRO::Location3D& role_pos(const Game_EnterGame_req* msg);
  static void set_has_role_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PRO::Location3D&
Game_EnterGame_req::_Internal::role_pos(const Game_EnterGame_req* msg) {
  return *msg->role_pos_;
}
void Game_EnterGame_req::clear_role_pos() {
  if (role_pos_ != nullptr) role_pos_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Game_EnterGame_req::Game_EnterGame_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Game_EnterGame_req)
}
Game_EnterGame_req::Game_EnterGame_req(const Game_EnterGame_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_role_pos()) {
    role_pos_ = new ::PRO::Location3D(*from.role_pos_);
  } else {
    role_pos_ = nullptr;
  }
  game_iid_ = from.game_iid_;
  // @@protoc_insertion_point(copy_constructor:PRO.Game_EnterGame_req)
}

inline void Game_EnterGame_req::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&role_pos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_iid_) -
    reinterpret_cast<char*>(&role_pos_)) + sizeof(game_iid_));
}

Game_EnterGame_req::~Game_EnterGame_req() {
  // @@protoc_insertion_point(destructor:PRO.Game_EnterGame_req)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Game_EnterGame_req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete role_pos_;
}

void Game_EnterGame_req::ArenaDtor(void* object) {
  Game_EnterGame_req* _this = reinterpret_cast< Game_EnterGame_req* >(object);
  (void)_this;
}
void Game_EnterGame_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Game_EnterGame_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Game_EnterGame_req::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Game_EnterGame_req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(role_pos_ != nullptr);
    role_pos_->Clear();
  }
  game_iid_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Game_EnterGame_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .PRO.Location3D role_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 game_iid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          game_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Game_EnterGame_req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Game_EnterGame_req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .PRO.Location3D role_pos = 1;
  if (_internal_has_role_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::role_pos(this), target, stream);
  }

  // int64 game_iid = 2;
  if (this->_internal_game_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_game_iid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Game_EnterGame_req)
  return target;
}

size_t Game_EnterGame_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Game_EnterGame_req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PRO.Location3D role_pos = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_pos_);
  }

  // int64 game_iid = 2;
  if (this->_internal_game_iid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_game_iid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Game_EnterGame_req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Game_EnterGame_req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Game_EnterGame_req::GetClassData() const { return &_class_data_; }

void Game_EnterGame_req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Game_EnterGame_req *>(to)->MergeFrom(
      static_cast<const Game_EnterGame_req &>(from));
}


void Game_EnterGame_req::MergeFrom(const Game_EnterGame_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Game_EnterGame_req)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_role_pos()) {
    _internal_mutable_role_pos()->::PRO::Location3D::MergeFrom(from._internal_role_pos());
  }
  if (from._internal_game_iid() != 0) {
    _internal_set_game_iid(from._internal_game_iid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Game_EnterGame_req::CopyFrom(const Game_EnterGame_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Game_EnterGame_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game_EnterGame_req::IsInitialized() const {
  return true;
}

void Game_EnterGame_req::InternalSwap(Game_EnterGame_req* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Game_EnterGame_req, game_iid_)
      + sizeof(Game_EnterGame_req::game_iid_)
      - PROTOBUF_FIELD_OFFSET(Game_EnterGame_req, role_pos_)>(
          reinterpret_cast<char*>(&role_pos_),
          reinterpret_cast<char*>(&other->role_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Game_EnterGame_req::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fsystem_2eproto_getter, &descriptor_table_game_5fsystem_2eproto_once,
      file_level_metadata_game_5fsystem_2eproto[2]);
}

// ===================================================================

class Game_EnterGame_ack::_Internal {
 public:
  using HasBits = decltype(std::declval<Game_EnterGame_ack>()._has_bits_);
  static void set_has_game_iid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PRO::Location3D& pos(const Game_EnterGame_ack* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PRO::Location3D&
Game_EnterGame_ack::_Internal::pos(const Game_EnterGame_ack* msg) {
  return *msg->pos_;
}
void Game_EnterGame_ack::clear_pos() {
  if (pos_ != nullptr) pos_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Game_EnterGame_ack::Game_EnterGame_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Game_EnterGame_ack)
}
Game_EnterGame_ack::Game_EnterGame_ack(const Game_EnterGame_ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::PRO::Location3D(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  ::memcpy(&game_iid_, &from.game_iid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&game_iid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:PRO.Game_EnterGame_ack)
}

inline void Game_EnterGame_ack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&pos_)) + sizeof(result_));
}

Game_EnterGame_ack::~Game_EnterGame_ack() {
  // @@protoc_insertion_point(destructor:PRO.Game_EnterGame_ack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Game_EnterGame_ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pos_;
}

void Game_EnterGame_ack::ArenaDtor(void* object) {
  Game_EnterGame_ack* _this = reinterpret_cast< Game_EnterGame_ack* >(object);
  (void)_this;
}
void Game_EnterGame_ack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Game_EnterGame_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Game_EnterGame_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Game_EnterGame_ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(pos_ != nullptr);
    pos_->Clear();
  }
  game_iid_ = int64_t{0};
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Game_EnterGame_ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 game_iid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_game_iid(&has_bits);
          game_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PRO.Location3D pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Game_EnterGame_ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Game_EnterGame_ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // optional int64 game_iid = 2;
  if (_internal_has_game_iid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_game_iid(), target);
  }

  // optional .PRO.Location3D pos = 3;
  if (_internal_has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pos(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Game_EnterGame_ack)
  return target;
}

size_t Game_EnterGame_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Game_EnterGame_ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .PRO.Location3D pos = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pos_);
    }

    // optional int64 game_iid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_game_iid());
    }

  }
  // int32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Game_EnterGame_ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Game_EnterGame_ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Game_EnterGame_ack::GetClassData() const { return &_class_data_; }

void Game_EnterGame_ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Game_EnterGame_ack *>(to)->MergeFrom(
      static_cast<const Game_EnterGame_ack &>(from));
}


void Game_EnterGame_ack::MergeFrom(const Game_EnterGame_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Game_EnterGame_ack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_pos()->::PRO::Location3D::MergeFrom(from._internal_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      game_iid_ = from.game_iid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Game_EnterGame_ack::CopyFrom(const Game_EnterGame_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Game_EnterGame_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game_EnterGame_ack::IsInitialized() const {
  return true;
}

void Game_EnterGame_ack::InternalSwap(Game_EnterGame_ack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Game_EnterGame_ack, result_)
      + sizeof(Game_EnterGame_ack::result_)
      - PROTOBUF_FIELD_OFFSET(Game_EnterGame_ack, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Game_EnterGame_ack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fsystem_2eproto_getter, &descriptor_table_game_5fsystem_2eproto_once,
      file_level_metadata_game_5fsystem_2eproto[3]);
}

// ===================================================================

class Game_ServiceDisable_ntf::_Internal {
 public:
};

Game_ServiceDisable_ntf::Game_ServiceDisable_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:PRO.Game_ServiceDisable_ntf)
}
Game_ServiceDisable_ntf::Game_ServiceDisable_ntf(const Game_ServiceDisable_ntf& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PRO.Game_ServiceDisable_ntf)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Game_ServiceDisable_ntf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Game_ServiceDisable_ntf::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Game_ServiceDisable_ntf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fsystem_2eproto_getter, &descriptor_table_game_5fsystem_2eproto_once,
      file_level_metadata_game_5fsystem_2eproto[4]);
}

// ===================================================================

class Game_UsersVisiable_ntf::_Internal {
 public:
  using HasBits = decltype(std::declval<Game_UsersVisiable_ntf>()._has_bits_);
  static const ::PRO::Location3D& role_pos(const Game_UsersVisiable_ntf* msg);
  static void set_has_role_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PRO::Location3D&
Game_UsersVisiable_ntf::_Internal::role_pos(const Game_UsersVisiable_ntf* msg) {
  return *msg->role_pos_;
}
void Game_UsersVisiable_ntf::clear_role_pos() {
  if (role_pos_ != nullptr) role_pos_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Game_UsersVisiable_ntf::Game_UsersVisiable_ntf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  online_users_(arena),
  offline_users_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Game_UsersVisiable_ntf)
}
Game_UsersVisiable_ntf::Game_UsersVisiable_ntf(const Game_UsersVisiable_ntf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      online_users_(from.online_users_),
      offline_users_(from.offline_users_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_role_pos()) {
    role_pos_ = new ::PRO::Location3D(*from.role_pos_);
  } else {
    role_pos_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PRO.Game_UsersVisiable_ntf)
}

inline void Game_UsersVisiable_ntf::SharedCtor() {
role_pos_ = nullptr;
}

Game_UsersVisiable_ntf::~Game_UsersVisiable_ntf() {
  // @@protoc_insertion_point(destructor:PRO.Game_UsersVisiable_ntf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Game_UsersVisiable_ntf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete role_pos_;
}

void Game_UsersVisiable_ntf::ArenaDtor(void* object) {
  Game_UsersVisiable_ntf* _this = reinterpret_cast< Game_UsersVisiable_ntf* >(object);
  (void)_this;
}
void Game_UsersVisiable_ntf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Game_UsersVisiable_ntf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Game_UsersVisiable_ntf::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Game_UsersVisiable_ntf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  online_users_.Clear();
  offline_users_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(role_pos_ != nullptr);
    role_pos_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Game_UsersVisiable_ntf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .PRO.Location3D role_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PRO.GameUserInfo online_users = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_online_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 offline_users = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_offline_users(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_offline_users(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Game_UsersVisiable_ntf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Game_UsersVisiable_ntf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .PRO.Location3D role_pos = 1;
  if (_internal_has_role_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::role_pos(this), target, stream);
  }

  // repeated .PRO.GameUserInfo online_users = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_online_users_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_online_users(i), target, stream);
  }

  // repeated int64 offline_users = 3;
  {
    int byte_size = _offline_users_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_offline_users(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Game_UsersVisiable_ntf)
  return target;
}

size_t Game_UsersVisiable_ntf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Game_UsersVisiable_ntf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PRO.GameUserInfo online_users = 2;
  total_size += 1UL * this->_internal_online_users_size();
  for (const auto& msg : this->online_users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 offline_users = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->offline_users_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _offline_users_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional .PRO.Location3D role_pos = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_pos_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Game_UsersVisiable_ntf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Game_UsersVisiable_ntf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Game_UsersVisiable_ntf::GetClassData() const { return &_class_data_; }

void Game_UsersVisiable_ntf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Game_UsersVisiable_ntf *>(to)->MergeFrom(
      static_cast<const Game_UsersVisiable_ntf &>(from));
}


void Game_UsersVisiable_ntf::MergeFrom(const Game_UsersVisiable_ntf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Game_UsersVisiable_ntf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  online_users_.MergeFrom(from.online_users_);
  offline_users_.MergeFrom(from.offline_users_);
  if (from._internal_has_role_pos()) {
    _internal_mutable_role_pos()->::PRO::Location3D::MergeFrom(from._internal_role_pos());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Game_UsersVisiable_ntf::CopyFrom(const Game_UsersVisiable_ntf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Game_UsersVisiable_ntf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game_UsersVisiable_ntf::IsInitialized() const {
  return true;
}

void Game_UsersVisiable_ntf::InternalSwap(Game_UsersVisiable_ntf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  online_users_.InternalSwap(&other->online_users_);
  offline_users_.InternalSwap(&other->offline_users_);
  swap(role_pos_, other->role_pos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Game_UsersVisiable_ntf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fsystem_2eproto_getter, &descriptor_table_game_5fsystem_2eproto_once,
      file_level_metadata_game_5fsystem_2eproto[5]);
}

// ===================================================================

class Game_UserState_sync::_Internal {
 public:
  using HasBits = decltype(std::declval<Game_UserState_sync>()._has_bits_);
  static const ::PRO::Location3D& role_pos(const Game_UserState_sync* msg);
  static void set_has_role_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PRO::Location3D&
Game_UserState_sync::_Internal::role_pos(const Game_UserState_sync* msg) {
  return *msg->role_pos_;
}
void Game_UserState_sync::clear_role_pos() {
  if (role_pos_ != nullptr) role_pos_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Game_UserState_sync::Game_UserState_sync(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PRO.Game_UserState_sync)
}
Game_UserState_sync::Game_UserState_sync(const Game_UserState_sync& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_role_pos()) {
    role_pos_ = new ::PRO::Location3D(*from.role_pos_);
  } else {
    role_pos_ = nullptr;
  }
  user_iid_ = from.user_iid_;
  // @@protoc_insertion_point(copy_constructor:PRO.Game_UserState_sync)
}

inline void Game_UserState_sync::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&role_pos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_iid_) -
    reinterpret_cast<char*>(&role_pos_)) + sizeof(user_iid_));
}

Game_UserState_sync::~Game_UserState_sync() {
  // @@protoc_insertion_point(destructor:PRO.Game_UserState_sync)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Game_UserState_sync::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete role_pos_;
}

void Game_UserState_sync::ArenaDtor(void* object) {
  Game_UserState_sync* _this = reinterpret_cast< Game_UserState_sync* >(object);
  (void)_this;
}
void Game_UserState_sync::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Game_UserState_sync::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Game_UserState_sync::Clear() {
// @@protoc_insertion_point(message_clear_start:PRO.Game_UserState_sync)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(role_pos_ != nullptr);
    role_pos_->Clear();
  }
  user_iid_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Game_UserState_sync::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .PRO.Location3D role_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 user_iid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          user_iid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Game_UserState_sync::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRO.Game_UserState_sync)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .PRO.Location3D role_pos = 1;
  if (_internal_has_role_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::role_pos(this), target, stream);
  }

  // int64 user_iid = 2;
  if (this->_internal_user_iid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_user_iid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRO.Game_UserState_sync)
  return target;
}

size_t Game_UserState_sync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRO.Game_UserState_sync)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PRO.Location3D role_pos = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_pos_);
  }

  // int64 user_iid = 2;
  if (this->_internal_user_iid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_user_iid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Game_UserState_sync::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Game_UserState_sync::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Game_UserState_sync::GetClassData() const { return &_class_data_; }

void Game_UserState_sync::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Game_UserState_sync *>(to)->MergeFrom(
      static_cast<const Game_UserState_sync &>(from));
}


void Game_UserState_sync::MergeFrom(const Game_UserState_sync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRO.Game_UserState_sync)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_role_pos()) {
    _internal_mutable_role_pos()->::PRO::Location3D::MergeFrom(from._internal_role_pos());
  }
  if (from._internal_user_iid() != 0) {
    _internal_set_user_iid(from._internal_user_iid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Game_UserState_sync::CopyFrom(const Game_UserState_sync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRO.Game_UserState_sync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game_UserState_sync::IsInitialized() const {
  return true;
}

void Game_UserState_sync::InternalSwap(Game_UserState_sync* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Game_UserState_sync, user_iid_)
      + sizeof(Game_UserState_sync::user_iid_)
      - PROTOBUF_FIELD_OFFSET(Game_UserState_sync, role_pos_)>(
          reinterpret_cast<char*>(&role_pos_),
          reinterpret_cast<char*>(&other->role_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Game_UserState_sync::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fsystem_2eproto_getter, &descriptor_table_game_5fsystem_2eproto_once,
      file_level_metadata_game_5fsystem_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace PRO
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PRO::GameUserInfo* Arena::CreateMaybeMessage< ::PRO::GameUserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::GameUserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Game_UserAlive_ntf* Arena::CreateMaybeMessage< ::PRO::Game_UserAlive_ntf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Game_UserAlive_ntf >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Game_EnterGame_req* Arena::CreateMaybeMessage< ::PRO::Game_EnterGame_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Game_EnterGame_req >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Game_EnterGame_ack* Arena::CreateMaybeMessage< ::PRO::Game_EnterGame_ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Game_EnterGame_ack >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Game_ServiceDisable_ntf* Arena::CreateMaybeMessage< ::PRO::Game_ServiceDisable_ntf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Game_ServiceDisable_ntf >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Game_UsersVisiable_ntf* Arena::CreateMaybeMessage< ::PRO::Game_UsersVisiable_ntf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Game_UsersVisiable_ntf >(arena);
}
template<> PROTOBUF_NOINLINE ::PRO::Game_UserState_sync* Arena::CreateMaybeMessage< ::PRO::Game_UserState_sync >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PRO::Game_UserState_sync >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

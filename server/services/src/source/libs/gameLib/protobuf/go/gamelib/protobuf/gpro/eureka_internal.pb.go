// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.0
// source: eureka_internal.proto

package gpro

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//服务器类型
type ERK_SERVICETYPE int32

const (
	ERK_SERVICETYPE_ERK_SERVICE_NONE   ERK_SERVICETYPE = 0
	ERK_SERVICETYPE_ERK_SERVICE_EUREKA ERK_SERVICETYPE = 1
	//资源分配
	ERK_SERVICETYPE_ERK_SERVICE_RES ERK_SERVICETYPE = 2
	//客户端直连网关
	ERK_SERVICETYPE_ERK_SERVICE_GATE ERK_SERVICETYPE = 3
	//部署任务系统，购买等逻辑
	ERK_SERVICETYPE_ERK_SERVICE_HOME ERK_SERVICETYPE = 4
	//全局服务，比如工会、战斗匹配
	//身份认证服务，登陆排队等
	ERK_SERVICETYPE_ERK_SERVICE_LOGIN ERK_SERVICETYPE = 5
	ERK_SERVICETYPE_ERK_SERVICE_UNION ERK_SERVICETYPE = 6
	//游戏逻辑服务器
	ERK_SERVICETYPE_ERK_SERVICE_GAME ERK_SERVICETYPE = 7
	//数据同步服务器
	ERK_SERVICETYPE_ERK_SERVICE_DATASYNC ERK_SERVICETYPE = 8
	//router
	ERK_SERVICETYPE_ERK_SERVICE_ROUTER ERK_SERVICETYPE = 9
	//chat
	ERK_SERVICETYPE_ERK_SERVICE_CHAT ERK_SERVICETYPE = 10
	//mail
	ERK_SERVICETYPE_ERK_SERVICE_MAIL ERK_SERVICETYPE = 11
	//friend
	ERK_SERVICETYPE_ERK_SERVICE_FRIEND ERK_SERVICETYPE = 12
	//fightrouter
	ERK_SERVICETYPE_ERK_SERVICE_FIGHTROUTER ERK_SERVICETYPE = 13
	//matchmaking
	ERK_SERVICETYPE_ERK_SERVICE_MATCHMAKING ERK_SERVICETYPE = 14
	ERK_SERVICETYPE_ERK_SERVICE_MAX         ERK_SERVICETYPE = 15
)

// Enum value maps for ERK_SERVICETYPE.
var (
	ERK_SERVICETYPE_name = map[int32]string{
		0:  "ERK_SERVICE_NONE",
		1:  "ERK_SERVICE_EUREKA",
		2:  "ERK_SERVICE_RES",
		3:  "ERK_SERVICE_GATE",
		4:  "ERK_SERVICE_HOME",
		5:  "ERK_SERVICE_LOGIN",
		6:  "ERK_SERVICE_UNION",
		7:  "ERK_SERVICE_GAME",
		8:  "ERK_SERVICE_DATASYNC",
		9:  "ERK_SERVICE_ROUTER",
		10: "ERK_SERVICE_CHAT",
		11: "ERK_SERVICE_MAIL",
		12: "ERK_SERVICE_FRIEND",
		13: "ERK_SERVICE_FIGHTROUTER",
		14: "ERK_SERVICE_MATCHMAKING",
		15: "ERK_SERVICE_MAX",
	}
	ERK_SERVICETYPE_value = map[string]int32{
		"ERK_SERVICE_NONE":        0,
		"ERK_SERVICE_EUREKA":      1,
		"ERK_SERVICE_RES":         2,
		"ERK_SERVICE_GATE":        3,
		"ERK_SERVICE_HOME":        4,
		"ERK_SERVICE_LOGIN":       5,
		"ERK_SERVICE_UNION":       6,
		"ERK_SERVICE_GAME":        7,
		"ERK_SERVICE_DATASYNC":    8,
		"ERK_SERVICE_ROUTER":      9,
		"ERK_SERVICE_CHAT":        10,
		"ERK_SERVICE_MAIL":        11,
		"ERK_SERVICE_FRIEND":      12,
		"ERK_SERVICE_FIGHTROUTER": 13,
		"ERK_SERVICE_MATCHMAKING": 14,
		"ERK_SERVICE_MAX":         15,
	}
)

func (x ERK_SERVICETYPE) Enum() *ERK_SERVICETYPE {
	p := new(ERK_SERVICETYPE)
	*p = x
	return p
}

func (x ERK_SERVICETYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERK_SERVICETYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_eureka_internal_proto_enumTypes[0].Descriptor()
}

func (ERK_SERVICETYPE) Type() protoreflect.EnumType {
	return &file_eureka_internal_proto_enumTypes[0]
}

func (x ERK_SERVICETYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ERK_SERVICETYPE.Descriptor instead.
func (ERK_SERVICETYPE) EnumDescriptor() ([]byte, []int) {
	return file_eureka_internal_proto_rawDescGZIP(), []int{0}
}

//eureka server node info
type EurekaServerNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//服务器sn
	Iid int64 `protobuf:"varint,1,opt,name=iid,proto3" json:"iid,omitempty"`
	//对方token，用于验证
	Token int64 `protobuf:"varint,2,opt,name=token,proto3" json:"token,omitempty"`
	//动态ip
	Ip string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	//服务器port
	Port int32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *EurekaServerNode) Reset() {
	*x = EurekaServerNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_internal_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EurekaServerNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EurekaServerNode) ProtoMessage() {}

func (x *EurekaServerNode) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_internal_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EurekaServerNode.ProtoReflect.Descriptor instead.
func (*EurekaServerNode) Descriptor() ([]byte, []int) {
	return file_eureka_internal_proto_rawDescGZIP(), []int{0}
}

func (x *EurekaServerNode) GetIid() int64 {
	if x != nil {
		return x.Iid
	}
	return 0
}

func (x *EurekaServerNode) GetToken() int64 {
	if x != nil {
		return x.Token
	}
	return 0
}

func (x *EurekaServerNode) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *EurekaServerNode) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

//Eureka服务器相互绑定
type Erk_EurekaBindReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//我的iid
	Iid int64 `protobuf:"varint,1,opt,name=iid,proto3" json:"iid,omitempty"`
	//我的token，用于验证
	Token int64 `protobuf:"varint,2,opt,name=token,proto3" json:"token,omitempty"`
	//动态ip
	Ip string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	//服务器port
	Port int32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *Erk_EurekaBindReq) Reset() {
	*x = Erk_EurekaBindReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_internal_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Erk_EurekaBindReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Erk_EurekaBindReq) ProtoMessage() {}

func (x *Erk_EurekaBindReq) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_internal_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Erk_EurekaBindReq.ProtoReflect.Descriptor instead.
func (*Erk_EurekaBindReq) Descriptor() ([]byte, []int) {
	return file_eureka_internal_proto_rawDescGZIP(), []int{1}
}

func (x *Erk_EurekaBindReq) GetIid() int64 {
	if x != nil {
		return x.Iid
	}
	return 0
}

func (x *Erk_EurekaBindReq) GetToken() int64 {
	if x != nil {
		return x.Token
	}
	return 0
}

func (x *Erk_EurekaBindReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Erk_EurekaBindReq) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type Erk_EurekaBindAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//0:成功 1:失
	Result int32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *Erk_EurekaBindAck) Reset() {
	*x = Erk_EurekaBindAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_internal_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Erk_EurekaBindAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Erk_EurekaBindAck) ProtoMessage() {}

func (x *Erk_EurekaBindAck) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_internal_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Erk_EurekaBindAck.ProtoReflect.Descriptor instead.
func (*Erk_EurekaBindAck) Descriptor() ([]byte, []int) {
	return file_eureka_internal_proto_rawDescGZIP(), []int{2}
}

func (x *Erk_EurekaBindAck) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

//通知其他服务eureka服务上线或下线
type Erk_EurekaUpdateNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//请求方iid
	Myiid int64 `protobuf:"varint,1,opt,name=myiid,proto3" json:"myiid,omitempty"`
	//上线的服务
	Online []*EurekaServerNode `protobuf:"bytes,2,rep,name=online,proto3" json:"online,omitempty"`
	//下线的服务iid
	Offline []int64 `protobuf:"varint,3,rep,packed,name=offline,proto3" json:"offline,omitempty"`
}

func (x *Erk_EurekaUpdateNtf) Reset() {
	*x = Erk_EurekaUpdateNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_internal_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Erk_EurekaUpdateNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Erk_EurekaUpdateNtf) ProtoMessage() {}

func (x *Erk_EurekaUpdateNtf) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_internal_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Erk_EurekaUpdateNtf.ProtoReflect.Descriptor instead.
func (*Erk_EurekaUpdateNtf) Descriptor() ([]byte, []int) {
	return file_eureka_internal_proto_rawDescGZIP(), []int{3}
}

func (x *Erk_EurekaUpdateNtf) GetMyiid() int64 {
	if x != nil {
		return x.Myiid
	}
	return 0
}

func (x *Erk_EurekaUpdateNtf) GetOnline() []*EurekaServerNode {
	if x != nil {
		return x.Online
	}
	return nil
}

func (x *Erk_EurekaUpdateNtf) GetOffline() []int64 {
	if x != nil {
		return x.Offline
	}
	return nil
}

//其他服务和eureka服务的同步请求
type Erk_EurekaSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//请求方iid
	Myiid int64 `protobuf:"varint,1,opt,name=myiid,proto3" json:"myiid,omitempty"`
	//存在的eureka服务
	Exists []int64 `protobuf:"varint,2,rep,packed,name=exists,proto3" json:"exists,omitempty"`
}

func (x *Erk_EurekaSync) Reset() {
	*x = Erk_EurekaSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_internal_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Erk_EurekaSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Erk_EurekaSync) ProtoMessage() {}

func (x *Erk_EurekaSync) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_internal_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Erk_EurekaSync.ProtoReflect.Descriptor instead.
func (*Erk_EurekaSync) Descriptor() ([]byte, []int) {
	return file_eureka_internal_proto_rawDescGZIP(), []int{4}
}

func (x *Erk_EurekaSync) GetMyiid() int64 {
	if x != nil {
		return x.Myiid
	}
	return 0
}

func (x *Erk_EurekaSync) GetExists() []int64 {
	if x != nil {
		return x.Exists
	}
	return nil
}

//server node info
type ServerNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//服务器sn
	Iid int64 `protobuf:"varint,1,opt,name=iid,proto3" json:"iid,omitempty"`
	//对方token，用于验证
	Token int64 `protobuf:"varint,2,opt,name=token,proto3" json:"token,omitempty"`
	//动态ip
	Ip string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	//服务器port
	Port int32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	//扩展信息
	Exts map[string]string `protobuf:"bytes,5,rep,name=exts,proto3" json:"exts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ServerNode) Reset() {
	*x = ServerNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_internal_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerNode) ProtoMessage() {}

func (x *ServerNode) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_internal_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerNode.ProtoReflect.Descriptor instead.
func (*ServerNode) Descriptor() ([]byte, []int) {
	return file_eureka_internal_proto_rawDescGZIP(), []int{5}
}

func (x *ServerNode) GetIid() int64 {
	if x != nil {
		return x.Iid
	}
	return 0
}

func (x *ServerNode) GetToken() int64 {
	if x != nil {
		return x.Token
	}
	return 0
}

func (x *ServerNode) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *ServerNode) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ServerNode) GetExts() map[string]string {
	if x != nil {
		return x.Exts
	}
	return nil
}

//其他服务向eureka注册中心，注册服务
type Erk_ServiceRegistReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//服务器类型 NETSVR_TYPE_ENUM定义
	SvrType int32  `protobuf:"varint,1,opt,name=svr_type,json=svrType,proto3" json:"svr_type,omitempty"`
	Ip      string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Port    int32  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	//扩展信息
	Exts map[string]string `protobuf:"bytes,4,rep,name=exts,proto3" json:"exts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Erk_ServiceRegistReq) Reset() {
	*x = Erk_ServiceRegistReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_internal_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Erk_ServiceRegistReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Erk_ServiceRegistReq) ProtoMessage() {}

func (x *Erk_ServiceRegistReq) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_internal_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Erk_ServiceRegistReq.ProtoReflect.Descriptor instead.
func (*Erk_ServiceRegistReq) Descriptor() ([]byte, []int) {
	return file_eureka_internal_proto_rawDescGZIP(), []int{6}
}

func (x *Erk_ServiceRegistReq) GetSvrType() int32 {
	if x != nil {
		return x.SvrType
	}
	return 0
}

func (x *Erk_ServiceRegistReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Erk_ServiceRegistReq) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Erk_ServiceRegistReq) GetExts() map[string]string {
	if x != nil {
		return x.Exts
	}
	return nil
}

type Erk_ServiceRegistAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//0:成功 1:失败
	Result int32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	//service编号，由eureka保证唯一
	Iid   *int64 `protobuf:"varint,2,opt,name=iid,proto3,oneof" json:"iid,omitempty"`
	Token *int64 `protobuf:"varint,3,opt,name=token,proto3,oneof" json:"token,omitempty"`
	//eureka iid
	Eurekaiid   *int64 `protobuf:"varint,4,opt,name=eurekaiid,proto3,oneof" json:"eurekaiid,omitempty"`
	Eurekatoken *int64 `protobuf:"varint,5,opt,name=eurekatoken,proto3,oneof" json:"eurekatoken,omitempty"`
}

func (x *Erk_ServiceRegistAck) Reset() {
	*x = Erk_ServiceRegistAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_internal_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Erk_ServiceRegistAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Erk_ServiceRegistAck) ProtoMessage() {}

func (x *Erk_ServiceRegistAck) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_internal_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Erk_ServiceRegistAck.ProtoReflect.Descriptor instead.
func (*Erk_ServiceRegistAck) Descriptor() ([]byte, []int) {
	return file_eureka_internal_proto_rawDescGZIP(), []int{7}
}

func (x *Erk_ServiceRegistAck) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *Erk_ServiceRegistAck) GetIid() int64 {
	if x != nil && x.Iid != nil {
		return *x.Iid
	}
	return 0
}

func (x *Erk_ServiceRegistAck) GetToken() int64 {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return 0
}

func (x *Erk_ServiceRegistAck) GetEurekaiid() int64 {
	if x != nil && x.Eurekaiid != nil {
		return *x.Eurekaiid
	}
	return 0
}

func (x *Erk_ServiceRegistAck) GetEurekatoken() int64 {
	if x != nil && x.Eurekatoken != nil {
		return *x.Eurekatoken
	}
	return 0
}

//注册service再次确认
type Erk_ServiceRegist_Confirm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iid   int64 `protobuf:"varint,1,opt,name=iid,proto3" json:"iid,omitempty"`
	Token int64 `protobuf:"varint,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *Erk_ServiceRegist_Confirm) Reset() {
	*x = Erk_ServiceRegist_Confirm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_internal_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Erk_ServiceRegist_Confirm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Erk_ServiceRegist_Confirm) ProtoMessage() {}

func (x *Erk_ServiceRegist_Confirm) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_internal_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Erk_ServiceRegist_Confirm.ProtoReflect.Descriptor instead.
func (*Erk_ServiceRegist_Confirm) Descriptor() ([]byte, []int) {
	return file_eureka_internal_proto_rawDescGZIP(), []int{8}
}

func (x *Erk_ServiceRegist_Confirm) GetIid() int64 {
	if x != nil {
		return x.Iid
	}
	return 0
}

func (x *Erk_ServiceRegist_Confirm) GetToken() int64 {
	if x != nil {
		return x.Token
	}
	return 0
}

//其他服务向eureka注册中心，注册服务
type Erk_ServiceBindReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//服务器类型 NETSVR_TYPE_ENUM定义
	SvrType int32 `protobuf:"varint,1,opt,name=svr_type,json=svrType,proto3" json:"svr_type,omitempty"`
	//service编号，由eureka保证唯一
	Iid   int64 `protobuf:"varint,2,opt,name=iid,proto3" json:"iid,omitempty"`
	Token int64 `protobuf:"varint,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *Erk_ServiceBindReq) Reset() {
	*x = Erk_ServiceBindReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_internal_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Erk_ServiceBindReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Erk_ServiceBindReq) ProtoMessage() {}

func (x *Erk_ServiceBindReq) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_internal_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Erk_ServiceBindReq.ProtoReflect.Descriptor instead.
func (*Erk_ServiceBindReq) Descriptor() ([]byte, []int) {
	return file_eureka_internal_proto_rawDescGZIP(), []int{9}
}

func (x *Erk_ServiceBindReq) GetSvrType() int32 {
	if x != nil {
		return x.SvrType
	}
	return 0
}

func (x *Erk_ServiceBindReq) GetIid() int64 {
	if x != nil {
		return x.Iid
	}
	return 0
}

func (x *Erk_ServiceBindReq) GetToken() int64 {
	if x != nil {
		return x.Token
	}
	return 0
}

type Erk_ServiceBindAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//0:成功 1:失败
	Result int32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *Erk_ServiceBindAck) Reset() {
	*x = Erk_ServiceBindAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_internal_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Erk_ServiceBindAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Erk_ServiceBindAck) ProtoMessage() {}

func (x *Erk_ServiceBindAck) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_internal_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Erk_ServiceBindAck.ProtoReflect.Descriptor instead.
func (*Erk_ServiceBindAck) Descriptor() ([]byte, []int) {
	return file_eureka_internal_proto_rawDescGZIP(), []int{10}
}

func (x *Erk_ServiceBindAck) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

//其他服务向eureka注册中心，订阅服务信息
type Erk_ServiceSubscribeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//请求方iid
	Myiid int64 `protobuf:"varint,1,opt,name=myiid,proto3" json:"myiid,omitempty"`
	//请求放服务类型
	Mysvrtype int32 `protobuf:"varint,2,opt,name=mysvrtype,proto3" json:"mysvrtype,omitempty"`
	//ip port方便过滤算法
	Myip   string `protobuf:"bytes,3,opt,name=myip,proto3" json:"myip,omitempty"`
	Myport int32  `protobuf:"varint,4,opt,name=myport,proto3" json:"myport,omitempty"`
	//服务器类型 NETSVR_TYPE_ENUM定义
	SvrType []*Erk_ServiceSubscribeReqSvrinfo `protobuf:"bytes,5,rep,name=svr_type,json=svrType,proto3" json:"svr_type,omitempty"`
}

func (x *Erk_ServiceSubscribeReq) Reset() {
	*x = Erk_ServiceSubscribeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_internal_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Erk_ServiceSubscribeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Erk_ServiceSubscribeReq) ProtoMessage() {}

func (x *Erk_ServiceSubscribeReq) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_internal_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Erk_ServiceSubscribeReq.ProtoReflect.Descriptor instead.
func (*Erk_ServiceSubscribeReq) Descriptor() ([]byte, []int) {
	return file_eureka_internal_proto_rawDescGZIP(), []int{11}
}

func (x *Erk_ServiceSubscribeReq) GetMyiid() int64 {
	if x != nil {
		return x.Myiid
	}
	return 0
}

func (x *Erk_ServiceSubscribeReq) GetMysvrtype() int32 {
	if x != nil {
		return x.Mysvrtype
	}
	return 0
}

func (x *Erk_ServiceSubscribeReq) GetMyip() string {
	if x != nil {
		return x.Myip
	}
	return ""
}

func (x *Erk_ServiceSubscribeReq) GetMyport() int32 {
	if x != nil {
		return x.Myport
	}
	return 0
}

func (x *Erk_ServiceSubscribeReq) GetSvrType() []*Erk_ServiceSubscribeReqSvrinfo {
	if x != nil {
		return x.SvrType
	}
	return nil
}

type Erk_ServiceSubscribeAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//请求方iid
	Myiid int64 `protobuf:"varint,1,opt,name=myiid,proto3" json:"myiid,omitempty"`
	//服务器类型 NETSVR_TYPE_ENUM定义
	SvrType int32 `protobuf:"varint,2,opt,name=svr_type,json=svrType,proto3" json:"svr_type,omitempty"`
	//新上线的服务
	Online []*ServerNode `protobuf:"bytes,3,rep,name=online,proto3" json:"online,omitempty"`
	//下线的服务
	Offline []int64 `protobuf:"varint,4,rep,packed,name=offline,proto3" json:"offline,omitempty"`
}

func (x *Erk_ServiceSubscribeAck) Reset() {
	*x = Erk_ServiceSubscribeAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_internal_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Erk_ServiceSubscribeAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Erk_ServiceSubscribeAck) ProtoMessage() {}

func (x *Erk_ServiceSubscribeAck) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_internal_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Erk_ServiceSubscribeAck.ProtoReflect.Descriptor instead.
func (*Erk_ServiceSubscribeAck) Descriptor() ([]byte, []int) {
	return file_eureka_internal_proto_rawDescGZIP(), []int{12}
}

func (x *Erk_ServiceSubscribeAck) GetMyiid() int64 {
	if x != nil {
		return x.Myiid
	}
	return 0
}

func (x *Erk_ServiceSubscribeAck) GetSvrType() int32 {
	if x != nil {
		return x.SvrType
	}
	return 0
}

func (x *Erk_ServiceSubscribeAck) GetOnline() []*ServerNode {
	if x != nil {
		return x.Online
	}
	return nil
}

func (x *Erk_ServiceSubscribeAck) GetOffline() []int64 {
	if x != nil {
		return x.Offline
	}
	return nil
}

//服务下线通知
type Erk_ServiceShutdownNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//下线的服务
	SvrType int32 `protobuf:"varint,1,opt,name=svr_type,json=svrType,proto3" json:"svr_type,omitempty"`
	Service int64 `protobuf:"varint,2,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *Erk_ServiceShutdownNtf) Reset() {
	*x = Erk_ServiceShutdownNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_internal_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Erk_ServiceShutdownNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Erk_ServiceShutdownNtf) ProtoMessage() {}

func (x *Erk_ServiceShutdownNtf) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_internal_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Erk_ServiceShutdownNtf.ProtoReflect.Descriptor instead.
func (*Erk_ServiceShutdownNtf) Descriptor() ([]byte, []int) {
	return file_eureka_internal_proto_rawDescGZIP(), []int{13}
}

func (x *Erk_ServiceShutdownNtf) GetSvrType() int32 {
	if x != nil {
		return x.SvrType
	}
	return 0
}

func (x *Erk_ServiceShutdownNtf) GetService() int64 {
	if x != nil {
		return x.Service
	}
	return 0
}

type Svr_LiveTickNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Svr_LiveTickNtf) Reset() {
	*x = Svr_LiveTickNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_internal_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Svr_LiveTickNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Svr_LiveTickNtf) ProtoMessage() {}

func (x *Svr_LiveTickNtf) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_internal_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Svr_LiveTickNtf.ProtoReflect.Descriptor instead.
func (*Svr_LiveTickNtf) Descriptor() ([]byte, []int) {
	return file_eureka_internal_proto_rawDescGZIP(), []int{14}
}

//服务之间相互注册
type Svr_ServiceBindServiceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//服务器类型 NETSVR_TYPE_ENUM定义
	SvrType int32 `protobuf:"varint,1,opt,name=svr_type,json=svrType,proto3" json:"svr_type,omitempty"`
	//请求方service编号
	Myiid   int64 `protobuf:"varint,2,opt,name=myiid,proto3" json:"myiid,omitempty"`
	Mytoken int64 `protobuf:"varint,3,opt,name=mytoken,proto3" json:"mytoken,omitempty"`
	//扩展信息
	Myexts map[string]string `protobuf:"bytes,4,rep,name=myexts,proto3" json:"myexts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//被请求方service编号
	Toiid   int64 `protobuf:"varint,10,opt,name=toiid,proto3" json:"toiid,omitempty"`
	Totoken int64 `protobuf:"varint,11,opt,name=totoken,proto3" json:"totoken,omitempty"`
}

func (x *Svr_ServiceBindServiceReq) Reset() {
	*x = Svr_ServiceBindServiceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_internal_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Svr_ServiceBindServiceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Svr_ServiceBindServiceReq) ProtoMessage() {}

func (x *Svr_ServiceBindServiceReq) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_internal_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Svr_ServiceBindServiceReq.ProtoReflect.Descriptor instead.
func (*Svr_ServiceBindServiceReq) Descriptor() ([]byte, []int) {
	return file_eureka_internal_proto_rawDescGZIP(), []int{15}
}

func (x *Svr_ServiceBindServiceReq) GetSvrType() int32 {
	if x != nil {
		return x.SvrType
	}
	return 0
}

func (x *Svr_ServiceBindServiceReq) GetMyiid() int64 {
	if x != nil {
		return x.Myiid
	}
	return 0
}

func (x *Svr_ServiceBindServiceReq) GetMytoken() int64 {
	if x != nil {
		return x.Mytoken
	}
	return 0
}

func (x *Svr_ServiceBindServiceReq) GetMyexts() map[string]string {
	if x != nil {
		return x.Myexts
	}
	return nil
}

func (x *Svr_ServiceBindServiceReq) GetToiid() int64 {
	if x != nil {
		return x.Toiid
	}
	return 0
}

func (x *Svr_ServiceBindServiceReq) GetTotoken() int64 {
	if x != nil {
		return x.Totoken
	}
	return 0
}

type Svr_ServiceBindServiceAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//0:成功 1:失败
	Result int32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	//服务器类型 NETSVR_TYPE_ENUM定义
	SvrType int32 `protobuf:"varint,2,opt,name=svr_type,json=svrType,proto3" json:"svr_type,omitempty"`
	//被请求方service编号
	Toiid   int64 `protobuf:"varint,3,opt,name=toiid,proto3" json:"toiid,omitempty"`
	Totoken int64 `protobuf:"varint,4,opt,name=totoken,proto3" json:"totoken,omitempty"`
}

func (x *Svr_ServiceBindServiceAck) Reset() {
	*x = Svr_ServiceBindServiceAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_internal_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Svr_ServiceBindServiceAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Svr_ServiceBindServiceAck) ProtoMessage() {}

func (x *Svr_ServiceBindServiceAck) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_internal_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Svr_ServiceBindServiceAck.ProtoReflect.Descriptor instead.
func (*Svr_ServiceBindServiceAck) Descriptor() ([]byte, []int) {
	return file_eureka_internal_proto_rawDescGZIP(), []int{16}
}

func (x *Svr_ServiceBindServiceAck) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *Svr_ServiceBindServiceAck) GetSvrType() int32 {
	if x != nil {
		return x.SvrType
	}
	return 0
}

func (x *Svr_ServiceBindServiceAck) GetToiid() int64 {
	if x != nil {
		return x.Toiid
	}
	return 0
}

func (x *Svr_ServiceBindServiceAck) GetTotoken() int64 {
	if x != nil {
		return x.Totoken
	}
	return 0
}

//gate请求home资源绑定
type Svr_GateBindHomeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gateiid   int64 `protobuf:"varint,1,opt,name=gateiid,proto3" json:"gateiid,omitempty"`
	Gatetoken int64 `protobuf:"varint,2,opt,name=gatetoken,proto3" json:"gatetoken,omitempty"`
}

func (x *Svr_GateBindHomeReq) Reset() {
	*x = Svr_GateBindHomeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_internal_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Svr_GateBindHomeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Svr_GateBindHomeReq) ProtoMessage() {}

func (x *Svr_GateBindHomeReq) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_internal_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Svr_GateBindHomeReq.ProtoReflect.Descriptor instead.
func (*Svr_GateBindHomeReq) Descriptor() ([]byte, []int) {
	return file_eureka_internal_proto_rawDescGZIP(), []int{17}
}

func (x *Svr_GateBindHomeReq) GetGateiid() int64 {
	if x != nil {
		return x.Gateiid
	}
	return 0
}

func (x *Svr_GateBindHomeReq) GetGatetoken() int64 {
	if x != nil {
		return x.Gatetoken
	}
	return 0
}

type Svr_GateBindHomeAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//0:成功 1:没有资源可以绑定 2:已经完成绑定
	Result  int32  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Gateiid *int64 `protobuf:"varint,2,opt,name=gateiid,proto3,oneof" json:"gateiid,omitempty"`
	//绑定的home信息
	Homeiid   *int64  `protobuf:"varint,3,opt,name=homeiid,proto3,oneof" json:"homeiid,omitempty"`
	Hometoken *int64  `protobuf:"varint,4,opt,name=hometoken,proto3,oneof" json:"hometoken,omitempty"`
	Homeip    *string `protobuf:"bytes,5,opt,name=homeip,proto3,oneof" json:"homeip,omitempty"`
	Homeport  *int32  `protobuf:"varint,6,opt,name=homeport,proto3,oneof" json:"homeport,omitempty"`
	//这次绑定的token用来确认验证
	Bindtoken *int64 `protobuf:"varint,7,opt,name=bindtoken,proto3,oneof" json:"bindtoken,omitempty"`
}

func (x *Svr_GateBindHomeAck) Reset() {
	*x = Svr_GateBindHomeAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_internal_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Svr_GateBindHomeAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Svr_GateBindHomeAck) ProtoMessage() {}

func (x *Svr_GateBindHomeAck) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_internal_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Svr_GateBindHomeAck.ProtoReflect.Descriptor instead.
func (*Svr_GateBindHomeAck) Descriptor() ([]byte, []int) {
	return file_eureka_internal_proto_rawDescGZIP(), []int{18}
}

func (x *Svr_GateBindHomeAck) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *Svr_GateBindHomeAck) GetGateiid() int64 {
	if x != nil && x.Gateiid != nil {
		return *x.Gateiid
	}
	return 0
}

func (x *Svr_GateBindHomeAck) GetHomeiid() int64 {
	if x != nil && x.Homeiid != nil {
		return *x.Homeiid
	}
	return 0
}

func (x *Svr_GateBindHomeAck) GetHometoken() int64 {
	if x != nil && x.Hometoken != nil {
		return *x.Hometoken
	}
	return 0
}

func (x *Svr_GateBindHomeAck) GetHomeip() string {
	if x != nil && x.Homeip != nil {
		return *x.Homeip
	}
	return ""
}

func (x *Svr_GateBindHomeAck) GetHomeport() int32 {
	if x != nil && x.Homeport != nil {
		return *x.Homeport
	}
	return 0
}

func (x *Svr_GateBindHomeAck) GetBindtoken() int64 {
	if x != nil && x.Bindtoken != nil {
		return *x.Bindtoken
	}
	return 0
}

type Svr_GateBindHomeConfirm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gateiid int64 `protobuf:"varint,1,opt,name=gateiid,proto3" json:"gateiid,omitempty"`
	//绑定的home信息
	Homeiid int64 `protobuf:"varint,2,opt,name=homeiid,proto3" json:"homeiid,omitempty"`
	//hometoken在经过home服务时填写
	Hometoken int64 `protobuf:"varint,3,opt,name=hometoken,proto3" json:"hometoken,omitempty"`
	//这次绑定的token用来确认验证
	Bindtoken int64 `protobuf:"varint,4,opt,name=bindtoken,proto3" json:"bindtoken,omitempty"`
}

func (x *Svr_GateBindHomeConfirm) Reset() {
	*x = Svr_GateBindHomeConfirm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_internal_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Svr_GateBindHomeConfirm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Svr_GateBindHomeConfirm) ProtoMessage() {}

func (x *Svr_GateBindHomeConfirm) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_internal_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Svr_GateBindHomeConfirm.ProtoReflect.Descriptor instead.
func (*Svr_GateBindHomeConfirm) Descriptor() ([]byte, []int) {
	return file_eureka_internal_proto_rawDescGZIP(), []int{19}
}

func (x *Svr_GateBindHomeConfirm) GetGateiid() int64 {
	if x != nil {
		return x.Gateiid
	}
	return 0
}

func (x *Svr_GateBindHomeConfirm) GetHomeiid() int64 {
	if x != nil {
		return x.Homeiid
	}
	return 0
}

func (x *Svr_GateBindHomeConfirm) GetHometoken() int64 {
	if x != nil {
		return x.Hometoken
	}
	return 0
}

func (x *Svr_GateBindHomeConfirm) GetBindtoken() int64 {
	if x != nil {
		return x.Bindtoken
	}
	return 0
}

type Erk_ServiceSubscribeReqSvrinfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//订阅类型
	SvrType int32 `protobuf:"varint,1,opt,name=svr_type,json=svrType,proto3" json:"svr_type,omitempty"`
	//已经存在的服务
	Exits []int64 `protobuf:"varint,2,rep,packed,name=exits,proto3" json:"exits,omitempty"`
}

func (x *Erk_ServiceSubscribeReqSvrinfo) Reset() {
	*x = Erk_ServiceSubscribeReqSvrinfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_internal_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Erk_ServiceSubscribeReqSvrinfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Erk_ServiceSubscribeReqSvrinfo) ProtoMessage() {}

func (x *Erk_ServiceSubscribeReqSvrinfo) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_internal_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Erk_ServiceSubscribeReqSvrinfo.ProtoReflect.Descriptor instead.
func (*Erk_ServiceSubscribeReqSvrinfo) Descriptor() ([]byte, []int) {
	return file_eureka_internal_proto_rawDescGZIP(), []int{11, 0}
}

func (x *Erk_ServiceSubscribeReqSvrinfo) GetSvrType() int32 {
	if x != nil {
		return x.SvrType
	}
	return 0
}

func (x *Erk_ServiceSubscribeReqSvrinfo) GetExits() []int64 {
	if x != nil {
		return x.Exits
	}
	return nil
}

var File_eureka_internal_proto protoreflect.FileDescriptor

var file_eureka_internal_proto_rawDesc = []byte{
	0x0a, 0x15, 0x65, 0x75, 0x72, 0x65, 0x6b, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x50, 0x52, 0x4f, 0x22, 0x5e, 0x0a, 0x10,
	0x45, 0x75, 0x72, 0x65, 0x6b, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x69,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x60, 0x0a, 0x12,
	0x45, 0x72, 0x6b, 0x5f, 0x45, 0x75, 0x72, 0x65, 0x6b, 0x61, 0x42, 0x69, 0x6e, 0x64, 0x5f, 0x72,
	0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x69, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x2c,
	0x0a, 0x12, 0x45, 0x72, 0x6b, 0x5f, 0x45, 0x75, 0x72, 0x65, 0x6b, 0x61, 0x42, 0x69, 0x6e, 0x64,
	0x5f, 0x61, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x75, 0x0a, 0x14,
	0x45, 0x72, 0x6b, 0x5f, 0x45, 0x75, 0x72, 0x65, 0x6b, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6e, 0x74, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x79, 0x69, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x79, 0x69, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x52, 0x4f,
	0x2e, 0x45, 0x75, 0x72, 0x65, 0x6b, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x22, 0x3f, 0x0a, 0x0f, 0x45, 0x72, 0x6b, 0x5f, 0x45, 0x75, 0x72, 0x65, 0x6b,
	0x61, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x79, 0x69, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x79, 0x69, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x69, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x2d, 0x0a, 0x04, 0x65, 0x78, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x50, 0x52, 0x4f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x65, 0x78, 0x74, 0x73, 0x1a, 0x37,
	0x0a, 0x09, 0x45, 0x78, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc9, 0x01, 0x0a, 0x15, 0x45, 0x72, 0x6b, 0x5f,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x71, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x76, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x76, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x38, 0x0a, 0x04, 0x65, 0x78, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x50, 0x52, 0x4f, 0x2e, 0x45, 0x72, 0x6b, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x2e, 0x45, 0x78, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x65, 0x78, 0x74, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x45, 0x78,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xdb, 0x01, 0x0a, 0x15, 0x45, 0x72, 0x6b, 0x5f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x6b, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a, 0x03, 0x69, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x00, 0x52, 0x03, 0x69, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x65, 0x75, 0x72, 0x65, 0x6b,
	0x61, 0x69, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x09, 0x65, 0x75,
	0x72, 0x65, 0x6b, 0x61, 0x69, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x65, 0x75,
	0x72, 0x65, 0x6b, 0x61, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x03, 0x52, 0x0b, 0x65, 0x75, 0x72, 0x65, 0x6b, 0x61, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01,
	0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x69, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x75, 0x72, 0x65, 0x6b, 0x61, 0x69, 0x69,
	0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x75, 0x72, 0x65, 0x6b, 0x61, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x43, 0x0a, 0x19, 0x45, 0x72, 0x6b, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x69, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x58, 0x0a, 0x13, 0x45, 0x72, 0x6b, 0x5f, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x76, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x73, 0x76, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x69, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x2d, 0x0a, 0x13, 0x45, 0x72, 0x6b, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42,
	0x69, 0x6e, 0x64, 0x5f, 0x61, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xf8, 0x01, 0x0a, 0x18, 0x45, 0x72, 0x6b, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x79, 0x69, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x79, 0x69,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x79, 0x73, 0x76, 0x72, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x79, 0x73, 0x76, 0x72, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x79, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x79, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x79, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x79, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x40, 0x0a, 0x08,
	0x73, 0x76, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x50, 0x52, 0x4f, 0x2e, 0x45, 0x72, 0x6b, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x2e, 0x73, 0x76,
	0x72, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73, 0x76, 0x72, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x3a,
	0x0a, 0x07, 0x73, 0x76, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x76, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x76, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x05, 0x65, 0x78, 0x69, 0x74, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x18, 0x45,
	0x72, 0x6b, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x5f, 0x61, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x79, 0x69, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x79, 0x69, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x76, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x73, 0x76, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x52, 0x4f, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x4e, 0x0a, 0x17, 0x45,
	0x72, 0x6b, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x5f, 0x6e, 0x74, 0x66, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x76, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x76, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x53,
	0x76, 0x72, 0x5f, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x74, 0x66, 0x22,
	0x97, 0x02, 0x0a, 0x1a, 0x53, 0x76, 0x72, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42,
	0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x76, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x73, 0x76, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x79, 0x69,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x79, 0x69, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x79, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x6d, 0x79, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x43, 0x0a, 0x06, 0x6d, 0x79, 0x65,
	0x78, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x50, 0x52, 0x4f, 0x2e,
	0x53, 0x76, 0x72, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x2e, 0x4d, 0x79, 0x65, 0x78, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x79, 0x65, 0x78, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x69, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x69, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x6f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x39,
	0x0a, 0x0b, 0x4d, 0x79, 0x65, 0x78, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7f, 0x0a, 0x1a, 0x53, 0x76, 0x72,
	0x5f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x76, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x73, 0x76, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x69, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x69, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x74, 0x6f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4e, 0x0a, 0x14, 0x53, 0x76,
	0x72, 0x5f, 0x47, 0x61, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x48, 0x6f, 0x6d, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x69, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x69, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x67, 0x61, 0x74, 0x65, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x67, 0x61, 0x74, 0x65, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xbc, 0x02, 0x0a, 0x14, 0x53,
	0x76, 0x72, 0x5f, 0x47, 0x61, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x48, 0x6f, 0x6d, 0x65, 0x5f,
	0x61, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x67,
	0x61, 0x74, 0x65, 0x69, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x07,
	0x67, 0x61, 0x74, 0x65, 0x69, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x68, 0x6f,
	0x6d, 0x65, 0x69, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x07, 0x68,
	0x6f, 0x6d, 0x65, 0x69, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x68, 0x6f, 0x6d,
	0x65, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x09,
	0x68, 0x6f, 0x6d, 0x65, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x68, 0x6f, 0x6d, 0x65, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06,
	0x68, 0x6f, 0x6d, 0x65, 0x69, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x68, 0x6f, 0x6d,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x08, 0x68,
	0x6f, 0x6d, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x62, 0x69,
	0x6e, 0x64, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52,
	0x09, 0x62, 0x69, 0x6e, 0x64, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x69, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x68, 0x6f,
	0x6d, 0x65, 0x69, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x69, 0x70, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x62, 0x69, 0x6e, 0x64, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8a, 0x01, 0x0a, 0x18, 0x53, 0x76,
	0x72, 0x5f, 0x47, 0x61, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x48, 0x6f, 0x6d, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x69, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x69, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x68, 0x6f, 0x6d, 0x65, 0x69, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x68, 0x6f, 0x6d, 0x65, 0x69, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f,
	0x6d, 0x65, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68,
	0x6f, 0x6d, 0x65, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69, 0x6e, 0x64,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x69, 0x6e,
	0x64, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2a, 0x89, 0x03, 0x0a, 0x0f, 0x45, 0x52, 0x4b, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x52,
	0x4b, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x4b, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x45, 0x55, 0x52, 0x45, 0x4b, 0x41, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x52, 0x4b, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x52, 0x4b, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x47, 0x41, 0x54,
	0x45, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x52, 0x4b, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x4b,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x05,
	0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x4b, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x55, 0x4e, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x52, 0x4b, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x07, 0x12, 0x18, 0x0a,
	0x14, 0x45, 0x52, 0x4b, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x4b, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x09, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x52, 0x4b, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x54, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x52, 0x4b, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x45,
	0x52, 0x4b, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e,
	0x44, 0x10, 0x0c, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x4b, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x46, 0x49, 0x47, 0x48, 0x54, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x0d,
	0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x4b, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x0e, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x52, 0x4b, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x58,
	0x10, 0x0f, 0x42, 0x54, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x67, 0x70, 0x72,
	0x6f, 0x50, 0x01, 0x5a, 0x15, 0x67, 0x61, 0x6d, 0x65, 0x6c, 0x69, 0x62, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x70, 0x72, 0x6f, 0xaa, 0x02, 0x1b, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eureka_internal_proto_rawDescOnce sync.Once
	file_eureka_internal_proto_rawDescData = file_eureka_internal_proto_rawDesc
)

func file_eureka_internal_proto_rawDescGZIP() []byte {
	file_eureka_internal_proto_rawDescOnce.Do(func() {
		file_eureka_internal_proto_rawDescData = protoimpl.X.CompressGZIP(file_eureka_internal_proto_rawDescData)
	})
	return file_eureka_internal_proto_rawDescData
}

var file_eureka_internal_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_eureka_internal_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_eureka_internal_proto_goTypes = []interface{}{
	(ERK_SERVICETYPE)(0),                   // 0: PRO.ERK_SERVICETYPE
	(*EurekaServerNode)(nil),               // 1: PRO.EurekaServerNode
	(*Erk_EurekaBindReq)(nil),              // 2: PRO.Erk_EurekaBind_req
	(*Erk_EurekaBindAck)(nil),              // 3: PRO.Erk_EurekaBind_ack
	(*Erk_EurekaUpdateNtf)(nil),            // 4: PRO.Erk_EurekaUpdate_ntf
	(*Erk_EurekaSync)(nil),                 // 5: PRO.Erk_Eureka_sync
	(*ServerNode)(nil),                     // 6: PRO.ServerNode
	(*Erk_ServiceRegistReq)(nil),           // 7: PRO.Erk_ServiceRegist_req
	(*Erk_ServiceRegistAck)(nil),           // 8: PRO.Erk_ServiceRegist_ack
	(*Erk_ServiceRegist_Confirm)(nil),      // 9: PRO.Erk_ServiceRegist_Confirm
	(*Erk_ServiceBindReq)(nil),             // 10: PRO.Erk_ServiceBind_req
	(*Erk_ServiceBindAck)(nil),             // 11: PRO.Erk_ServiceBind_ack
	(*Erk_ServiceSubscribeReq)(nil),        // 12: PRO.Erk_ServiceSubscribe_req
	(*Erk_ServiceSubscribeAck)(nil),        // 13: PRO.Erk_ServiceSubscribe_ack
	(*Erk_ServiceShutdownNtf)(nil),         // 14: PRO.Erk_ServiceShutdown_ntf
	(*Svr_LiveTickNtf)(nil),                // 15: PRO.Svr_LiveTick_ntf
	(*Svr_ServiceBindServiceReq)(nil),      // 16: PRO.Svr_ServiceBindService_req
	(*Svr_ServiceBindServiceAck)(nil),      // 17: PRO.Svr_ServiceBindService_ack
	(*Svr_GateBindHomeReq)(nil),            // 18: PRO.Svr_GateBindHome_req
	(*Svr_GateBindHomeAck)(nil),            // 19: PRO.Svr_GateBindHome_ack
	(*Svr_GateBindHomeConfirm)(nil),        // 20: PRO.Svr_GateBindHome_confirm
	nil,                                    // 21: PRO.ServerNode.ExtsEntry
	nil,                                    // 22: PRO.Erk_ServiceRegist_req.ExtsEntry
	(*Erk_ServiceSubscribeReqSvrinfo)(nil), // 23: PRO.Erk_ServiceSubscribe_req.svrinfo
	nil,                                    // 24: PRO.Svr_ServiceBindService_req.MyextsEntry
}
var file_eureka_internal_proto_depIdxs = []int32{
	1,  // 0: PRO.Erk_EurekaUpdate_ntf.online:type_name -> PRO.EurekaServerNode
	21, // 1: PRO.ServerNode.exts:type_name -> PRO.ServerNode.ExtsEntry
	22, // 2: PRO.Erk_ServiceRegist_req.exts:type_name -> PRO.Erk_ServiceRegist_req.ExtsEntry
	23, // 3: PRO.Erk_ServiceSubscribe_req.svr_type:type_name -> PRO.Erk_ServiceSubscribe_req.svrinfo
	6,  // 4: PRO.Erk_ServiceSubscribe_ack.online:type_name -> PRO.ServerNode
	24, // 5: PRO.Svr_ServiceBindService_req.myexts:type_name -> PRO.Svr_ServiceBindService_req.MyextsEntry
	6,  // [6:6] is the sub-list for method output_type
	6,  // [6:6] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_eureka_internal_proto_init() }
func file_eureka_internal_proto_init() {
	if File_eureka_internal_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_eureka_internal_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EurekaServerNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_internal_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Erk_EurekaBindReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_internal_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Erk_EurekaBindAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_internal_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Erk_EurekaUpdateNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_internal_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Erk_EurekaSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_internal_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_internal_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Erk_ServiceRegistReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_internal_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Erk_ServiceRegistAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_internal_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Erk_ServiceRegist_Confirm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_internal_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Erk_ServiceBindReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_internal_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Erk_ServiceBindAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_internal_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Erk_ServiceSubscribeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_internal_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Erk_ServiceSubscribeAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_internal_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Erk_ServiceShutdownNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_internal_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Svr_LiveTickNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_internal_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Svr_ServiceBindServiceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_internal_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Svr_ServiceBindServiceAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_internal_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Svr_GateBindHomeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_internal_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Svr_GateBindHomeAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_internal_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Svr_GateBindHomeConfirm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_internal_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Erk_ServiceSubscribeReqSvrinfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_eureka_internal_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_eureka_internal_proto_msgTypes[18].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eureka_internal_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eureka_internal_proto_goTypes,
		DependencyIndexes: file_eureka_internal_proto_depIdxs,
		EnumInfos:         file_eureka_internal_proto_enumTypes,
		MessageInfos:      file_eureka_internal_proto_msgTypes,
	}.Build()
	File_eureka_internal_proto = out.File
	file_eureka_internal_proto_rawDesc = nil
	file_eureka_internal_proto_goTypes = nil
	file_eureka_internal_proto_depIdxs = nil
}

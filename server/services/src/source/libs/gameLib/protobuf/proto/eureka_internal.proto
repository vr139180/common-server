syntax = "proto3";

package PRO;

//option optimize_for = LITE_RUNTIME;
option go_package = "gamelib/protobuf/gpro";
option csharp_namespace = "com.cms.client.network.gpro";
option java_multiple_files = true;
option java_package = "com.cms.client.network.gpro";

//服务器类型
enum ERK_SERVICETYPE{
	ERK_SERVICE_NONE = 0;
	ERK_SERVICE_EUREKA = 1;
	//数据网关 ,gate,home,login的负载均衡
	ERK_SERVICE_DATAROUTER = 2;
	//资源分配
	ERK_SERVICE_STATE = 3;
	//客户端直连网关
	ERK_SERVICE_GATE = 4;
	//部署任务系统，购买等逻辑
	ERK_SERVICE_HOME = 5;
	//第三方服务router负载均衡器
	ERK_SERVICE_SVRROUTER = 6;
	//chat
	ERK_SERVICE_CHAT = 7;
	//mail
	ERK_SERVICE_MAIL = 8;
	//friend
	ERK_SERVICE_FRIEND = 9;
	//fightrouter
	ERK_SERVICE_FIGHTROUTER = 10;
	//matchmaking
	ERK_SERVICE_MATCHMAKING = 11;
	//游戏逻辑服务器
	ERK_SERVICE_GAME = 12;
	//数据同步服务器
	ERK_SERVICE_DATASYNC = 13;
	//全局服务，比如工会、战斗匹配
	ERK_SERVICE_UNION = 14;
	ERK_SERVICE_MAX = 15;
}

//eureka server node info
message EurekaServerNode{
  //服务器sn
  int64 iid = 1;
  //对方token，用于验证
  int64 token = 2;
  //动态ip
  string ip = 3;
  //服务器port
  int32 port = 4;
  //是否master节点
  bool ismaster = 5;
}

//server node info
message ServerNode{
  //服务器sn
  int64 iid = 1;
  //对方token，用于验证
  int64 token = 2;
  //动态ip
  string ip = 3;
  //服务器port
  int32 port = 4;
  //扩展信息
  map<string,string> exts = 5;
  //是否router服务
  bool isrouter = 6;
  //是否上线
  bool isonline = 7;
  repeated int64 subscribes = 8;
  repeated int64 routers =9;
}

//Eureka服务器注册到
message Erk_EurekaRegist_req {
  //master ip,port
  string ip = 1;
  //服务器port
  int32 port = 2;
}

message Erk_EurekaRegist_ack{
  //0:成功 1:不是master 2:其他错误
  int32 result = 1;
  //成功，返回iid和token
  optional int64 myiid = 2;
  optional int64 mytoken = 3;
  //eureka iid 种子
  optional int64 eureka_seed = 4;
  //service iid 种子
  optional int64 service_seed = 5;
}

//Eureka服务器相互绑定,svrid大的向小的发起连接
//网状结构
message Erk_EurekaBind_req {
  //我的iid
  int64 iid = 1;
  //我的token，用于验证
  int64 token = 2;
}

message Erk_EurekaBind_ack{
  //0:成功 1:token错误 2:暂时不存在该服务
  int32 result = 1;
}

//通知注册的服务eureka服务上线或下线
message Erk_EurekaUpdate_ntf{
  //是否全量
  bool fulleurekas = 1;
  //上线的服务
  repeated EurekaServerNode online = 2;
  //下线的服务iid
  repeated int64 offline = 3;
  //master服务id, 0表示没有master服务
  int64 masteriid = 4;
  //eureka iid 种子
  int64 eureka_seed = 5;
  //service iid 种子
  int64 service_seed = 6;
}

//master节点变更通知
message Erk_MasterChange_ntf{
  int64 newmaster = 1;
  int64 mastertoken =2;
}

//服务同步 master to slaver
message Erk_ServiceSync_ntf{
  int64 masteriid = 1;
  //是否全量
  bool fullsvrs = 2;
  //新增服务
  repeated ServerNode newsvrs = 3;
  //下线的服务
  repeated int64 offline = 4;
  //eureka iid 种子
  int64 eureka_seed = 5;
  //service iid 种子
  int64 service_seed = 6;
}

//其他服务向eureka注册中心，注册服务
//向master节点发起注册
message Erk_ServiceRegist_req{
  //服务器类型 NETSVR_TYPE_ENUM定义
  int32 svr_type = 1;
  string ip = 2;
  int32 port = 3;
  //扩展信息
  map<string,string> exts = 4;
  //是否router服务
  bool isrouter = 5;
}

message Erk_ServiceRegist_ack{
  //0:成功 1:失败 2:不是master节点
  int32 result = 1;
  //service编号，由eureka保证唯一
  optional int64 iid = 2;
  optional int64 token = 3;
  //eureka iid
  optional int64 eurekaiid = 4;
  optional int64 eurekatoken = 5;
}

//已注册服务绑定eureka节点
message Erk_ServiceBind_req{
  //服务器类型 NETSVR_TYPE_ENUM定义
  int32 svr_type = 1;
  //service编号，由eureka保证唯一
  int64 iid = 2;
  int64 token = 3;
  int64 eurekatoken = 4;
}

message Erk_ServiceBind_ack{
  //0:成功 1:失败 2:服务不存在
  int32 result = 1;
  optional int64 eurekaiid = 2;
  optional int64 eurekatoken = 3;
}

//其他服务向eureka注册中心，订阅服务信息
message Erk_ServiceSubscribe_req{
  message svrinfo{
    //订阅类型
	int32 svr_type = 1;
	//已经存在的服务
	repeated int64 exits = 2;
  }
  //请求方iid
  int64 myiid = 1;
  //请求放服务类型
  int32 mysvrtype = 2;
  //服务器类型 NETSVR_TYPE_ENUM定义
  repeated svrinfo svr_type = 3;
}

message Erk_ServiceSubscribe_ntf{
  //请求方iid
  int64 myiid = 1;
  //服务器类型 NETSVR_TYPE_ENUM定义
  int32 svr_type = 2;
  //新上线的服务
  repeated ServerNode newsvrs = 3;
  //下线的服务
  repeated int64 offsvrs = 4;
}

//负载均衡服务订阅
message Erk_RouterSubscribe_req{
  //请求方iid
  int64 myiid = 1;
  //请求放服务类型
  int32 mysvrtype = 2;
  //服务器类型 NETSVR_TYPE_ENUM定义
  repeated int32 svr_types = 3;
}

message Erk_RouterSubscribe_ntf{
  //请求方iid
  int64 myiid = 1;
  //服务器类型 NETSVR_TYPE_ENUM定义
  int32 svr_type = 2;
  //服务列表
  repeated int64 svriids = 3;
}

//router服务上线通知
message Erk_RouterOnline_req{
  //请求方iid
  int64 myiid = 1;
  //请求放服务类型
  int32 mysvrtype = 2;
}

message Svr_LiveTick_ntf{
}

//router服务上线通知
message Svr_RouterOnline_ntf{
  //请求方iid
  int64 routeriid = 1;
  //请求放服务类型
  int32 routertype = 2;
}

//服务之间相互注册
message Svr_ServiceBindService_req{
  //服务器类型 NETSVR_TYPE_ENUM定义
  int32 svr_type = 1;
  //请求方service编号
  int64 myiid = 2;
  int64 mytoken = 3;
  //扩展信息
  map<string,string> myexts = 4;
  //被请求方service编号
  int64 toiid = 10;
  int64 totoken = 11;
}

message Svr_ServiceBindService_ack{
  //0:成功 1:失败
  int32 result = 1;
  //服务器类型 NETSVR_TYPE_ENUM定义
  int32 svr_type = 2;
  //被请求方service编号
  int64 toiid = 3;
  int64 totoken = 4;
}

//gate更新自身空闲的slot,10s更新一下
message Svr_GateSlotUpdate_ntf{
  //gateid
  int64 iid = 1;
  //空闲的slot数量
  int32 frees = 2;
}

//gameservice注册到fightrouter
message GsFr_GameRegionRegist_ntf{
  //区域编号
  int32 regionid = 1;
}

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eureka_internal.proto

package com.cms.client.network.gpro;

/**
 * <pre>
 *服务器类型
 * </pre>
 *
 * Protobuf enum {@code PRO.ERK_SERVICETYPE}
 */
public enum ERK_SERVICETYPE
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>ERK_SERVICE_NONE = 0;</code>
   */
  ERK_SERVICE_NONE(0),
  /**
   * <code>ERK_SERVICE_EUREKA = 1;</code>
   */
  ERK_SERVICE_EUREKA(1),
  /**
   * <pre>
   *数据网关 ,gate,home,login的负载均衡
   * </pre>
   *
   * <code>ERK_SERVICE_DATAROUTER = 2;</code>
   */
  ERK_SERVICE_DATAROUTER(2),
  /**
   * <pre>
   *资源分配
   * </pre>
   *
   * <code>ERK_SERVICE_RES = 3;</code>
   */
  ERK_SERVICE_RES(3),
  /**
   * <pre>
   *客户端直连网关
   * </pre>
   *
   * <code>ERK_SERVICE_GATE = 4;</code>
   */
  ERK_SERVICE_GATE(4),
  /**
   * <pre>
   *部署任务系统，购买等逻辑
   * </pre>
   *
   * <code>ERK_SERVICE_HOME = 5;</code>
   */
  ERK_SERVICE_HOME(5),
  /**
   * <pre>
   *身份认证服务，登陆排队等
   * </pre>
   *
   * <code>ERK_SERVICE_LOGIN = 6;</code>
   */
  ERK_SERVICE_LOGIN(6),
  /**
   * <pre>
   *第三方服务router负载均衡器
   * </pre>
   *
   * <code>ERK_SERVICE_SVRROUTER = 7;</code>
   */
  ERK_SERVICE_SVRROUTER(7),
  /**
   * <pre>
   *全局服务，比如工会、战斗匹配
   * </pre>
   *
   * <code>ERK_SERVICE_UNION = 8;</code>
   */
  ERK_SERVICE_UNION(8),
  /**
   * <pre>
   *chat
   * </pre>
   *
   * <code>ERK_SERVICE_CHAT = 9;</code>
   */
  ERK_SERVICE_CHAT(9),
  /**
   * <pre>
   *mail
   * </pre>
   *
   * <code>ERK_SERVICE_MAIL = 10;</code>
   */
  ERK_SERVICE_MAIL(10),
  /**
   * <pre>
   *friend
   * </pre>
   *
   * <code>ERK_SERVICE_FRIEND = 11;</code>
   */
  ERK_SERVICE_FRIEND(11),
  /**
   * <pre>
   *fightrouter
   * </pre>
   *
   * <code>ERK_SERVICE_FIGHTROUTER = 12;</code>
   */
  ERK_SERVICE_FIGHTROUTER(12),
  /**
   * <pre>
   *matchmaking
   * </pre>
   *
   * <code>ERK_SERVICE_MATCHMAKING = 13;</code>
   */
  ERK_SERVICE_MATCHMAKING(13),
  /**
   * <pre>
   *游戏逻辑服务器
   * </pre>
   *
   * <code>ERK_SERVICE_GAME = 14;</code>
   */
  ERK_SERVICE_GAME(14),
  /**
   * <pre>
   *数据同步服务器
   * </pre>
   *
   * <code>ERK_SERVICE_DATASYNC = 15;</code>
   */
  ERK_SERVICE_DATASYNC(15),
  /**
   * <code>ERK_SERVICE_MAX = 16;</code>
   */
  ERK_SERVICE_MAX(16),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>ERK_SERVICE_NONE = 0;</code>
   */
  public static final int ERK_SERVICE_NONE_VALUE = 0;
  /**
   * <code>ERK_SERVICE_EUREKA = 1;</code>
   */
  public static final int ERK_SERVICE_EUREKA_VALUE = 1;
  /**
   * <pre>
   *数据网关 ,gate,home,login的负载均衡
   * </pre>
   *
   * <code>ERK_SERVICE_DATAROUTER = 2;</code>
   */
  public static final int ERK_SERVICE_DATAROUTER_VALUE = 2;
  /**
   * <pre>
   *资源分配
   * </pre>
   *
   * <code>ERK_SERVICE_RES = 3;</code>
   */
  public static final int ERK_SERVICE_RES_VALUE = 3;
  /**
   * <pre>
   *客户端直连网关
   * </pre>
   *
   * <code>ERK_SERVICE_GATE = 4;</code>
   */
  public static final int ERK_SERVICE_GATE_VALUE = 4;
  /**
   * <pre>
   *部署任务系统，购买等逻辑
   * </pre>
   *
   * <code>ERK_SERVICE_HOME = 5;</code>
   */
  public static final int ERK_SERVICE_HOME_VALUE = 5;
  /**
   * <pre>
   *身份认证服务，登陆排队等
   * </pre>
   *
   * <code>ERK_SERVICE_LOGIN = 6;</code>
   */
  public static final int ERK_SERVICE_LOGIN_VALUE = 6;
  /**
   * <pre>
   *第三方服务router负载均衡器
   * </pre>
   *
   * <code>ERK_SERVICE_SVRROUTER = 7;</code>
   */
  public static final int ERK_SERVICE_SVRROUTER_VALUE = 7;
  /**
   * <pre>
   *全局服务，比如工会、战斗匹配
   * </pre>
   *
   * <code>ERK_SERVICE_UNION = 8;</code>
   */
  public static final int ERK_SERVICE_UNION_VALUE = 8;
  /**
   * <pre>
   *chat
   * </pre>
   *
   * <code>ERK_SERVICE_CHAT = 9;</code>
   */
  public static final int ERK_SERVICE_CHAT_VALUE = 9;
  /**
   * <pre>
   *mail
   * </pre>
   *
   * <code>ERK_SERVICE_MAIL = 10;</code>
   */
  public static final int ERK_SERVICE_MAIL_VALUE = 10;
  /**
   * <pre>
   *friend
   * </pre>
   *
   * <code>ERK_SERVICE_FRIEND = 11;</code>
   */
  public static final int ERK_SERVICE_FRIEND_VALUE = 11;
  /**
   * <pre>
   *fightrouter
   * </pre>
   *
   * <code>ERK_SERVICE_FIGHTROUTER = 12;</code>
   */
  public static final int ERK_SERVICE_FIGHTROUTER_VALUE = 12;
  /**
   * <pre>
   *matchmaking
   * </pre>
   *
   * <code>ERK_SERVICE_MATCHMAKING = 13;</code>
   */
  public static final int ERK_SERVICE_MATCHMAKING_VALUE = 13;
  /**
   * <pre>
   *游戏逻辑服务器
   * </pre>
   *
   * <code>ERK_SERVICE_GAME = 14;</code>
   */
  public static final int ERK_SERVICE_GAME_VALUE = 14;
  /**
   * <pre>
   *数据同步服务器
   * </pre>
   *
   * <code>ERK_SERVICE_DATASYNC = 15;</code>
   */
  public static final int ERK_SERVICE_DATASYNC_VALUE = 15;
  /**
   * <code>ERK_SERVICE_MAX = 16;</code>
   */
  public static final int ERK_SERVICE_MAX_VALUE = 16;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static ERK_SERVICETYPE valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static ERK_SERVICETYPE forNumber(int value) {
    switch (value) {
      case 0: return ERK_SERVICE_NONE;
      case 1: return ERK_SERVICE_EUREKA;
      case 2: return ERK_SERVICE_DATAROUTER;
      case 3: return ERK_SERVICE_RES;
      case 4: return ERK_SERVICE_GATE;
      case 5: return ERK_SERVICE_HOME;
      case 6: return ERK_SERVICE_LOGIN;
      case 7: return ERK_SERVICE_SVRROUTER;
      case 8: return ERK_SERVICE_UNION;
      case 9: return ERK_SERVICE_CHAT;
      case 10: return ERK_SERVICE_MAIL;
      case 11: return ERK_SERVICE_FRIEND;
      case 12: return ERK_SERVICE_FIGHTROUTER;
      case 13: return ERK_SERVICE_MATCHMAKING;
      case 14: return ERK_SERVICE_GAME;
      case 15: return ERK_SERVICE_DATASYNC;
      case 16: return ERK_SERVICE_MAX;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ERK_SERVICETYPE>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ERK_SERVICETYPE> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ERK_SERVICETYPE>() {
          public ERK_SERVICETYPE findValueByNumber(int number) {
            return ERK_SERVICETYPE.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.cms.client.network.gpro.EurekaInternal.getDescriptor().getEnumTypes().get(0);
  }

  private static final ERK_SERVICETYPE[] VALUES = values();

  public static ERK_SERVICETYPE valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private ERK_SERVICETYPE(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:PRO.ERK_SERVICETYPE)
}

